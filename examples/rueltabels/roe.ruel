@RUEL roe

http://esolangs.org/wiki/Roie
(without I)

1: e {_E}

2-5: pointer 0 (n-w)
    2: {P_N0}
    3: {P_E0}
    4: {P_S0}
    5: {P_W0}
6-9: pointer 1 (n-w)
    6: {P_N1}
    7: {P_E1}
    8: {P_S1}
    9: {P_W1}

10: o (solid)  {O}
11-15: o that will send two 1s out (n-w)
    11: north {O_N1}
    12: east  {O_E1}
    13: south {O_S1}
    14: west  {O_W1}
16-19: o that will send two 0s out (n-w)
    16: n {O_N0}
    17: e {O_E0}
    18: s {O_S0}
    19: w {O_W0}
20-23: o releasing 0s, but diagonally... sorted by diagonal direction of 'mouth'
    20: ne {O_NE0}
    21: se {O_SE0}
    22: sw {O_SW0}
    23: nw {O_NW0}
24-27: o releasing 1s, diagonally
    24: ne {O_NE1}
    25: se {O_SE1}
    26: sw {O_SW1}
    27: nw {O_NW1}

28: r (solid) {R}
29-32: r that will send a pointer 0 out (n-w)
    29: n {R_N0}
    30: e {R_E0}
    31: s {R_S0}
    32: w {R_W0}
33-34: r that will send a pointer 1 out (n-w)
    33: n {R_N1}
    34: e {R_E1}
    35: s {R_S1}
    36: w {R_W1}

@TABEL
states: 37
neighborhood: Moore
symmetries: none

anyO = (O .. O_NW1)
anyR = (R .. R_W1)
notP = any-(P_N0 .. P_W1)

north = (P_N0, R_N0, O_N0, O_NW0, O_NE0, P_N1, R_N1, O_N1, O_NW1, O_NE1)
east = (P_E0, R_E0, O_E0, O_NE0, O_SE0, P_E1, R_E1, O_E1, O_NE1, O_SE1)
south = (P_S0, R_S0, O_S0, O_SW0, O_SE0, P_S1, R_S1, O_S1, O_SW1, O_SE1)
west = (P_W0, R_W0, O_W0, O_NW0, O_SW0, P_W1, R_W1, O_W1, O_NW1, O_SW1)

northZero = (P_N0, R_N0, O_N0, O_NW0, O_NE0)
eastZero = (P_E0, R_E0, O_E0, O_NE0, O_SE0)
southZero = (P_S0, R_S0, O_S0, O_SW0, O_SE0)
westZero = (P_W0, R_W0, O_W0, O_NW0, O_SW0)


# NOT instruction setup
anyO, N south, NE..NW notP, [N: (O_S1 * 5, O_S0, ...)]
anyO, N..NE notP, E west, SE..NW notP, [E: (O_W1 * 5, O_W0, ...)]
anyO, N..SE notP, S north, SW..NW notP, [S: (O_N1 * 5, O_N0, ...)]
anyO, N..SW notP, W east, NW notP, [W: (O_E1 * 5, O_E0, ...)]

# OR instruction setup
# output-0 cases first to override later ones
anyO, N southZero, NE notP, E 0, SE..SW notP, W eastZero, NW notP, O_SE0
anyO, N southZero, NE notP, E westZero, SE..SW notP, W 0, NW notP, O_SW0
anyO, N..NE notP, E 0, SE notP, S northZero, SW notP, W eastZero, NW notP, O_NE0
anyO, N..NE notP, E P_W0, SE notP, S northZero, SW notP, W 0, NW notP, O_NW0
# the rest (output-1 cases)
anyO, N south, NE..SW notP, W east, NW notP, O_SE1
anyO, N south, NE notP, E west, SE..NW notP, O_SW1
anyO, N..SE notP, S north, SW notP, W east, NW notP, O_NE1
anyO, N..NE notP, E west, SE notP, S north, SW..NW notP, O_NW1

# Output from OR
(O_NE0, O_SE0, O_SW0, O_NW0), N..NW any, O  ->  N[0: (P_N0, _, _, P_N0)]  E[0: (P_E0, P_E0, _, _)]  S[0: (_, P_S0, P_S0, _)]  W[0: (_, _, P_W0, P_W0)]
(O_NE1, O_SE1, O_SW1, O_NW1), N..NW any, O  ->  N[0: (P_N1, _, _, P_N1)]  E[0: (P_E1, P_E1, _, _)]  S[0: (_, P_S1, P_S1, _)]  W[0: (_, _, P_W1, P_W1)]

# Coubled output from NOT
(O_N0, O_E0, O_S0, O_W0), N..NW any, O  ->  N[0: (_, P_E0, _, P_W0)]  E[0: (P_N0, _, P_S0, _)]  S[0: (_, P_E0, _, P_W0)]  W[0: (P_N0, _, P_S0, _)]
(O_N1, O_E1, O_S1, O_W1), N..NW any, O  ->  N[0: (_, P_E1, _, P_W1)]  E[0: (P_N1, _, P_S1, _)]  S[0: (_, P_E1, _, P_W1)]  W[0: (P_N1, _, P_S1, _)]

# Rotation setup
anyR, N south, NE..NW notP, [N: (R_W0 * 5, R_W1, ...)]
anyR, N..NE notP, E west, SE..NW notP, [E: (R_N0 * 5, R_N1, ...)]
anyR, N..SE notP, S north, SW..NW notP, [S: (R_E0 * 5, R_E1, ...)]
anyR, N..SW notP, W east, NW notP, [W: (R_S0 * 5, R_S1, ...)]

# Output from rotation
(R_N0, R_E0, R_S0, R_W0), N..NW any, R  ->  N[0: (P_N0, _, ...)]  E[0: (_, P_E0, _, _)]  S[0: (_, _, P_S0, _)]  W[0: (_, _, _, P_W0)]
(R_N1, R_E1, R_S1, R_W1), N..NW any, R  ->  N[0: (P_N1, _, ...)]  E[0: (_, P_E1, _, _)]  S[0: (_, _, P_S1, _)]  W[0: (_, _, _, P_W1)]

# e instruction should delete, not be deleted (by the below)
_E, N..NW any, _E

# pointer movement
(P_N0, P_E0, P_S0, P_W0), N..NW any, 0  ->  N[0: (P_N0, _, ...)]  E[0: (_, P_E0, _, _)]  S[0: (_, _, P_S0, _)]  W[0: (_, _, _, P_W0)]
(P_N1, P_E1, P_S1, P_W1), N..NW any, 0  ->  N[0: (P_N1, _, ...)]  E[0: (_, P_E1, _, _)]  S[0: (_, _, P_S1, _)]  W[0: (_, _, _, P_W1)]

@COLORS
1: FF0011  # e, reddish
2 3 4 5 6 7 8 9: 00AAFF  # pointer, light blue
10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27: A50000  # o, darker red
28 29 30 31 32 33 34 35 36: 008A00  # r, green

@ICONS
?  000 FFF # 29
0: 303030
1: FF0011
2: 00AAFF
3: 0099EE
4: 008A00

#C 1 (e)
x = 9, y = 14, rule = roe
2.5A$2.5A$2A5.2A$2A5.2A$2A5.2A$2A5.2A$9A$9A$2A$2A$2A5.2A$2A5.2A$2.5A$
2.5A!

#C 2 (pointer "0", n..w)
x = 15, y = 15, rule = roe
7.B$6.3B$6.3B$5.2B.2B$5.2B.2B$4.2B3.2B$4.2B3.2B$3.2B5.2B$3.2B5.2B$2.
2B7.2B$2.2B7.2B$.2B9.2B$.2B9.2B$2B11.2B$2B11.2B!

#C 3
x = 15, y = 15, rule = roe
2B$4B$2.4B$4.4B$6.4B$8.4B$10.4B$12.3B$10.4B$8.4B$6.4B$4.4B$2.4B$4B$2B
!

#C 4
x = 15, y = 15, rule = roe
2B11.2B$2B11.2B$.2B9.2B$.2B9.2B$2.2B7.2B$2.2B7.2B$3.2B5.2B$3.2B5.2B$
4.2B3.2B$4.2B3.2B$5.2B.2B$5.2B.2B$6.3B$6.3B$7.B!

#C 5
x = 15, y = 15, rule = roe
13.2B$11.4B$9.4B$7.4B$5.4B$3.4B$.4B$3B$.4B$3.4B$5.4B$7.4B$9.4B$11.4B$
13.2B!

#C 6 (pointer "1", n..w)
x = 15, y = 15, rule = roe
7.C$6.3C$6.3C$5.2C.2C$5.2C.2C$4.2C3.2C$4.2C3.2C$3.2C5.2C$3.2C5.2C$2.
2C7.2C$2.2C7.2C$.2C9.2C$.2C9.2C$CC11.2C$2C11.2C!

#C 7
x = 15, y = 15, rule = roe
CC$4C$2.4C$4.4C$6.4C$8.4C$10.4C$12.3C$10.4C$8.4C$6.4C$4.4C$2.4C$4C$2C
!

#C 8
x = 15, y = 15, rule = roe
2C11.2C$2C11.CC$.2C9.2C$.2C9.2C$2.2C7.2C$2.2C7.2C$3.2C5.2C$3.2C5.2C$
4.2C3.2C$4.2C3.2C$5.2C.2C$5.2C.2C$6.3C$6.3C$7.C!

#C 9
x = 15, y = 15, rule = roe
13.2C$11.4C$9.4C$7.4C$5.4C$3.4C$.4C$3C$.4C$3.4C$5.4C$7.4C$9.4C$11.4C$
13.CC!

#C 28 (r)
x = 9, y = 12, rule = roe
8D$9D$2D5.2D$2D5.2D$2D$2D$2D$2D$2D$2D$2D$2D!

#C 10 (o)
x = 9, y = 14, rule = roe
2.5A$2.5A$2A5.2A$2A5.2A$2A5.2A$2A5.2A$2A5.2A$2A5.2A$2A5.2A$2A5.2A$2A
5.2A$2A5.2A$2.5A$2.5A!
