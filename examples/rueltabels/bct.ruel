@RUEL bct

An implementation of bitwise cyclic tag.

state 0: Vacuum.

state 1: Data-tape 0.
state 2: Data-tape 1.

state 3: Program-tape 0.
state 4: Program-tape 1.

state 5: Shifter. Moves both itself and the data tape one unit down to render program execution cyclic.



state 6: Transitory program-tape 0.
state 7: Transitory program-tape 1.

state 8: Pre-copying program-tape 0. (Used when a prgm-tape bit is the x in a 1x instruction)
state 9: Pre-copying program-tape 1. (Ditto)

state 10: Transitory program-tape 0.
state 11: Transitory program-tape 1.

state 12: Rightward-moving data-tape 0.
state 13: Rightward-moving data-tape 1.

state 14: Transitory reflector.
state 15: Ditto but about to turn into normal reflector.

state 16: To-be-moved-down data-tape 0.
state 17: To-be-moved-down data-tape 1.

@COLORS: golly
1  235 235 235  lighter gray
2   30  30  30  darker gray
12 235 235 235  lighter gray
13  30  30  30  darker gray
16 235 235 235  lighter gray
17  30  30  30  darker gray
3  200 200 200  light gray
4   90  90  90  dark gray
5    0 255 255  cyan
14   0 255 255  cyan
15   0 255 255  cyan

@TABEL
states: 18
neighborhood: Moore
symmetries: none

data = {1, 2}
rdata = {12, 13}
ddata = {16, 17}
vacdata = {0, 1, 2}
vacrdata = {0, 12, 13}
vacddata = {0, 16, 17}

# If a shifter is encountered, reflect + shift data tape down 2 cell
# go right
vacddata, (1, 2), NE..W any, 5, [N: (16, 17)]
ddata, 0, NE..W any, 5, 0
# pull down
vacrdata, (16, 17), NE..NW any, [N: (12, 13)]
# go left
vacdata, (12, 13), 5, E..NW any, [N: (1, 2)]

# Move rightward-moving data to the right
vacrdata, N..SW any, W rdata, any, [W]
rdata, any, any, any, any, any, any, 0, any, 0

# shift the shifter down two as well
# right
0, 5, any, any, any, any, any, 0, rdata, 14
# left
0, 5, data, 0, any, any, any, any, any, 14
# finally
(14, 15), N..NW any, 0 -> S[0: (15, 5)]
# delete shifter at end of its input stream
5, 0, 0, 0, ddata, 0, 0, 0, 0, 0
5, 0, 0, 0, 0, 0, data, 0, 0, 0

# Shift prgm tape down 1 if rightward data above it
(3, 4), rdata, NE..NW any, [0: (10, 11)]

# If a data bit has a shifter to its right, don't attempt to copy it
data, any, any, 5, any, any, any, any, any, 0

# If a prgm-tape 1 is encountered, shift it downward
# and append the command to its left (by copying+shifting down) onto the right end of the data tape, 
# if the leftmost bit is 1 -- otherwise just shift it down
# ----
# check the x in 1x
# leftmost bit 1?
(3, 4), any, 2, 4, SE..NW any, [0: (8, 9)] # copy+shift down
# ----
# leftmost bit 0?
(3, 4), any, 1, 4, SE..NW any, [0: (6, 7)] # just shift down
# ----
# shift the 1 in 1x down
4, data, NE..NW any, 7
7, N..NW any, 0 -> S[(11, _, ...)]
# ----
# state 8 becomes state 1 and below it state 3
8, N..NW any, 1 -> S[(10, _, ...)]
# state 9 becomes state 2 and below it state 4
9, N..NW any, 2 -> S[(11, _, ...)]
# ----
# states 10 and 11 become 3 and 4 moving down
(10, 11), N..NW any, 0 -> S[0: (3, 4)]

# If a bit of data has reached the right end of the tape, append it
# and delete the waiting data
data, N..NE any, 0, any, S data, SW..NW any, [S]
# next line accounts for single-item data tape being appended to
data, N..NE any, 0, SE data, S..NW any, [SE]
data, data, 0, E..NW any, 0

# If a prgm-tape 0 is encountered, shift it down and delete the leftmost data-tape bit
3, data, NE..NW any, 6
6, N..NW any, 0 -> S:10  # 3

# Delete the leftmost bit if a program-tape 0 is encountered
0, N..NE any, data, 3, S..NW any, 0

# Keep a data-tape bit in place if it's waiting below the data tape (to prepare for moving to the end)
data, data, NE..NW any, [0]
0, data, any, data, SE..NW any, 0

# Move data tape to the left otherwise
0, any, data, data, SE..NW any, 0
vacdata, N..NE any, E vacdata, SE..NW any, [E]