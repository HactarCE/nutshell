@NUTSHELL data_test

 1: {Data} Data

 2: {Prompt} Output prompter
 3: {DataOut} Data turned output, will revert to data on next generation
 4: {ZeroOut} Data being output, will revert to vacuum on next generation
 5: {FinalDataOut} Data being output that will not extend anymore
 6: {FinalZeroOut} Data being output that will not extend anymore

 7: Incrementor             {IncSignal}
 8: ^same, moving thru data {IncData}
 9: Decrementor             {DecSignal}
10: ^same, moving thru data {DecData}

x = 15, y = 15, rule = data_test
.A$2.A$3.A2.A$4.A.2A$A.A2.A.2A$.A.2A.4A2.A$.2A.7A.2A$2.13A$9.B2$8.B2$
10.G2$12.I!

@TABLE
vacdata = (0, Data)
up = (Prompt, DataOut)
out = (ZeroOut, DataOut)
signal = (IncSignal, DecSignal, Prompt)

signal, 0, live, E..W 0, live; 0 -> N[0: (Data, 0, ...)]

Prompt, 0, NE..NW any; 0 -> N:Prompt

vacdata, S up, SW any, W 0, NW..SE any; [0: (FinalZeroOut, FinalDataOut)]
(FinalZeroOut, FinalDataOut), N..NW any; [0: vacdata] -> N[(FinalZeroOut, FinalDataOut, _, ...)]

up, N..NW any; [0: vacdata] -> N[(ZeroOut, DataOut, _, ...)]

out, N..NW any; [0: vacdata] -> N[(ZeroOut, DataOut, _, ...)]  NW[(_, DataOut, _, ...)]

IncSignal, N..NW any; 0 -> N[(IncSignal, IncData, ...)]
DecSignal, N..NW any; 0 -> N[(DecSignal, DecData, ...)]

Data, SE DecData, S..E any; [NW: (0, DecData, ...)]
vacdata, SE IncData, S..E any; [0: (Data, IncData)]
0, SE IncData, S..E any; [NW: (Data, IncData, ...)]

DecData, SE 0, S..E any; [NW: (vacdata, ...)]
(IncData, DecData), N..NW any; Data


@ICONS
?  00FFFF .. FF0000 [10]
0: 303030
1: FFF
2: 00A0FF

#C Prompt
x = 7, y = 6, rule = data_test
2A2.2A$A.A.A.A$A.A.A.A$2A2.A.A$A.A.A.A$A.A.2A!

#C IncSignal
x = 7, y = 7, rule = data_test
2.2B$2.2B$6B$6B$2.2B$2.2B!

#C DecSignal
x = 6, y = 2, rule = data_test
6B$6B!
