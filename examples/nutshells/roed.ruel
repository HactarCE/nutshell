@NUTSHELL roed

http://esolangs.org/wiki/Roie
(sans i, plus a [d]elay instruction)

1: e {E_}

2-5: pointer 0 (n-w)
    2: n {P_N0}
    3: e {P_E0}
    4: s {P_S0}
    5: w {P_W0}
6-9: pointer 1 (n-w)
    6: n {P_N1}
    7: e {P_E1}
    8: s {P_S1}
    9: w {P_W1}

10: o {O}
11-15: o releasing two 1s (n-w)
    11: north {O_N1}
    12: east  {O_E1}
    13: south {O_S1}
    14: west  {O_W1}
16-19: o releasing two 0s (n-w)
    16: n {O_N0}
    17: e {O_E0}
    18: s {O_S0}
    19: w {O_W0}
20-23: o releasing 0s, but diagonally... sorted by diagonal direction of 'mouth'
    20: ne {O_NE0}
    21: se {O_SE0}
    22: sw {O_SW0}
    23: nw {O_NW0}
24-27: o releasing 1s, diagonally
    24: ne {O_NE1}
    25: se {O_SE1}
    26: sw {O_SW1}
    27: nw {O_NW1}

28: r (solid) {R}
29-32: r that will send a pointer 0 out (n-w)
    29: n {R_N0}
    30: e {R_E0}
    31: s {R_S0}
    32: w {R_W0}
33-34: r that will send a pointer 1 out (n-w)
    33: n {R_N1}
    34: e {R_E1}
    35: s {R_S1}
    36: w {R_W1}

37: d {D}
38-41: transitory d to release a pointer 0 (n-w)
    38: n {D_PRE_N0}
    39: e {D_PRE_E0}
    40: s {D_PRE_S0}
    41: w {D_PRE_W0}
42-45: transitory d to release a pointer 1 (n-w)
    42: n {D_PRE_N1}
    43: e {D_PRE_E1}
    44: s {D_PRE_S1}
    45: w {D_PRE_W1}

46-49: d releasing a pointer 0 (n-w)
    46: n {D_N0}
    47: e {D_E0}
    48: s {D_S0}
    49: w {D_W0}
42-53: d releasing a pointer 1 (n-w)
    50: n {D_N1}
    51: e {D_E1}
    52: s {D_S1}
    53: w {D_W1}
    
@TABLE
states: ?
neighborhood: Moore
symmetries: none

anyO = (O .. O_NW1)
anyR = (R .. R_W1)
anyD = (D, D_N0 .. D_W1)
notP = live-(P_N0 .. P_W1)

northZero = (P_N0, R_N0, D_N0, O_E0, O_W0, O_NW0, O_NE0)
eastZero = (P_E0, R_E0, D_E0, O_N0, O_S0, O_NE0, O_SE0)
southZero = (P_S0, R_S0, D_S0, O_E0, O_W0, O_SW0, O_SE0)
westZero = (P_W0, R_W0, D_W0, O_N0, O_S0, O_NW0, O_SW0)

north = (northZero, P_N1, R_N1, D_N1, O_E1, O_W1, O_NW1, O_NE1)
east = (eastZero, P_E1, R_E1, D_E1, O_N1, O_S1, O_NE1, O_SE1)
south = (southZero, P_S1, R_S1, D_S1, O_E1, O_W1, O_SW1, O_SE1)
west = (westZero, P_W1, R_W1, D_W1, O_N1, O_S1, O_NW1, O_SW1)

E_, N..NW any; E_

# OR instruction setup
# output-0 cases first to override later ones
anyO; N southZero, NE any, E any, SE..SW any, W eastZero, NW any; O_SE0
anyO; N southZero, NE any, E westZero, SE..SW any, W any, NW any; O_SW0
anyO; N..NE any, E any, SE any, S northZero, SW any, W eastZero, NW any; O_NE0
anyO; N..NE any, E P_W0, SE any, S northZero, SW any, W any, NW any; O_NW0
# the rest (output-1 cases)
anyO; N south, NE..SW any, W east, NW any; O_SE1
anyO; N south, NE any, E west, SE..NW any; O_SW1
anyO; N..SE any, S north, SW any, W east, NW any; O_NE1
anyO; N..NE any, E west, SE any, S north, SW..NW any; O_NW1

# NOT instruction setup
anyO; N south, NE..NW any; [N: (O_S1 * southZero, O_S0, ...)]
anyO; N..NE any, E west, SE..NW any; [E: (O_W1 * westZero, O_W0, ...)]
anyO; N..SE any, S north, SW..NW any; [S: (O_N1 * northZero, O_N0, ...)]
anyO; N..SW any, W east, NW any; [W: (O_E1 * eastZero, O_E0, ...)]

# Rotation setup
anyR; N south, NE..NW any; [N: (R_W0 * southZero, R_E1, ...)]
anyR; N..NE any, E west, SE..NW any; [E: (R_N0 * westZero, R_S1, ...)]
anyR; N..SE any, S north, SW..NW any; [S: (R_E0 * northZero, R_W1, ...)]
anyR; N..SW any, W east, NW any; [W: (R_S0 * eastZero, R_N1, ...)]

# Delay setup
anyD; N south, NE..NW any; [N: (D_PRE_S0 * southZero, D_PRE_S1, ...)]
anyD; N..NE any, E west, SE..NW any; [E: (D_PRE_W0 * westZero, D_PRE_W1, ...)]
anyD; N..SE any, S north, SW..NW any; [S: (D_PRE_N0 * northZero, D_PRE_N1, ...)]
anyD; N..SW any, W east, NW any; [W: (D_PRE_E0 * eastZero, D_PRE_E1, ...)]
# Actual delay
(D_PRE_N0 .. D_PRE_W1); N..NW any; [0: (D_N0 .. D_W1)]

# Pointers annihilate mutually on collision
# even
north; N south, NE..NW any; 0
east; N..NE any, E west, SE..NW any; 0
south; N..SE any, S north, SW..NW any; 0
west; N..SW any, W east, NW any; 0
# odd (meh)
0; N south, NE..SE any, S north, SW..NW any; 0
0; NW..NE any, E west, SE..SW any, W east; 0
0; N south, NE any, E (0 * west, west), SE..SW any, W [E: (east, 0, ...)], NW any; 0
0; NW..NE any, E (0 * west, west), SE any, S north, SW any, W [E: (east, 0, ...)]; 0

# Pointer movement
(P_N0, P_E0, P_S0, P_W0); N..NW any; 0  ->  N[0: (P_N0, _, ...)]  E[0: (_, P_E0, _, _)]  S[0: (_, _, P_S0, _)]  W[0: (_, _, _, P_W0)]
(P_N1, P_E1, P_S1, P_W1); N..NW any; 0  ->  N[0: (P_N1, _, ...)]  E[0: (_, P_E1, _, _)]  S[0: (_, _, P_S1, _)]  W[0: (_, _, _, P_W1)]

# Output from rotation
(R_N0, R_E0, R_S0, R_W0); N..NW any; R  ->  N[0: (P_N0, _, ...)]  E[0: (_, P_E0, _, _)]  S[0: (_, _, P_S0, _)]  W[0: (_, _, _, P_W0)]
(R_N1, R_E1, R_S1, R_W1); N..NW any; R  ->  N[0: (P_N1, _, ...)]  E[0: (_, P_E1, _, _)]  S[0: (_, _, P_S1, _)]  W[0: (_, _, _, P_W1)]

# Output from delay
(D_N0, D_E0, D_S0, D_W0); N..NW any; D  ->  N[0: (P_N0, _, ...)]  E[0: (_, P_E0, _, _)]  S[0: (_, _, P_S0, _)]  W[0: (_, _, _, P_W0)]
(D_N1, D_E1, D_S1, D_W1); N..NW any; D  ->  N[0: (P_N1, _, ...)]  E[0: (_, P_E1, _, _)]  S[0: (_, _, P_S1, _)]  W[0: (_, _, _, P_W1)]

# Doubled output from OR
(O_NE0, O_SE0, O_SW0, O_NW0); N..NW any; O  ->  N[0: (P_N0, _, _, P_N0)]  E[0: (P_E0, P_E0, _, _)]  S[0: (_, P_S0, P_S0, _)]  W[0: (_, _, P_W0, P_W0)]
(O_NE1, O_SE1, O_SW1, O_NW1); N..NW any; O  ->  N[0: (P_N1, _, _, P_N1)]  E[0: (P_E1, P_E1, _, _)]  S[0: (_, P_S1, P_S1, _)]  W[0: (_, _, P_W1, P_W1)]

# Doubled output from NOT
(O_N0, O_E0, O_S0, O_W0); N..NW any; O  ->  N[0: (_, P_E0, _, P_W0)]  E[0: (P_N0, _, P_S0, _)]  S[0: (_, P_E0, _, P_W0)]  W[0: (P_N0, _, P_S0, _)]
(O_N1, O_E1, O_S1, O_W1); N..NW any; O  ->  N[0: (_, P_E1, _, P_W1)]  E[0: (P_N1, _, P_S1, _)]  S[0: (_, P_E1, _, P_W1)]  W[0: (P_N1, _, P_S1, _)]

@COLORS
FF0011: 1       # e, reddish
00AAFF: 2..5    # pointer, light blue
0055BB: 6..9    # 1 pointer, darker blue
A50000: 10..27  # o, darker red
008A00: 28..36  # r, green
FF6000: 37..53  # d, yellow


@ICONS
?  000 FFF [38]
0: 303030
1: FF0011
2: 00AAFF
3: 1400BB
4: 008A00
5: FF6000

#C 1 (e)
x = 9, y = 14, rule = roed
2.5A$2.5A$2A5.2A$2A5.2A$2A5.2A$2A5.2A$9A$9A$2A$2A$2A5.2A$2A5.2A$2.5A$
2.5A!

#C 2 (pointer "0", n..w)
x = 15, y = 15, rule = roed
7.B$6.3B$6.3B$5.2B.2B$5.2B.2B$4.2B3.2B$4.2B3.2B$3.2B5.2B$3.2B5.2B$2.
2B7.2B$2.2B7.2B$.2B9.2B$.2B9.2B$2B11.2B$2B11.2B!

#C 3
x = 15, y = 15, rule = roed
2B$4B$2.4B$4.4B$6.4B$8.4B$10.4B$12.3B$10.4B$8.4B$6.4B$4.4B$2.4B$4B$2B
!

#C 4
x = 15, y = 15, rule = roed
2B11.2B$2B11.2B$.2B9.2B$.2B9.2B$2.2B7.2B$2.2B7.2B$3.2B5.2B$3.2B5.2B$
4.2B3.2B$4.2B3.2B$5.2B.2B$5.2B.2B$6.3B$6.3B$7.B!

#C 5
x = 15, y = 15, rule = roed
13.2B$11.4B$9.4B$7.4B$5.4B$3.4B$.4B$3B$.4B$3.4B$5.4B$7.4B$9.4B$11.4B$
13.2B!

#C 6 (pointer "1", n..w)
x = 15, y = 15, rule = roed
7.C$6.3C$6.3C$5.2C.2C$5.2C.2C$4.2C3.2C$4.2C3.2C$3.2C5.2C$3.2C5.2C$2.
2C7.2C$2.2C7.2C$.2C9.2C$.2C9.2C$CC11.2C$2C11.2C!

#C 7
x = 15, y = 15, rule = roed
CC$4C$2.4C$4.4C$6.4C$8.4C$10.4C$12.3C$10.4C$8.4C$6.4C$4.4C$2.4C$4C$2C
!

#C 8
x = 15, y = 15, rule = roed
2C11.2C$2C11.CC$.2C9.2C$.2C9.2C$2.2C7.2C$2.2C7.2C$3.2C5.2C$3.2C5.2C$
4.2C3.2C$4.2C3.2C$5.2C.2C$5.2C.2C$6.3C$6.3C$7.C!

#C 9
x = 15, y = 15, rule = roed
13.2C$11.4C$9.4C$7.4C$5.4C$3.4C$.4C$3C$.4C$3.4C$5.4C$7.4C$9.4C$11.4C$
13.CC!

#C 28 (r)
x = 9, y = 12, rule = roed
8D$9D$2D5.2D$2D5.2D$2D$2D$2D$2D$2D$2D$2D$2D!

#C 37 (d)
x = 9, y = 12, rule = roed
7.2E$7.2E$7.2E$7.2E$2.7E$2.7E$2E5.2E$2E5.2E$2E5.2E$2E5.2E$2.7E$2.7E_

#C 10 (o)
x = 9, y = 14, rule = roed
2.5A$2.5A$2A5.2A$2A5.2A$2A5.2A$2A5.2A$2A5.2A$2A5.2A$2A5.2A$2A5.2A$2A
5.2A$2A5.2A$2.5A$2.5A!
