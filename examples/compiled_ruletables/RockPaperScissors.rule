@RULE RockPaperScissors
********************************
**** COMPILED FROM NUTSHELL ****
********************************

From "RockScissorsPaperLife" by Dave Greene.

@TABLE
neighborhood: Moore
symmetries: permute
n_states: 4

var any.0 = {0, 1, 2, 3}
var any.1 = any.0
var any.2 = any.0
var any.3 = any.0
var any.4 = any.0
var any.5 = any.0
var any.6 = any.0
var any.7 = any.0
var any.8 = any.0
var deadA.0 = {0, 2, 3}
var deadA.1 = deadA.0
var deadA.2 = deadA.0
var deadA.3 = deadA.0
var deadA.4 = deadA.0
var deadA.5 = deadA.0
var deadB.0 = {0, 1, 3}
var deadB.1 = deadB.0
var deadB.2 = deadB.0
var deadB.3 = deadB.0
var deadB.4 = deadB.0
var deadB.5 = deadB.0
var deadC.0 = {0, 1, 2}
var deadC.1 = deadC.0
var deadC.2 = deadC.0
var deadC.3 = deadC.0
var deadC.4 = deadC.0
var deadC.5 = deadC.0
var _a0.0 = {0, 1}
var _b0.0 = {0, 2}
var _c0.0 = {0, 3}


#### line 13: {0, 1}, 1 ~ 3, 3 ~ 3, deadC; 3 ####
# Dead cells for State 1
# Dead cells for State 2
# Dead cells for State 3
# Birth in competitive circumstances
_a0.0, 1, 1, 1, 3, 3, 3, deadC.0, deadC.1, 3

#### line 14: {0, 2}, 2 ~ 3, 1 ~ 3, deadA; 1 ####
_b0.0, 2, 2, 2, 1, 1, 1, deadA.0, deadA.1, 1

#### line 15: {0, 3}, 3 ~ 3, 2 ~ 3, deadB; 2 ####
_c0.0, 3, 3, 3, 2, 2, 2, deadB.0, deadB.1, 2

#### line 18: {0, 1}, 3 ~ 3, deadC; 3 ####
# Birth
_a0.0, 3, 3, 3, deadC.0, deadC.1, deadC.2, deadC.3, deadC.4, 3

#### line 19: {0, 2}, 1 ~ 3, deadA; 1 ####
_b0.0, 1, 1, 1, deadA.0, deadA.1, deadA.2, deadA.3, deadA.4, 1

#### line 20: {0, 3}, 2 ~ 3, deadB; 2 ####
_c0.0, 2, 2, 2, deadB.0, deadB.1, deadB.2, deadB.3, deadB.4, 2

#### line 23: {1..3}, [0: {3, 1, 2}], any ~ 7; 0 ####
# the RockScissorsPaper rules
1, 3, any.0, any.1, any.2, any.3, any.4, any.5, any.6, 0
2, 1, any.0, any.1, any.2, any.3, any.4, any.5, any.6, 0
3, 2, any.0, any.1, any.2, any.3, any.4, any.5, any.6, 0

#### line 28: 1, 1 ~ 3, deadA; 1 ####
# Three-neighbor survival
# these can't be moved into the Birth transitions above, because
# 'the RockScissorsPaper rules' have to override them
1, 1, 1, 1, deadA.0, deadA.1, deadA.2, deadA.3, deadA.4, 1

#### line 29: 2, 2 ~ 3, deadB; 2 ####
2, 2, 2, 2, deadB.0, deadB.1, deadB.2, deadB.3, deadB.4, 2

#### line 30: 3, 3 ~ 3, deadC; 3 ####
3, 3, 3, 3, deadC.0, deadC.1, deadC.2, deadC.3, deadC.4, 3

#### line 33: 1, 1 ~ 2, deadA; 1 ####
# Two-neighbor survival
1, 1, 1, deadA.0, deadA.1, deadA.2, deadA.3, deadA.4, deadA.5, 1

#### line 34: 2, 2 ~ 2, deadB; 2 ####
2, 2, 2, deadB.0, deadB.1, deadB.2, deadB.3, deadB.4, deadB.5, 2

#### line 35: 3, 3 ~ 2, deadC; 3 ####
3, 3, 3, deadC.0, deadC.1, deadC.2, deadC.3, deadC.4, deadC.5, 3

#### line 38: any, any; 0 ####
# Death
any.0, any.1, any.2, any.3, any.4, any.5, any.6, any.7, any.8, 0
