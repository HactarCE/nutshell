@RULE Slugs
********************************
**** COMPILED FROM NUTSHELL ****
****        v0.5.0a         ****
********************************
1: solid slug cell
2: active slug cell
3: state that appears at head of slug to move it forward

@TABLE
neighborhood: Moore
symmetries: rotate4reflect
n_states: 4

var any.0 = {0,1,2,3}
var any.1 = any.0
var any.2 = any.0
var any.3 = any.0
var any.4 = any.0
var any.5 = any.0
var _a0.0 = {0,1}
var _a0.1 = _a0.0
var _a0.2 = _a0.0
var _a0.3 = _a0.0
var _b0.0 = {0,2}
var _c0.0 = {1,2}

#### symmetries: rotate4reflect
# When active reaches the tail of a slug and forms an L-shaped clump of
# actives, kill the L's corners off such that the cell born in the middle
# of it dangles off of the slug's tail end
#### line 12: 2, SW..W 2, NW..S 0; 0 ####
2, 0, 0, 0, 0, 0, 2, 2, 0, 0
# Once that stage is reached, cause the dangling 2 to start moving
# toward the slug's front
#### line 15: 0, NW..N 1, NE 0, E 2, SE..W (0, 1); 2 ####
0, 1, 0, 2, _a0.0, _a0.1, _a0.2, _a0.3, 1, 2
#### line 15: E:0 ####
2, 0, any.0, any.1, any.2, _a0.0, _a0.1, 0, 1, 0
# The old dangling cell hasn't actually been killed yet, so do that and set
# up 2 cells within the slug to trail it as it moves toward the front
#### line 18: 2, NW..N 1, NE..W 0; 0 ####
2, 1, 0, 0, 0, 0, 0, 0, 1, 0
#### line 18: N:2 ####
1, any.0, any.1, 0, 0, 2, 0, 1, any.2, 2
# When active nears the front of the slug, create a 3-cell configuration
# that allows a new cell to be born
#### line 22: 1, S..W 0, NW..N any, NE 0, E 1, SE 2; 3 ####
1, any.0, 0, 1, 2, 0, 0, 0, any.1, 3
# Once in that head-cell configuration, birth a new cell to its front
#### line 24: 0, E 2, SE 3, S..NE 0; 1 ####
0, 0, 0, 2, 3, 0, 0, 0, 0, 1
# That new cell is on the slug's lower row avoid certain transition conflicts,
# so move it upward toward the main row of cells and reset the surrounding configuration
# (any rather than 0 to support the "shortening" two-slug reaction)
#### line 28: 1, NE 3, E 2, SE..N any; 0 ####
1, any.0, 3, 2, any.1, any.2, any.3, any.4, any.5, 0
#### line 28: N:1 ####
any.0, any.1, any.2, 3, 2, 1, any.3, any.4, any.5, 1
#### line 28: NE:2 ####
3, any.0, any.1, any.2, any.3, 2, 1, any.4, any.5, 2
# When an active cell is dangling off a row of other active cells, kill it before
# proceeding
#### line 32: 2, N 0, NE 2, E..NW 0; 0 ####
2, 0, 2, 0, 0, 0, 0, 0, 0, 0
# In addition, birth a new 1 cell between the dangler and danglee
#### line 34: 0, E 2, SE 0, S 2, SW..NE 0; 1 ####
0, 0, 0, 2, 0, 2, 0, 0, 0, 1
# ...and move the dangler toward the slug's main body to do its slug-moving thing
#### line 36: 0, N 2, NE (0, 2), E..SW any, W 2, NW 0; 2 ####
0, 2, _b0.0, any.0, any.1, any.2, any.3, 2, 0, 2
# Move an 2 cell back and forth along a slug, affecting the cells inside the slug
# as appropriate (depending on whether the 2's moving back or forth)
#### line 40: 2, NW 1, N (1, 2), NE 2, E..W 0; 0 ####
2, _c0.0, 2, 0, 0, 0, 0, 0, 1, 0
#### line 40: N[(2, 1)] ####
1, any.0, any.1, 2, 0, 2, 0, 1, any.2, 2
2, any.0, any.1, 2, 0, 2, 0, 1, any.2, 1
#### line 40: E[N: (_, 2)] ####
0, 2, any.0, any.1, any.2, 0, 0, 2, 2, 2
#### line 40: W[N: (2, _)] ####
0, 1, 1, 2, 0, 0, any.0, any.1, any.2, 2

@COLORS
1 255 255 255
2 255 0 255
3 255 0 0
