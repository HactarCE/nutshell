The reordering-and-reference-resolving algorithm employed by table._utils.expand_tr() when a transition starts on a compass direction other than north.
Below is an 8-state transition napkin starting on south that has unresolved references.

"S" 1, "SW..NW" 2, "N" [S], "NE" 0, "E" [NE], "SE" [S]

"5" 1, "6" 2, "7" 2, "8" 2, "1" [5], "2" 0, "3" [2], "4" [5]

"1" [5], "2" 0, "3" [2], "4" [5], "5" 1, "6" 2, "7" 2, "8" 2

"1" [5], "2" 0, "3" [2], "4" [5], "5" 1, "6" 2, "7" 2, "8" 2

----

("1" 1), "2" 0, "3" [2], "4" [5], "5" 1, "6" 2, "7" 2, "8" 2
  > final 'else' branch
to_replace = {'[5': '[1'}

("1" 1), "2" 0, "3" [2], "4" [5], "5" [1], "6" 2, "7" 2, "8" 2
no_replace = {'[1'}

----

"1" 1, ("2" 0), "3" [2], "4" [5], "5" [1], "6" 2, "7" 2, "8" 2
  > 'match is None' branch
no_replace = {'[1', '[2'}

----

"1" 1, "2" 0, ("3" [2]), "4" [5], "5" [1], "6" 2, "7" 2, "8" 2
  > 'cur_match in no_replace' branch
('[2' in no_replace)

----

"1" 1, "2" 0, "3" [2], ("4" [5]), "5" [1], "6" 2, "7" 2, "8" 2
  > 'cur_match in to_replace' branch
('[5' in to_replace)

"1" 1, "2" 0, "3" [2], ("4" [1]), "5" [1], "6" 2, "7" 2, "8" 2

----

"1" 1, "2" 0, "3" [2], "4" [1], ("5" [1]), "6" 2, "7" 2, "8" 2
  > 'cur_match in no_replace' branch
('[1' in no_replace)

----

"1" 1, "2" 0, "3" [2], "4" [1], "5" [1], ("6" 2), "7" 2, "8" 2
  > 'match is None' branch
no_replace = {'[1', '[2', '[6'}

---

etc for 7 & 8...
