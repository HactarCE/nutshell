# The file was automatically generated by Lark v0.6.4
# # # # # # # # # # # # # # # # #
# MODIFIED by the "Nutshell" tool's author to report additional
# parse info and to fix bugs (rule.alias = internal_callback_name,
# wrapper_chain being a consumed filter()) arising when used more
# than once in the same run.
# # # # # # # # # # # # # # # # #
#
#
#   Lark Stand-alone Generator Tool
# ----------------------------------
# Generates a stand-alone LALR(1) parser with a standard lexer
#
# Git:    https://github.com/erezsh/lark
# Author: Erez Shinan (erezshin@gmail.com)
#
#
#    >>> LICENSE
#
#    This tool and its generated code use a separate license from Lark.
#
#    It is licensed under GPLv2 or above.
#
#    If you wish to purchase a commercial license for this tool and its
#    generated code, contact me via email.
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    See <http://www.gnu.org/licenses/>.
#
#

class LarkError(Exception):
    pass

class GrammarError(LarkError):
    pass

class ParseError(LarkError):
    pass

class LexError(LarkError):
    pass

class UnexpectedInput(LarkError):
    pos_in_stream = None

    def get_context(self, text, span=40):
        pos = self.pos_in_stream
        start = max(pos - span, 0)
        end = pos + span
        before = text[start:pos].rsplit('\n', 1)[-1]
        after = text[pos:end].split('\n', 1)[0]
        return before + after + '\n' + ' ' * len(before) + '^\n'

    def match_examples(self, parse_fn, examples):
        """ Given a parser instance and a dictionary mapping some label with
            some malformed syntax examples, it'll return the label for the
            example that bests matches the current error.
        """
        assert self.state is not None, "Not supported for this exception"

        candidate = None
        for label, example in examples.items():
            assert not isinstance(example, STRING_TYPE)

            for malformed in example:
                try:
                    parse_fn(malformed)
                except UnexpectedInput as ut:
                    if ut.state == self.state:
                        try:
                            if ut.token == self.token:  # Try exact match first
                                return label
                        except AttributeError:
                            pass
                        if not candidate:
                            candidate = label

        return candidate


class UnexpectedCharacters(LexError, UnexpectedInput):
    def __init__(self, seq, lex_pos, line, column, allowed=None, considered_tokens=None, state=None):
        message = "No terminal defined for '%s' at line %d col %d" % (seq[lex_pos], line, column)

        self.line = line
        self.column = column
        self.allowed = allowed
        self.considered_tokens = considered_tokens
        self.pos_in_stream = lex_pos
        self.state = state

        message += '\n\n' + self.get_context(seq)
        if allowed:
            message += '\nExpecting: %s\n' % allowed

        super(UnexpectedCharacters, self).__init__(message)



class UnexpectedToken(ParseError, UnexpectedInput):
    def __init__(self, token, expected, considered_rules=None, state=None):
        self.token = token
        self.expected = expected     # XXX str shouldn't necessary
        self.line = getattr(token, 'line', '?')
        self.column = getattr(token, 'column', '?')
        self.considered_rules = considered_rules
        self.state = state
        self.pos_in_stream = getattr(token, 'pos_in_stream', None)

        message = ("Unexpected token %r at line %s, column %s.\n"
                   "Expected one of: \n\t* %s\n"
                   % (token, self.line, self.column, '\n\t* '.join(self.expected)))

        super(UnexpectedToken, self).__init__(message)


try:
    STRING_TYPE = basestring
except NameError:   # Python 3
    STRING_TYPE = str


import types
from functools import wraps, partial
from contextlib import contextmanager

Str = type(u'')

def smart_decorator(f, create_decorator):
    if isinstance(f, types.FunctionType):
        return wraps(f)(create_decorator(f, True))

    elif isinstance(f, (type, types.BuiltinFunctionType)):
        return wraps(f)(create_decorator(f, False))

    elif isinstance(f, types.MethodType):
        return wraps(f)(create_decorator(f.__func__, True))

    elif isinstance(f, partial):
        # wraps does not work for partials in 2.7: https://bugs.python.org/issue3445
        return create_decorator(f.__func__, True)

    else:
        return create_decorator(f.__func__.__call__, True)



class Meta:
    pass

class Tree(object):
    def __init__(self, data, children, meta=None):
        self.data = data
        self.children = children
        self._meta = meta

    @property
    def meta(self):
        if self._meta is None:
            self._meta = Meta()
        return self._meta

    def __repr__(self):
        return 'Tree(%s, %s)' % (self.data, self.children)

    def _pretty_label(self):
        return self.data

    def _pretty(self, level, indent_str):
        if len(self.children) == 1 and not isinstance(self.children[0], Tree):
            return [ indent_str*level, self._pretty_label(), '\t', '%s' % (self.children[0],), '\n']

        l = [ indent_str*level, self._pretty_label(), '\n' ]
        for n in self.children:
            if isinstance(n, Tree):
                l += n._pretty(level+1, indent_str)
            else:
                l += [ indent_str*(level+1), '%s' % (n,), '\n' ]

        return l

    def pretty(self, indent_str='  '):
        return ''.join(self._pretty(0, indent_str))
    def __eq__(self, other):
        try:
            return self.data == other.data and self.children == other.children
        except AttributeError:
            return False

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self):
        return hash((self.data, tuple(self.children)))

from inspect import getmembers, getmro

class Discard(Exception):
    pass

# Transformers

class Transformer:
    """Visits the tree recursively, starting with the leaves and finally the root (bottom-up)

    Calls its methods (provided by user via inheritance) according to tree.data
    The returned value replaces the old one in the structure.

    Can be used to implement map or reduce.
    """

    def _call_userfunc(self, tree, new_children=None):
        # Assumes tree is already transformed
        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            if getattr(f, 'meta', False):
                return f(children, tree.meta)
            elif getattr(f, 'inline', False):
                return f(*children)
            elif getattr(f, 'whole_tree', False):
                if new_children is not None:
                    raise NotImplementedError("Doesn't work with the base Transformer class")
                return f(tree)
            else:
                return f(children)

    def _transform_children(self, children):
        for c in children:
            try:
                yield self._transform_tree(c) if isinstance(c, Tree) else c
            except Discard:
                pass

    def _transform_tree(self, tree):
        children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree, children)

    def transform(self, tree):
        return self._transform_tree(tree)

    def __mul__(self, other):
        return TransformerChain(self, other)

    def __default__(self, data, children, meta):
        "Default operation on tree (for override)"
        return Tree(data, children, meta)

    @classmethod
    def _apply_decorator(cls, decorator, **kwargs):
        mro = getmro(cls)
        assert mro[0] is cls
        libmembers = {name for _cls in mro[1:] for name, _ in getmembers(_cls)}
        for name, value in getmembers(cls):
            if name.startswith('_') or name in libmembers:
                continue

            setattr(cls, name, decorator(value, **kwargs))
        return cls


class InlineTransformer(Transformer):   # XXX Deprecated
    def _call_userfunc(self, tree, new_children=None):
        # Assumes tree is already transformed
        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            return f(*children)


class TransformerChain(object):
    def __init__(self, *transformers):
        self.transformers = transformers

    def transform(self, tree):
        for t in self.transformers:
            tree = t.transform(tree)
        return tree

    def __mul__(self, other):
        return TransformerChain(*self.transformers + (other,))


class Transformer_InPlace(Transformer):
    "Non-recursive. Changes the tree in-place instead of returning new instances"
    def _transform_tree(self, tree):           # Cancel recursion
        return self._call_userfunc(tree)

    def transform(self, tree):
        for subtree in tree.iter_subtrees():
            subtree.children = list(self._transform_children(subtree.children))

        return self._transform_tree(tree)


class Transformer_InPlaceRecursive(Transformer):
    "Recursive. Changes the tree in-place instead of returning new instances"
    def _transform_tree(self, tree):
        tree.children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree)



# Visitors

class VisitorBase:
    def _call_userfunc(self, tree):
        return getattr(self, tree.data, self.__default__)(tree)

    def __default__(self, tree):
        "Default operation on tree (for override)"
        return tree


class Visitor(VisitorBase):
    """Bottom-up visitor, non-recursive

    Visits the tree, starting with the leaves and finally the root (bottom-up)
    Calls its methods (provided by user via inheritance) according to tree.data
    """


    def visit(self, tree):
        for subtree in tree.iter_subtrees():
            self._call_userfunc(subtree)
        return tree

class Visitor_Recursive(VisitorBase):
    """Bottom-up visitor, recursive

    Visits the tree, starting with the leaves and finally the root (bottom-up)
    Calls its methods (provided by user via inheritance) according to tree.data
    """

    def visit(self, tree):
        for child in tree.children:
            if isinstance(child, Tree):
                self.visit(child)

        f = getattr(self, tree.data, self.__default__)
        f(tree)
        return tree



def visit_children_decor(func):
    "See Interpreter"
    @wraps(func)
    def inner(cls, tree):
        values = cls.visit_children(tree)
        return func(cls, values)
    return inner


class Interpreter:
    """Top-down visitor, recursive

    Visits the tree, starting with the root and finally the leaves (top-down)
    Calls its methods (provided by user via inheritance) according to tree.data

    Unlike Transformer and Visitor, the Interpreter doesn't automatically visit its sub-branches.
    The user has to explicitly call visit_children, or use the @visit_children_decor
    """
    def visit(self, tree):
        return getattr(self, tree.data)(tree)

    def visit_children(self, tree):
        return [self.visit(child) if isinstance(child, Tree) else child
                for child in tree.children]

    def __getattr__(self, name):
        return self.__default__

    def __default__(self, tree):
        return self.visit_children(tree)




# Decorators

def _apply_decorator(obj, decorator, **kwargs):
    try:
        _apply = obj._apply_decorator
    except AttributeError:
        return decorator(obj, **kwargs)
    else:
        return _apply(decorator, **kwargs)



def _inline_args__func(func):
    @wraps(func)
    def create_decorator(_f, with_self):
        if with_self:
            def f(self, children):
                return _f(self, *children)
        else:
            def f(self, children):
                return _f(*children)
        return f

    return smart_decorator(func, create_decorator)


def inline_args(obj):   # XXX Deprecated
    return _apply_decorator(obj, _inline_args__func)



def _visitor_args_func_dec(func, inline=False, meta=False, whole_tree=False):
    assert [whole_tree, meta, inline].count(True) <= 1
    def create_decorator(_f, with_self):
        if with_self:
            def f(self, *args, **kwargs):
                return _f(self, *args, **kwargs)
        else:
            def f(self, *args, **kwargs):
                return _f(*args, **kwargs)
        return f

    f = smart_decorator(func, create_decorator)
    f.inline = inline
    f.meta = meta
    f.whole_tree = whole_tree
    return f

def v_args(inline=False, meta=False, tree=False):
    "A convenience decorator factory, for modifying the behavior of user-supplied visitor methods"
    if [tree, meta, inline].count(True) > 1:
        raise ValueError("Visitor functions can either accept tree, or meta, or be inlined. These cannot be combined.")
    def _visitor_args_dec(obj):
        return _apply_decorator(obj, _visitor_args_func_dec, inline=inline, meta=meta, whole_tree=tree)
    return _visitor_args_dec



class Indenter:
    def __init__(self):
        self.paren_level = 0
        self.indent_level = [0]

    def handle_NL(self, token):
        if self.paren_level > 0:
            return

        yield token

        indent_str = token.rsplit('\n', 1)[1] # Tabs and spaces
        indent = indent_str.count(' ') + indent_str.count('\t') * self.tab_len

        if indent > self.indent_level[-1]:
            self.indent_level.append(indent)
            yield Token.new_borrow_pos(self.INDENT_type, indent_str, token)
        else:
            while indent < self.indent_level[-1]:
                self.indent_level.pop()
                yield Token.new_borrow_pos(self.DEDENT_type, indent_str, token)

            assert indent == self.indent_level[-1], '%s != %s' % (indent, self.indent_level[-1])

    def process(self, stream):
        for token in stream:
            if token.type == self.NL_type:
                for t in self.handle_NL(token):
                    yield t
            else:
                yield token

            if token.type in self.OPEN_PAREN_types:
                self.paren_level += 1
            elif token.type in self.CLOSE_PAREN_types:
                self.paren_level -= 1
                assert self.paren_level >= 0

        while len(self.indent_level) > 1:
            self.indent_level.pop()
            yield Token(self.DEDENT_type, '')

        assert self.indent_level == [0], self.indent_level

    # XXX Hack for ContextualLexer. Maybe there's a more elegant solution?
    @property
    def always_accept(self):
        return (self.NL_type,)


class Token(Str):
    __slots__ = ('type', 'pos_in_stream', 'value', 'line', 'column', 'end_line', 'end_column')

    def __new__(cls, type_, value, pos_in_stream=None, line=None, column=None, *, tbl=None):
        self = super(Token, cls).__new__(cls, value)
        if tbl is not None and type_ == 'STATE' and int(value) >= tbl.n_states:
            tbl.n_states = 1 + int(value)
        self.type = type_
        self.pos_in_stream = pos_in_stream
        self.value = value
        self.line = line
        self.column = column
        self.end_line = None
        self.end_column = None
        return self

    @classmethod
    def new_borrow_pos(cls, type_, value, borrow_t):
        return cls(type_, value, borrow_t.pos_in_stream, line=borrow_t.line, column=borrow_t.column)

    def __reduce__(self):
        return (self.__class__, (self.type, self.value, self.pos_in_stream, self.line, self.column, ))

    def __repr__(self):
        return 'Token(%s, %r)' % (self.type, self.value)

    def __deepcopy__(self, memo):
        return Token(self.type, self.value, self.pos_in_stream, self.line, self.column)

    def __eq__(self, other):
        if isinstance(other, Token) and self.type != other.type:
            return False

        return Str.__eq__(self, other)

    __hash__ = Str.__hash__


class LineCounter:
    def __init__(self):
        self.newline_char = '\n'
        self.char_pos = 0
        self.line = 1
        self.column = 1
        self.line_start_pos = 0

    def feed(self, token, test_newline=True):
        """Consume a token and calculate the new line & column.

        As an optional optimization, set test_newline=False is token doesn't contain a newline.
        """
        if test_newline:
            newlines = token.count(self.newline_char)
            if newlines:
                self.line += newlines
                self.line_start_pos = self.char_pos + token.rindex(self.newline_char) + 1

        self.char_pos += len(token)
        self.column = self.char_pos - self.line_start_pos + 1

class _Lex:
    "Built to serve both Lexer and ContextualLexer"
    def __init__(self, lexer, state=None):
        self.lexer = lexer
        self.state = state

    def lex(self, stream, newline_types, ignore_types, tbl):
        newline_types = frozenset(newline_types)
        ignore_types = frozenset(ignore_types)
        line_ctr = LineCounter()

        while line_ctr.char_pos < len(stream):
            lexer = self.lexer
            for mre, type_from_index in lexer.mres:
                m = mre.match(stream, line_ctr.char_pos)
                if not m:
                    continue

                t = None
                value = m.group(0)
                type_ = type_from_index[m.lastindex]
                if type_ not in ignore_types:
                    t = Token(type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column, tbl=tbl)
                    if t.type in lexer.callback:
                        t = lexer.callback[t.type](t)
                    yield t
                else:
                    if type_ in lexer.callback:
                        t = Token(type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column, tbl=tbl)
                        lexer.callback[type_](t)

                line_ctr.feed(value, type_ in newline_types)
                if t:
                    t.end_line = line_ctr.line
                    t.end_column = line_ctr.column

                break
            else:
                raise UnexpectedCharacters(stream, line_ctr.char_pos, line_ctr.line, line_ctr.column, state=self.state)


class UnlessCallback:
    def __init__(self, mres):
        self.mres = mres

    def __call__(self, t):
        for mre, type_from_index in self.mres:
            m = mre.match(t.value)
            if m:
                t.type = type_from_index[m.lastindex]
                break
        return t


from functools import partial, wraps


class ExpandSingleChild:
    def __init__(self, node_builder):
        self.node_builder = node_builder

    def __call__(self, children):
        if len(children) == 1:
            return children[0]
        else:
            return self.node_builder(children)


class PropagatePositions:
    def __init__(self, node_builder):
        self.node_builder = node_builder

    def __call__(self, children):
        res = self.node_builder(children)

        if isinstance(res, Tree):
            res.meta.empty = True

            for c in children:
                if isinstance(c, Tree) and c.children and not c.meta.empty:
                    res.meta.line = c.meta.line
                    res.meta.column = c.meta.column
                    res.meta.start_pos = c.meta.start_pos
                    res.meta.empty = False
                    break
                elif isinstance(c, Token):
                    res.meta.line = c.line
                    res.meta.column = c.column
                    res.meta.start_pos = c.pos_in_stream
                    res.meta.empty = False
                    break

            for c in reversed(children):
                if isinstance(c, Tree) and c.children and not c.meta.empty:
                    res.meta.end_line = c.meta.end_line
                    res.meta.end_column = c.meta.end_column
                    res.meta.end_pos = c.meta.end_pos
                    res.meta.empty = False
                    break
                elif isinstance(c, Token):
                    res.meta.end_line = c.end_line
                    res.meta.end_column = c.end_column
                    res.meta.end_pos = c.pos_in_stream + len(c.value)
                    res.meta.empty = False
                    break

        return res


class ChildFilter:
    def __init__(self, to_include, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include

    def __call__(self, children):
        filtered = []
        for i, to_expand in self.to_include:
            if to_expand:
                filtered += children[i].children
            else:
                filtered.append(children[i])

        return self.node_builder(filtered)

class ChildFilterLALR(ChildFilter):
    "Optimized childfilter for LALR (assumes no duplication in parse tree, so it's safe to change it)"

    def __call__(self, children):
        filtered = []
        for i, to_expand in self.to_include:
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:   # Optimize for left-recursion
                    filtered = children[i].children
            else:
                filtered.append(children[i])

        return self.node_builder(filtered)

def _should_expand(sym):
    return not sym.is_term and sym.name.startswith('_')

def maybe_create_child_filter(expansion, keep_all_tokens, ambiguous):
    to_include = [(i, _should_expand(sym)) for i, sym in enumerate(expansion)
                  if keep_all_tokens or not (sym.is_term and sym.filter_out)]

    if len(to_include) < len(expansion) or any(to_expand for i, to_expand in to_include):
        return partial(ChildFilter if ambiguous else ChildFilterLALR, to_include)


class Callback(object):
    pass


def ptb_inline_args(func):
    @wraps(func)
    def f(children):
        return func(*children)
    return f



class ParseTreeBuilder:
    def __init__(self, rules, tree_class, propagate_positions=True, keep_all_tokens=False, ambiguous=False):
        self.tree_class = tree_class
        self.propagate_positions = propagate_positions
        self.always_keep_all_tokens = keep_all_tokens
        self.ambiguous = ambiguous

        self.rule_builders = list(self._init_builders(rules))

        self.user_aliases = {}

    def _init_builders(self, rules):
        for rule in rules:
            options = rule.options
            keep_all_tokens = self.always_keep_all_tokens or (options.keep_all_tokens if options else False)
            expand_single_child = options.expand1 if options else False

            wrapper_chain = list(filter(None, [
                (expand_single_child and not rule.alias) and ExpandSingleChild,
                maybe_create_child_filter(rule.expansion, keep_all_tokens, self.ambiguous),
                self.propagate_positions and PropagatePositions,
            ]))

            yield rule, wrapper_chain


    def create_callback(self, transformer=None):
        callback = Callback()

        i = 0
        for rule, wrapper_chain in self.rule_builders:
            internal_callback_name = '_cb%d_%s' % (i, rule.origin)
            i += 1

            user_callback_name = rule.alias or rule.origin.name
            try:
                f = getattr(transformer, user_callback_name)
                assert not getattr(f, 'meta', False), "Meta args not supported for internal transformer"
                # XXX InlineTransformer is deprecated!
                if getattr(f, 'inline', False) or isinstance(transformer, InlineTransformer):
                    f = ptb_inline_args(f)
            except AttributeError:
                f = partial(self.tree_class, user_callback_name)

            self.user_aliases[rule] = rule.alias
            rule.cb_name = internal_callback_name

            for w in wrapper_chain:
                f = w(f)

            if hasattr(callback, internal_callback_name):
                raise GrammarError("Rule '%s' already exists" % (rule,))
            setattr(callback, internal_callback_name, f)

        return callback



class _Parser:
    def __init__(self, parse_table, callbacks):
        self.states = parse_table.states
        self.start_state = parse_table.start_state
        self.end_state = parse_table.end_state
        self.callbacks = callbacks

    def parse(self, seq, set_state=None):
        token = None
        stream = iter(seq)
        states = self.states

        state_stack = [self.start_state]
        value_stack = []

        if set_state: set_state(self.start_state)

        def get_action(token):
            state = state_stack[-1]
            try:
                return states[state][token.type]
            except KeyError:
                expected = [s for s in states[state].keys() if s.isupper()]
                raise UnexpectedToken(token, expected, state=state)

        def reduce(rule):
            size = len(rule.expansion)
            if size:
                s = value_stack[-size:]
                del state_stack[-size:]
                del value_stack[-size:]
            else:
                s = []

            value = self.callbacks[rule](s)

            _action, new_state = states[state_stack[-1]][rule.origin.name]
            assert _action is Shift
            state_stack.append(new_state)
            value_stack.append(value)

        # Main LALR-parser loop
        for token in stream:
            while True:
                action, arg = get_action(token)
                assert arg != self.end_state

                if action is Shift:
                    state_stack.append(arg)
                    value_stack.append(token)
                    if set_state: set_state(arg)
                    break # next token
                else:
                    reduce(arg)

        token = Token.new_borrow_pos('$END', '', token) if token else Token('$END', '', 0, 1, 1)
        while True:
            _action, arg = get_action(token)
            if _action is Shift:
                assert arg == self.end_state
                val ,= value_stack
                return val
            else:
                reduce(arg)


class Symbol(object):
    is_term = NotImplemented

    def __init__(self, name):
        self.name = name

    def __eq__(self, other):
        assert isinstance(other, Symbol), other
        return self.is_term == other.is_term and self.name == other.name

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self):
        return hash(self.name)

    def __repr__(self):
        return '%s(%r)' % (type(self).__name__, self.name)

    fullrepr = property(__repr__)

class Terminal(Symbol):
    is_term = True

    def __init__(self, name, filter_out=False):
        self.name = name
        self.filter_out = filter_out

    @property
    def fullrepr(self):
        return '%s(%r, %r)' % (type(self).__name__, self.name, self.filter_out)


class NonTerminal(Symbol):
    is_term = False

class Rule(object):
    """
        origin : a symbol
        expansion : a list of symbols
    """
    def __init__(self, origin, expansion, alias=None, options=None):
        self.origin = origin
        self.expansion = expansion
        self.alias = alias
        self.cb_name = None
        self.options = options

    def __str__(self):
        return '<%s : %s>' % (self.origin, ' '.join(map(str,self.expansion)))

    def __repr__(self):
        return 'Rule(%r, %r, %r, %r)' % (self.origin, self.expansion, self.alias, self.options)


class RuleOptions:
    def __init__(self, keep_all_tokens=False, expand1=False, priority=None):
        self.keep_all_tokens = keep_all_tokens
        self.expand1 = expand1
        self.priority = priority

    def __repr__(self):
        return 'RuleOptions(%r, %r, %r)' % (
            self.keep_all_tokens,
            self.expand1,
            self.priority,
        )

Shift = 0
Reduce = 1
import re
class LexerRegexps: pass
NEWLINE_TYPES = ['_NL', 'NEWLINE', '__ANON_1']
IGNORE_TYPES = []
LEXERS = {}
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: '__ANON_15',
   5: '_NEGATE_ALL',
   6: '_VAR_OPEN',
   7: 'BANG',
   8: 'LSQB',
   9: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[0] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_14',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_15',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[1] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: '__ANON_15',
   5: '_NEGATE_ALL',
   6: '_VAR_OPEN',
   7: 'BANG',
   8: 'LSQB',
   9: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[2] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_14',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_15',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[3] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COLON>\\:)|(?P<COMMA>\\,)|(?P<EQUAL>\\=)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_14',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_15',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COLON',
   21: 'COMMA',
   22: 'EQUAL',
   23: 'LSQB',
   24: 'RSQB',
   25: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[4] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<__ANON_2>\\.\\.)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<PLUS>\\+)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_14',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_15',
   16: '_NEGATE_ALL',
   17: '__ANON_2',
   18: '_VAR_CLOSE',
   19: '_VAR_OPEN',
   20: 'BANG',
   21: 'COMMA',
   22: 'LSQB',
   23: 'PLUS',
   24: 'RSQB',
   25: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[5] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: '__ANON_15',
   4: '_NEGATE_ALL',
   5: '_VAR_OPEN',
   6: 'BANG',
   7: 'LSQB',
   8: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[6] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: '_NL',
   4: 'STATE',
   5: '__ANON_15',
   6: '_NEGATE_ALL',
   7: '_VAR_OPEN',
   8: 'BANG',
   9: 'LSQB',
   10: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[7] = (lexer_regexps)
MRES = (
[('(?P<COMPASS_DIR>NE|SE|SW|NW|N|E|S|W|FG|BG)|(?P<__ANON_10>7)|(?P<__ANON_11>8)|(?P<__ANON_12>9)|(?P<__ANON_3>0)|(?P<__ANON_4>1)|(?P<__ANON_5>2)|(?P<__ANON_6>3)|(?P<__ANON_7>4)|(?P<__ANON_8>5)|(?P<__ANON_9>6)',
  {1: 'COMPASS_DIR',
   2: '__ANON_10',
   3: '__ANON_11',
   4: '__ANON_12',
   5: '__ANON_3',
   6: '__ANON_4',
   7: '__ANON_5',
   8: '__ANON_6',
   9: '__ANON_7',
   10: '__ANON_8',
   11: '__ANON_9'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[8] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_14>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_14',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_15',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[9] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: '_NEGATE_ALL',
   4: '_VAR_OPEN',
   5: 'LSQB',
   6: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[10] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<__ANON_14>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '__ANON_14',
   3: '_WS',
   4: '_NL',
   5: 'STATE',
   6: '__ANON_15',
   7: '_NEGATE_ALL',
   8: '_VAR_OPEN',
   9: 'BANG',
   10: 'LSQB',
   11: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[11] = (lexer_regexps)
MRES = (
[]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[12] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_14>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_14',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_15',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[13] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: '_NL',
   4: 'STATE',
   5: '__ANON_15',
   6: '_NEGATE_ALL',
   7: '_VAR_OPEN',
   8: 'BANG',
   9: 'LSQB',
   10: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[14] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_14',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_15',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[15] = (lexer_regexps)
MRES = (
[('(?P<COMMA>\\,)|(?P<SEMICOLON>\\;)', {1: 'COMMA', 2: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[16] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: '_NEGATE_ALL',
   4: '_VAR_OPEN',
   5: 'LSQB',
   6: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[17] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_14',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_15',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[18] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: '_NEGATE_ALL',
   4: '_VAR_OPEN',
   5: 'LSQB',
   6: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[19] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME', 2: 'STATE', 3: '_NEGATE_ALL', 4: '_VAR_OPEN', 5: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[20] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_14',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_15',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[21] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<INT>[0123456789]+)|(?P<STATE>\\d+)|(?P<_VAR_OPEN>[({])',
  {1: 'NAME', 2: 'INT', 3: 'STATE', 4: '_VAR_OPEN'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[22] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: '_NL',
   4: 'STATE',
   5: '__ANON_15',
   6: '_NEGATE_ALL',
   7: '_VAR_OPEN',
   8: 'BANG',
   9: 'LSQB',
   10: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[23] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<__ANON_14>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '__ANON_14',
   3: '_WS',
   4: '_NL',
   5: 'STATE',
   6: '__ANON_15',
   7: '_NEGATE_ALL',
   8: '_VAR_OPEN',
   9: 'BANG',
   10: 'LSQB',
   11: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[24] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: '__ANON_15',
   4: '_NEGATE_ALL',
   5: '_VAR_OPEN',
   6: 'BANG',
   7: 'LSQB',
   8: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[25] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<_VAR_OPEN>[({])|(?P<LEAVE_ALONE>_)|(?P<LSQB>\\[)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: '_VAR_OPEN',
   5: 'LEAVE_ALONE',
   6: 'LSQB'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[26] = (lexer_regexps)
MRES = (
[('(?P<INT>[0123456789]+)', {1: 'INT'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[27] = (lexer_regexps)
MRES = (
[('(?P<INT>[0123456789]+)', {1: 'INT'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[28] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_VAR_OPEN>[({])|(?P<LEAVE_ALONE>_)|(?P<LSQB>\\[)',
  {1: 'NAME', 2: 'STATE', 3: '_VAR_OPEN', 4: 'LEAVE_ALONE', 5: 'LSQB'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[29] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)',
  {1: 'NAME', 2: 'STATE', 3: '_VAR_OPEN', 4: 'LSQB'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[30] = (lexer_regexps)
MRES = (
[('(?P<INT>[0123456789]+)', {1: 'INT'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[31] = (lexer_regexps)
MRES = (
[('(?P<EQUAL>\\=)', {1: 'EQUAL'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[32] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: '_NEGATE_ALL',
   5: '_VAR_OPEN',
   6: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[33] = (lexer_regexps)
MRES = (
[('(?P<_WS>(?:(?:\\ |\t))+)|(?P<__ANON_0>.+)', {1: '_WS', 2: '__ANON_0'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[34] = (lexer_regexps)
MRES = (
[('(?P<__ANON_2>\\.\\.)|(?P<PLUS>\\+)', {1: '__ANON_2', 2: 'PLUS'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[35] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<INT>[0123456789]+)|(?P<STATE>\\d+)|(?P<_VAR_OPEN>[({])',
  {1: 'NAME', 2: 'INT', 3: 'STATE', 4: '_VAR_OPEN'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[36] = (lexer_regexps)
MRES = (
[('(?P<INT>[0123456789]+)|(?P<_WS>(?:(?:\\ |\t))+)', {1: 'INT', 2: '_WS'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[37] = (lexer_regexps)
MRES = (
[('(?P<_WS>(?:(?:\\ |\t))+)|(?P<STATE>\\d+)', {1: '_WS', 2: 'STATE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[38] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<__ANON_14>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '__ANON_14',
   3: '_WS',
   4: '_NL',
   5: 'STATE',
   6: '__ANON_15',
   7: '_NEGATE_ALL',
   8: '_VAR_OPEN',
   9: 'BANG',
   10: 'LSQB',
   11: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[39] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: '_NL',
   4: 'STATE',
   5: '__ANON_15',
   6: '_NEGATE_ALL',
   7: '_VAR_OPEN',
   8: 'BANG',
   9: 'LSQB',
   10: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[40] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: '__ANON_15',
   5: '_NEGATE_ALL',
   6: '_VAR_OPEN',
   7: 'BANG',
   8: 'LSQB',
   9: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[41] = (lexer_regexps)
MRES = (
[('(?P<COLON>\\:)|(?P<RSQB>\\])', {1: 'COLON', 2: 'RSQB'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[42] = (lexer_regexps)
MRES = (
[('(?P<COLON>\\:)|(?P<RSQB>\\])', {1: 'COLON', 2: 'RSQB'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[43] = (lexer_regexps)
MRES = (
[('(?P<COLON>\\:)|(?P<RSQB>\\])', {1: 'COLON', 2: 'RSQB'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[44] = (lexer_regexps)
MRES = (
[('(?P<COLON>\\:)|(?P<RSQB>\\])', {1: 'COLON', 2: 'RSQB'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[45] = (lexer_regexps)
MRES = (
[('(?P<COLON>\\:)|(?P<RSQB>\\])', {1: 'COLON', 2: 'RSQB'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[46] = (lexer_regexps)
MRES = (
[('(?P<COLON>\\:)|(?P<RSQB>\\])', {1: 'COLON', 2: 'RSQB'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[47] = (lexer_regexps)
MRES = (
[('(?P<COLON>\\:)|(?P<RSQB>\\])', {1: 'COLON', 2: 'RSQB'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[48] = (lexer_regexps)
MRES = (
[('(?P<COLON>\\:)|(?P<RSQB>\\])', {1: 'COLON', 2: 'RSQB'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[49] = (lexer_regexps)
MRES = (
[('(?P<COLON>\\:)|(?P<RSQB>\\])', {1: 'COLON', 2: 'RSQB'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[50] = (lexer_regexps)
MRES = (
[('(?P<COLON>\\:)|(?P<RSQB>\\])', {1: 'COLON', 2: 'RSQB'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[51] = (lexer_regexps)
MRES = (
[('(?P<COLON>\\:)|(?P<RSQB>\\])', {1: 'COLON', 2: 'RSQB'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[52] = (lexer_regexps)
MRES = (
[('(?P<COLON>\\:)|(?P<RSQB>\\])', {1: 'COLON', 2: 'RSQB'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[53] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<__ANON_14>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '__ANON_14',
   3: '_WS',
   4: '_NL',
   5: 'STATE',
   6: '__ANON_15',
   7: '_NEGATE_ALL',
   8: '_VAR_OPEN',
   9: 'BANG',
   10: 'LSQB',
   11: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[54] = (lexer_regexps)
MRES = (
[('(?P<SYMMETRY_NAME>(?<![\\w\\.])(?!(?:[NS][EW]?|[EW])(?![\\w\\.]))[\\w\\.]+)|(?P<COMPASS_DIR>NE|SE|SW|NW|N|E|S|W|FG|BG)',
  {1: 'SYMMETRY_NAME', 2: 'COMPASS_DIR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[55] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_14>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '__ANON_14',
   4: '_WS',
   5: '_NL',
   6: 'STATE',
   7: '__ANON_15',
   8: '_NEGATE_ALL',
   9: '_VAR_OPEN',
   10: 'BANG',
   11: 'LSQB',
   12: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[56] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_14>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_NORMAL_ARROW',
   3: '__ANON_14',
   4: '_WS',
   5: '_NL',
   6: 'STATE',
   7: '__ANON_15',
   8: '_NEGATE_ALL',
   9: '_VAR_OPEN',
   10: 'BANG',
   11: 'LSQB',
   12: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[57] = (lexer_regexps)
MRES = (
[('(?P<SYMMETRY_NAME>(?<![\\w\\.])(?!(?:[NS][EW]?|[EW])(?![\\w\\.]))[\\w\\.]+)|(?P<COMPASS_DIR>NE|SE|SW|NW|N|E|S|W|FG|BG)',
  {1: 'SYMMETRY_NAME', 2: 'COMPASS_DIR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[58] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_14',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_15',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[59] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_14',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_15',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[60] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: '_NL',
   4: 'STATE',
   5: '__ANON_15',
   6: '_NEGATE_ALL',
   7: '_VAR_OPEN',
   8: 'BANG',
   9: 'LSQB',
   10: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[61] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: '_NL',
   4: 'STATE',
   5: '__ANON_15',
   6: '_NEGATE_ALL',
   7: '_VAR_OPEN',
   8: 'BANG',
   9: 'LSQB',
   10: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[62] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: '__ANON_15',
   5: '_NEGATE_ALL',
   6: '_VAR_OPEN',
   7: 'BANG',
   8: 'LSQB',
   9: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[63] = (lexer_regexps)
MRES = (
[]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[64] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<__ANON_14>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '__ANON_14',
   3: '_WS',
   4: '_NL',
   5: 'STATE',
   6: '__ANON_15',
   7: '_NEGATE_ALL',
   8: '_VAR_OPEN',
   9: 'BANG',
   10: 'LSQB',
   11: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[65] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HENSEL_OPEN>(?:(?:(?:\\ '
  '|\t))+)?\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<STATE>\\d+)|(?P<COMPASS_DIR>NE|SE|SW|NW|N|E|S|W|FG|BG)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HENSEL_OPEN',
   3: 'STATE',
   4: 'COMPASS_DIR',
   5: '_NEGATE_ALL',
   6: '_VAR_OPEN',
   7: 'LSQB',
   8: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[66] = (lexer_regexps)
MRES = (
[('(?P<COMMA>\\,)|(?P<SEMICOLON>\\;)', {1: 'COMMA', 2: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[67] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HENSEL_OPEN>(?:(?:(?:\\ '
  '|\t))+)?\\<(?:(?:(?:\\ |\t))+)?)|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<STATE>\\d+)|(?P<COMPASS_DIR>NE|SE|SW|NW|N|E|S|W|FG|BG)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HENSEL_OPEN',
   3: '_WS',
   4: 'STATE',
   5: 'COMPASS_DIR',
   6: '_NEGATE_ALL',
   7: '_VAR_OPEN',
   8: 'LSQB',
   9: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[68] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HENSEL_OPEN>(?:(?:(?:\\ '
  '|\t))+)?\\<(?:(?:(?:\\ |\t))+)?)|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<STATE>\\d+)|(?P<COMPASS_DIR>NE|SE|SW|NW|N|E|S|W|FG|BG)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HENSEL_OPEN',
   3: '_WS',
   4: 'STATE',
   5: 'COMPASS_DIR',
   6: '_NEGATE_ALL',
   7: '_VAR_OPEN',
   8: 'LSQB',
   9: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[69] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_14',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_15',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[70] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)', {1: '_VAR_CLOSE', 2: 'COMMA'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[71] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_14',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_15',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[72] = (lexer_regexps)
MRES = (
[('(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t))+)?)|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<__ANON_2>\\.\\.)|(?P<PLUS>\\+)',
  {1: '_MULT', 2: '_WS', 3: '__ANON_2', 4: 'PLUS'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[73] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_LROT>(?:(?:(?:\\ '
  '|\t))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t'
  '))+)?\\*(?:(?:(?:\\ |\t))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ '
  '|\t))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)',
  {1: 'NAME',
   2: '_LROT',
   3: '_RROT',
   4: '_MULT',
   5: '_SUBT',
   6: '__ANON_14',
   7: '_WS',
   8: '_NL',
   9: 'STATE',
   10: '__ANON_15',
   11: '_NEGATE_ALL',
   12: '_VAR_OPEN',
   13: 'BANG',
   14: 'LSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[74] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME', 2: 'STATE', 3: '_NEGATE_ALL', 4: '_VAR_OPEN', 5: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[75] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME', 2: 'STATE', 3: '_NEGATE_ALL', 4: '_VAR_OPEN', 5: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[76] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME', 2: 'STATE', 3: '_NEGATE_ALL', 4: '_VAR_OPEN', 5: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[77] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_LROT>(?:(?:(?:\\ '
  '|\t))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t'
  '))+)?\\*(?:(?:(?:\\ |\t))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ '
  '|\t))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)',
  {1: 'NAME',
   2: '_LROT',
   3: '_RROT',
   4: '_MULT',
   5: '_SUBT',
   6: '__ANON_14',
   7: '_WS',
   8: '_NL',
   9: 'STATE',
   10: '__ANON_15',
   11: '_NEGATE_ALL',
   12: '_VAR_CLOSE',
   13: '_VAR_OPEN',
   14: 'BANG',
   15: 'COMMA',
   16: 'LSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[78] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_LROT>(?:(?:(?:\\ '
  '|\t))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t'
  '))+)?\\*(?:(?:(?:\\ |\t))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ '
  '|\t))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)',
  {1: 'NAME',
   2: '_LROT',
   3: '_RROT',
   4: '_MULT',
   5: '_SUBT',
   6: '__ANON_14',
   7: '_WS',
   8: '_NL',
   9: 'STATE',
   10: '__ANON_15',
   11: '_NEGATE_ALL',
   12: '_VAR_CLOSE',
   13: '_VAR_OPEN',
   14: 'BANG',
   15: 'COMMA',
   16: 'LSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[79] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_LROT>(?:(?:(?:\\ '
  '|\t))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t'
  '))+)?\\*(?:(?:(?:\\ |\t))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ '
  '|\t))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)',
  {1: 'NAME',
   2: '_LROT',
   3: '_RROT',
   4: '_MULT',
   5: '_SUBT',
   6: '__ANON_14',
   7: '_WS',
   8: '_NL',
   9: 'STATE',
   10: '__ANON_15',
   11: '_NEGATE_ALL',
   12: '_VAR_CLOSE',
   13: '_VAR_OPEN',
   14: 'BANG',
   15: 'COMMA',
   16: 'LSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[80] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_LROT>(?:(?:(?:\\ '
  '|\t))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t'
  '))+)?\\*(?:(?:(?:\\ |\t))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ '
  '|\t))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)',
  {1: 'NAME',
   2: '_LROT',
   3: '_RROT',
   4: '_MULT',
   5: '_SUBT',
   6: '__ANON_14',
   7: '_WS',
   8: '_NL',
   9: 'STATE',
   10: '__ANON_15',
   11: '_NEGATE_ALL',
   12: '_VAR_CLOSE',
   13: '_VAR_OPEN',
   14: 'BANG',
   15: 'COMMA',
   16: 'LSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[81] = (lexer_regexps)
MRES = (
[('(?P<_WS>(?:(?:\\ |\t))+)|(?P<__ANON_2>\\.\\.)|(?P<PLUS>\\+)',
  {1: '_WS', 2: '__ANON_2', 3: 'PLUS'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[82] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_14',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_15',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[83] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_14',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_15',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[84] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_14',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_15',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[85] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_14',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_15',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[86] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_14',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_15',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[87] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: '__ANON_15',
   5: '_NEGATE_ALL',
   6: '_VAR_OPEN',
   7: 'BANG',
   8: 'LSQB',
   9: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[88] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: '_NL',
   4: 'STATE',
   5: '__ANON_15',
   6: '_NEGATE_ALL',
   7: '_VAR_OPEN',
   8: 'BANG',
   9: 'LSQB',
   10: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[89] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: '__ANON_15',
   5: '_NEGATE_ALL',
   6: '_VAR_OPEN',
   7: 'BANG',
   8: 'LSQB',
   9: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[90] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<__ANON_14>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '__ANON_14',
   3: '_WS',
   4: '_NL',
   5: 'STATE',
   6: '__ANON_15',
   7: '_NEGATE_ALL',
   8: '_VAR_OPEN',
   9: 'BANG',
   10: 'LSQB',
   11: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[91] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: '_NL',
   4: 'STATE',
   5: '__ANON_15',
   6: '_NEGATE_ALL',
   7: '_VAR_OPEN',
   8: 'BANG',
   9: 'LSQB',
   10: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[92] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_VAR_OPEN>[({])|(?P<LEAVE_ALONE>_)|(?P<LSQB>\\[)',
  {1: 'NAME', 2: 'STATE', 3: '_VAR_OPEN', 4: 'LEAVE_ALONE', 5: 'LSQB'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[93] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_14',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_15',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[94] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_14',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_15',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[95] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<__ANON_2>\\.\\.)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<PLUS>\\+)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_14',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_15',
   16: '_NEGATE_ALL',
   17: '__ANON_2',
   18: '_VAR_CLOSE',
   19: '_VAR_OPEN',
   20: 'BANG',
   21: 'COMMA',
   22: 'LSQB',
   23: 'PLUS',
   24: 'RSQB',
   25: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[96] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_14',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_15',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[97] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_14',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_15',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[98] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_14',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_15',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[99] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_14',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_15',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[100] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: '_NEGATE_ALL',
   5: '_VAR_OPEN',
   6: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[101] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_LROT>(?:(?:(?:\\ '
  '|\t))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t'
  '))+)?\\*(?:(?:(?:\\ |\t))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ '
  '|\t))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<__ANON_2>\\.\\.)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<PLUS>\\+)',
  {1: 'NAME',
   2: '_LROT',
   3: '_RROT',
   4: '_MULT',
   5: '_SUBT',
   6: '__ANON_14',
   7: '_WS',
   8: '_NL',
   9: 'STATE',
   10: '__ANON_15',
   11: '_NEGATE_ALL',
   12: '__ANON_2',
   13: '_VAR_CLOSE',
   14: '_VAR_OPEN',
   15: 'BANG',
   16: 'COMMA',
   17: 'LSQB',
   18: 'PLUS'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[102] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_LROT>(?:(?:(?:\\ '
  '|\t))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t'
  '))+)?\\*(?:(?:(?:\\ |\t))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ '
  '|\t))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)',
  {1: 'NAME',
   2: '_LROT',
   3: '_RROT',
   4: '_MULT',
   5: '_SUBT',
   6: '__ANON_14',
   7: '_WS',
   8: '_NL',
   9: 'STATE',
   10: '__ANON_15',
   11: '_NEGATE_ALL',
   12: '_VAR_CLOSE',
   13: '_VAR_OPEN',
   14: 'BANG',
   15: 'COMMA',
   16: 'LSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[103] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME', 2: 'STATE', 3: '_NEGATE_ALL', 4: '_VAR_OPEN', 5: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[104] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<__ANON_14>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '__ANON_14',
   3: '_WS',
   4: '_NL',
   5: 'STATE',
   6: '__ANON_15',
   7: '_NEGATE_ALL',
   8: '_VAR_OPEN',
   9: 'BANG',
   10: 'LSQB',
   11: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[105] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<__ANON_14>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '__ANON_14',
   3: '_WS',
   4: '_NL',
   5: 'STATE',
   6: '__ANON_15',
   7: '_NEGATE_ALL',
   8: '_VAR_OPEN',
   9: 'BANG',
   10: 'LSQB',
   11: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[106] = (lexer_regexps)
MRES = (
[('(?P<__ANON_0>.+)', {1: '__ANON_0'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[107] = (lexer_regexps)
MRES = (
[('(?P<INT>[0123456789]+)|(?P<_WS>(?:(?:\\ |\t))+)', {1: 'INT', 2: '_WS'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[108] = (lexer_regexps)
MRES = (
[('(?P<_WS>(?:(?:\\ |\t))+)|(?P<STATE>\\d+)', {1: '_WS', 2: 'STATE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[109] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_14',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_15',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[110] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_14',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_15',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[111] = (lexer_regexps)
MRES = (
[('(?P<_WS>(?:(?:\\ |\t))+)|(?P<__ANON_2>\\.\\.)', {1: '_WS', 2: '__ANON_2'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[112] = (lexer_regexps)
MRES = (
[('(?P<INT>[0123456789]+)', {1: 'INT'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[113] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_14',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_15',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[114] = (lexer_regexps)
MRES = (
[('(?P<STATE>\\d+)', {1: 'STATE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[115] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: '__ANON_15',
   5: '_NEGATE_ALL',
   6: '_VAR_OPEN',
   7: 'BANG',
   8: 'LSQB',
   9: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[116] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: '_NL',
   4: 'STATE',
   5: '__ANON_15',
   6: '_NEGATE_ALL',
   7: '_VAR_OPEN',
   8: 'BANG',
   9: 'LSQB',
   10: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[117] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: '__ANON_15',
   5: '_NEGATE_ALL',
   6: '_VAR_OPEN',
   7: 'BANG',
   8: 'LSQB',
   9: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[118] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: '_NEGATE_ALL',
   5: '_VAR_OPEN',
   6: 'LSQB',
   7: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[119] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_14',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_15',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[120] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: '_NEGATE_ALL',
   5: '_VAR_OPEN',
   6: 'LSQB',
   7: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[121] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_14',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_15',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[122] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_14>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_NORMAL_ARROW',
   3: '__ANON_14',
   4: '_WS',
   5: '_NL',
   6: 'STATE',
   7: '__ANON_15',
   8: '_NEGATE_ALL',
   9: '_VAR_OPEN',
   10: 'BANG',
   11: 'LSQB',
   12: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[123] = (lexer_regexps)
MRES = (
[('(?P<COLON>\\:)|(?P<LSQB>\\[)', {1: 'COLON', 2: 'LSQB'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[124] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_14>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_14',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_15',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[125] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_14>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_14',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_15',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[126] = (lexer_regexps)
MRES = (
[('(?P<COLON>\\:)|(?P<LSQB>\\[)|(?P<PLUS>\\+)',
  {1: 'COLON', 2: 'LSQB', 3: 'PLUS'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[127] = (lexer_regexps)
MRES = (
[('(?P<BANG>\\!)|(?P<LPAR>\\()', {1: 'BANG', 2: 'LPAR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[128] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<__ANON_14>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '__ANON_14',
   3: '_WS',
   4: '_NL',
   5: 'STATE',
   6: '__ANON_15',
   7: '_NEGATE_ALL',
   8: '_VAR_OPEN',
   9: 'BANG',
   10: 'LSQB',
   11: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[129] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<__ANON_14>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '__ANON_14',
   3: '_WS',
   4: '_NL',
   5: 'STATE',
   6: '__ANON_15',
   7: '_NEGATE_ALL',
   8: '_VAR_OPEN',
   9: 'BANG',
   10: 'LSQB',
   11: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[130] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_14>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '__ANON_14',
   4: '_WS',
   5: '_NL',
   6: 'STATE',
   7: '__ANON_15',
   8: '_NEGATE_ALL',
   9: '_VAR_OPEN',
   10: 'BANG',
   11: 'LSQB',
   12: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[131] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: '__ANON_15',
   5: '_NEGATE_ALL',
   6: '_VAR_OPEN',
   7: 'BANG',
   8: 'LSQB',
   9: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[132] = (lexer_regexps)
MRES = (
[('(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<COMMA>\\,)|(?P<SEMICOLON>\\;)',
  {1: '_PERMUTE', 2: 'COMMA', 3: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[133] = (lexer_regexps)
MRES = (
[('(?P<__ANON_13>(?:[0-8]-?[cekainyqjrtwz]*)+)', {1: '__ANON_13'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[134] = (lexer_regexps)
MRES = (
[('(?P<_WS>(?:(?:\\ |\t))+)', {1: '_WS'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[135] = (lexer_regexps)
MRES = (
[('(?P<COMMA>\\,)|(?P<SEMICOLON>\\;)', {1: 'COMMA', 2: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[136] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<COMPASS_DIR>NE|SE|SW|NW|N|E|S|W|FG|BG)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: 'COMPASS_DIR',
   4: '_NEGATE_ALL',
   5: '_VAR_OPEN',
   6: 'LSQB',
   7: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{'STATE': [('(?P<__ANON_10>7$)|(?P<__ANON_11>8$)|(?P<__ANON_12>9$)|(?P<__ANON_3>0$)|(?P<__ANON_4>1$)|(?P<__ANON_5>2$)|(?P<__ANON_6>3$)|(?P<__ANON_7>4$)|(?P<__ANON_8>5$)|(?P<__ANON_9>6$)',
            {1: '__ANON_10',
             2: '__ANON_11',
             3: '__ANON_12',
             4: '__ANON_3',
             5: '__ANON_4',
             6: '__ANON_5',
             7: '__ANON_6',
             8: '__ANON_7',
             9: '__ANON_8',
             10: '__ANON_9'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[137] = (lexer_regexps)
MRES = (
[('(?P<_WS>(?:(?:\\ |\t))+)|(?P<__ANON_2>\\.\\.)', {1: '_WS', 2: '__ANON_2'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[138] = (lexer_regexps)
MRES = (
[('(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<COMMA>\\,)|(?P<SEMICOLON>\\;)',
  {1: '_PERMUTE', 2: 'COMMA', 3: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[139] = (lexer_regexps)
MRES = (
[('(?P<_WS>(?:(?:\\ |\t))+)', {1: '_WS'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[140] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<COMPASS_DIR>NE|SE|SW|NW|N|E|S|W|FG|BG)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: 'COMPASS_DIR',
   4: '_NEGATE_ALL',
   5: '_VAR_OPEN',
   6: 'LSQB',
   7: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[141] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HENSEL_OPEN>(?:(?:(?:\\ '
  '|\t))+)?\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<STATE>\\d+)|(?P<COMPASS_DIR>NE|SE|SW|NW|N|E|S|W|FG|BG)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HENSEL_OPEN',
   3: 'STATE',
   4: 'COMPASS_DIR',
   5: '_NEGATE_ALL',
   6: '_VAR_OPEN',
   7: 'LSQB',
   8: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[142] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HENSEL_OPEN>(?:(?:(?:\\ '
  '|\t))+)?\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<STATE>\\d+)|(?P<COMPASS_DIR>NE|SE|SW|NW|N|E|S|W|FG|BG)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HENSEL_OPEN',
   3: 'STATE',
   4: 'COMPASS_DIR',
   5: '_NEGATE_ALL',
   6: '_VAR_OPEN',
   7: 'LSQB',
   8: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[143] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_14',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_15',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[144] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)', {1: '_VAR_CLOSE', 2: 'COMMA'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[145] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: '_NEGATE_ALL',
   5: '_VAR_OPEN',
   6: 'LSQB',
   7: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[146] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_14',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_15',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[147] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<INT>[0123456789]+)|(?P<STATE>\\d+)|(?P<_VAR_OPEN>[({])',
  {1: 'NAME', 2: 'INT', 3: 'STATE', 4: '_VAR_OPEN'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[148] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_VAR_OPEN>[({])',
  {1: 'NAME', 2: 'STATE', 3: '_VAR_OPEN'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[149] = (lexer_regexps)
MRES = (
[('(?P<INT>[0123456789]+)', {1: 'INT'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[150] = (lexer_regexps)
MRES = (
[('(?P<INT>[0123456789]+)', {1: 'INT'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[151] = (lexer_regexps)
MRES = (
[('(?P<INT>[0123456789]+)', {1: 'INT'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[152] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_LROT>(?:(?:(?:\\ '
  '|\t))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t'
  '))+)?\\*(?:(?:(?:\\ |\t))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ '
  '|\t))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)',
  {1: 'NAME',
   2: '_LROT',
   3: '_RROT',
   4: '_MULT',
   5: '_SUBT',
   6: '__ANON_14',
   7: '_WS',
   8: '_NL',
   9: 'STATE',
   10: '__ANON_15',
   11: '_NEGATE_ALL',
   12: '_VAR_CLOSE',
   13: '_VAR_OPEN',
   14: 'BANG',
   15: 'COMMA',
   16: 'LSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[153] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_LROT>(?:(?:(?:\\ '
  '|\t))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t'
  '))+)?\\*(?:(?:(?:\\ |\t))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ '
  '|\t))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)',
  {1: 'NAME',
   2: '_LROT',
   3: '_RROT',
   4: '_MULT',
   5: '_SUBT',
   6: '__ANON_14',
   7: '_WS',
   8: '_NL',
   9: 'STATE',
   10: '__ANON_15',
   11: '_NEGATE_ALL',
   12: '_VAR_CLOSE',
   13: '_VAR_OPEN',
   14: 'BANG',
   15: 'COMMA',
   16: 'LSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[154] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)', {1: '_VAR_CLOSE', 2: 'COMMA'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[155] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_LROT>(?:(?:(?:\\ '
  '|\t))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t'
  '))+)?\\*(?:(?:(?:\\ |\t))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ '
  '|\t))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)',
  {1: 'NAME',
   2: '_LROT',
   3: '_RROT',
   4: '_MULT',
   5: '_SUBT',
   6: '__ANON_14',
   7: '_WS',
   8: '_NL',
   9: 'STATE',
   10: '__ANON_15',
   11: '_NEGATE_ALL',
   12: '_VAR_CLOSE',
   13: '_VAR_OPEN',
   14: 'BANG',
   15: 'COMMA',
   16: 'LSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[156] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: '__ANON_15',
   5: '_NEGATE_ALL',
   6: '_VAR_OPEN',
   7: 'BANG',
   8: 'LSQB',
   9: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[157] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: '_NL',
   4: 'STATE',
   5: '__ANON_15',
   6: '_NEGATE_ALL',
   7: '_VAR_OPEN',
   8: 'BANG',
   9: 'LSQB',
   10: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[158] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: '__ANON_15',
   5: '_NEGATE_ALL',
   6: '_VAR_OPEN',
   7: 'BANG',
   8: 'LSQB',
   9: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[159] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: '__ANON_15',
   5: '_NEGATE_ALL',
   6: '_VAR_OPEN',
   7: 'BANG',
   8: 'LSQB',
   9: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[160] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<__ANON_14>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '__ANON_14',
   3: '_WS',
   4: '_NL',
   5: 'STATE',
   6: '__ANON_15',
   7: '_NEGATE_ALL',
   8: '_VAR_OPEN',
   9: 'BANG',
   10: 'LSQB',
   11: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[161] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME', 2: 'STATE', 3: '_NEGATE_ALL', 4: '_VAR_OPEN', 5: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[162] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<__ANON_14>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '__ANON_14',
   3: '_WS',
   4: '_NL',
   5: 'STATE',
   6: '__ANON_15',
   7: '_NEGATE_ALL',
   8: '_VAR_OPEN',
   9: 'BANG',
   10: 'LSQB',
   11: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[163] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<__ANON_14>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '__ANON_14',
   3: '_WS',
   4: '_NL',
   5: 'STATE',
   6: '__ANON_15',
   7: '_NEGATE_ALL',
   8: '_VAR_OPEN',
   9: 'BANG',
   10: 'LSQB',
   11: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[164] = (lexer_regexps)
MRES = (
[('(?P<INT>[0123456789]+)', {1: 'INT'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[165] = (lexer_regexps)
MRES = (
[('(?P<_WS>(?:(?:\\ |\t))+)|(?P<__ANON_2>\\.\\.)', {1: '_WS', 2: '__ANON_2'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[166] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_14',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_15',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[167] = (lexer_regexps)
MRES = (
[('(?P<STATE>\\d+)', {1: 'STATE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[168] = (lexer_regexps)
MRES = (
[('(?P<_WS>(?:(?:\\ |\t))+)|(?P<STATE>\\d+)', {1: '_WS', 2: 'STATE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[169] = (lexer_regexps)
MRES = (
[('(?P<__ANON_2>\\.\\.)', {1: '__ANON_2'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[170] = (lexer_regexps)
MRES = (
[('(?P<_WS>(?:(?:\\ |\t))+)|(?P<__ANON_2>\\.\\.)', {1: '_WS', 2: '__ANON_2'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[171] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_14',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_15',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[172] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: '__ANON_15',
   5: '_NEGATE_ALL',
   6: '_VAR_OPEN',
   7: 'BANG',
   8: 'LSQB',
   9: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[173] = (lexer_regexps)
MRES = (
[('(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t))+)?)|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<__ANON_2>\\.\\.)|(?P<PLUS>\\+)',
  {1: '_MULT', 2: '_WS', 3: '__ANON_2', 4: 'PLUS'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[174] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: '_NEGATE_ALL',
   4: '_VAR_OPEN',
   5: 'LSQB',
   6: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[175] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[176] = (lexer_regexps)
MRES = (
[('(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t))+)?)', {1: '_MULT'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[177] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: '_NEGATE_ALL',
   4: '_VAR_OPEN',
   5: 'LSQB',
   6: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[178] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t))+)?)|(?P<RSQB>\\])',
  {1: '_LROT', 2: '_RROT', 3: '_MULT', 4: '_SUBT', 5: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[179] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: '_NEGATE_ALL',
   4: '_VAR_OPEN',
   5: 'LSQB',
   6: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[180] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[181] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: '_NEGATE_ALL',
   4: '_VAR_OPEN',
   5: 'LSQB',
   6: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[182] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[183] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[184] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: '_NEGATE_ALL',
   4: '_VAR_OPEN',
   5: 'LSQB',
   6: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[185] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t))+)?)|(?P<RSQB>\\])',
  {1: '_LROT', 2: '_RROT', 3: '_MULT', 4: '_SUBT', 5: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[186] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<COMPASS_DIR>NE|SE|SW|NW|N|E|S|W|FG|BG)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LEAVE_ALONE>_)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: 'COMPASS_DIR',
   4: '_NEGATE_ALL',
   5: '_VAR_OPEN',
   6: 'LEAVE_ALONE',
   7: 'LSQB',
   8: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{'STATE': [('(?P<__ANON_10>7$)|(?P<__ANON_11>8$)|(?P<__ANON_12>9$)|(?P<__ANON_3>0$)|(?P<__ANON_4>1$)|(?P<__ANON_5>2$)|(?P<__ANON_6>3$)|(?P<__ANON_7>4$)|(?P<__ANON_8>5$)|(?P<__ANON_9>6$)',
            {1: '__ANON_10',
             2: '__ANON_11',
             3: '__ANON_12',
             4: '__ANON_3',
             5: '__ANON_4',
             6: '__ANON_5',
             7: '__ANON_6',
             8: '__ANON_7',
             9: '__ANON_8',
             10: '__ANON_9'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[187] = (lexer_regexps)
MRES = (
[('(?P<STATE>\\d+)', {1: 'STATE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[188] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_14>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_14',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_15',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[189] = (lexer_regexps)
MRES = (
[('(?P<SYMMETRY_NAME>(?<![\\w\\.])(?!(?:[NS][EW]?|[EW])(?![\\w\\.]))[\\w\\.]+)|(?P<COMPASS_DIR>NE|SE|SW|NW|N|E|S|W|FG|BG)',
  {1: 'SYMMETRY_NAME', 2: 'COMPASS_DIR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[190] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_14>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_14',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_15',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[191] = (lexer_regexps)
MRES = (
[('(?P<INT>[0123456789]+)', {1: 'INT'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[192] = (lexer_regexps)
MRES = (
[('(?P<_WS>(?:(?:\\ |\t))+)|(?P<COMPASS_DIR>NE|SE|SW|NW|N|E|S|W|FG|BG)',
  {1: '_WS', 2: 'COMPASS_DIR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[193] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_14>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_14',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_15',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[194] = (lexer_regexps)
MRES = (
[('(?P<LPAR>\\()', {1: 'LPAR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[195] = (lexer_regexps)
MRES = (
[('(?P<__ANON_1>[^,;]+)', {1: '__ANON_1'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[196] = (lexer_regexps)
MRES = (
[('(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t))+)?\\/(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_WS>(?:(?:\\ |\t))+)',
  {1: '_HENSEL_SEP', 2: '_WS'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[197] = (lexer_regexps)
MRES = (
[('(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t))+)?\\/(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_WS>(?:(?:\\ |\t))+)',
  {1: '_HENSEL_SEP', 2: '_WS'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[198] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: '_NEGATE_ALL',
   4: '_VAR_OPEN',
   5: 'LSQB',
   6: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[199] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t))+)?)|(?P<RSQB>\\])',
  {1: '_LROT', 2: '_RROT', 3: '_MULT', 4: '_SUBT', 5: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[200] = (lexer_regexps)
MRES = (
[('(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t))+)?)|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<__ANON_2>\\.\\.)|(?P<PLUS>\\+)',
  {1: '_MULT', 2: '_WS', 3: '__ANON_2', 4: 'PLUS'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[201] = (lexer_regexps)
MRES = (
[('(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t))+)?)', {1: '_MULT'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[202] = (lexer_regexps)
MRES = (
[('(?P<COMPASS_DIR>NE|SE|SW|NW|N|E|S|W|FG|BG)', {1: 'COMPASS_DIR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[203] = (lexer_regexps)
MRES = (
[('(?P<__ANON_1>[^,;]+)', {1: '__ANON_1'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[204] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: '_NEGATE_ALL',
   4: '_VAR_OPEN',
   5: 'LSQB',
   6: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[205] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t'
  '))+)?\\~(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_14>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<SEMICOLON>\\;)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '_PERMUTE',
   5: '__ANON_14',
   6: '_WS',
   7: '_NL',
   8: 'STATE',
   9: '__ANON_15',
   10: '_NEGATE_ALL',
   11: '_VAR_OPEN',
   12: 'BANG',
   13: 'COMMA',
   14: 'LSQB',
   15: 'SEMICOLON',
   16: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[206] = (lexer_regexps)
MRES = (
[('(?P<COMMA>\\,)|(?P<SEMICOLON>\\;)', {1: 'COMMA', 2: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[207] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: '_NEGATE_ALL',
   5: '_VAR_OPEN',
   6: 'LSQB',
   7: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[208] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_14',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_15',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[209] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)', {1: '_VAR_CLOSE', 2: 'COMMA'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[210] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: '_NEGATE_ALL',
   4: '_VAR_OPEN',
   5: 'LSQB',
   6: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[211] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_LROT>(?:(?:(?:\\ '
  '|\t))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t'
  '))+)?\\*(?:(?:(?:\\ |\t))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ '
  '|\t))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)',
  {1: 'NAME',
   2: '_LROT',
   3: '_RROT',
   4: '_MULT',
   5: '_SUBT',
   6: '__ANON_14',
   7: '_WS',
   8: '_NL',
   9: 'STATE',
   10: '__ANON_15',
   11: '_NEGATE_ALL',
   12: '_VAR_CLOSE',
   13: '_VAR_OPEN',
   14: 'BANG',
   15: 'COMMA',
   16: 'LSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[212] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_LROT>(?:(?:(?:\\ '
  '|\t))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t'
  '))+)?\\*(?:(?:(?:\\ |\t))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ '
  '|\t))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)',
  {1: 'NAME',
   2: '_LROT',
   3: '_RROT',
   4: '_MULT',
   5: '_SUBT',
   6: '__ANON_14',
   7: '_WS',
   8: '_NL',
   9: 'STATE',
   10: '__ANON_15',
   11: '_NEGATE_ALL',
   12: '_VAR_CLOSE',
   13: '_VAR_OPEN',
   14: 'BANG',
   15: 'COMMA',
   16: 'LSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[213] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_LROT>(?:(?:(?:\\ '
  '|\t))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t'
  '))+)?\\*(?:(?:(?:\\ |\t))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ '
  '|\t))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)',
  {1: 'NAME',
   2: '_LROT',
   3: '_RROT',
   4: '_MULT',
   5: '_SUBT',
   6: '__ANON_14',
   7: '_WS',
   8: '_NL',
   9: 'STATE',
   10: '__ANON_15',
   11: '_NEGATE_ALL',
   12: '_VAR_CLOSE',
   13: '_VAR_OPEN',
   14: 'BANG',
   15: 'COMMA',
   16: 'LSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[214] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_LROT>(?:(?:(?:\\ '
  '|\t))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t'
  '))+)?\\*(?:(?:(?:\\ |\t))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ '
  '|\t))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)',
  {1: 'NAME',
   2: '_LROT',
   3: '_RROT',
   4: '_MULT',
   5: '_SUBT',
   6: '__ANON_14',
   7: '_WS',
   8: '_NL',
   9: 'STATE',
   10: '__ANON_15',
   11: '_NEGATE_ALL',
   12: '_VAR_CLOSE',
   13: '_VAR_OPEN',
   14: 'BANG',
   15: 'COMMA',
   16: 'LSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[215] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_LROT>(?:(?:(?:\\ '
  '|\t))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t'
  '))+)?\\*(?:(?:(?:\\ |\t))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ '
  '|\t))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)',
  {1: 'NAME',
   2: '_LROT',
   3: '_RROT',
   4: '_MULT',
   5: '_SUBT',
   6: '__ANON_14',
   7: '_WS',
   8: '_NL',
   9: 'STATE',
   10: '__ANON_15',
   11: '_NEGATE_ALL',
   12: '_VAR_CLOSE',
   13: '_VAR_OPEN',
   14: 'BANG',
   15: 'COMMA',
   16: 'LSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[216] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_LROT>(?:(?:(?:\\ '
  '|\t))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t'
  '))+)?\\*(?:(?:(?:\\ |\t))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ '
  '|\t))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<__ANON_2>\\.\\.)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<PLUS>\\+)',
  {1: 'NAME',
   2: '_LROT',
   3: '_RROT',
   4: '_MULT',
   5: '_SUBT',
   6: '__ANON_14',
   7: '_WS',
   8: '_NL',
   9: 'STATE',
   10: '__ANON_15',
   11: '_NEGATE_ALL',
   12: '__ANON_2',
   13: '_VAR_CLOSE',
   14: '_VAR_OPEN',
   15: 'BANG',
   16: 'COMMA',
   17: 'LSQB',
   18: 'PLUS'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[217] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_LROT>(?:(?:(?:\\ '
  '|\t))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t'
  '))+)?\\*(?:(?:(?:\\ |\t))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ '
  '|\t))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)',
  {1: 'NAME',
   2: '_LROT',
   3: '_RROT',
   4: '_MULT',
   5: '_SUBT',
   6: '__ANON_14',
   7: '_WS',
   8: '_NL',
   9: 'STATE',
   10: '__ANON_15',
   11: '_NEGATE_ALL',
   12: '_VAR_CLOSE',
   13: '_VAR_OPEN',
   14: 'BANG',
   15: 'COMMA',
   16: 'LSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[218] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_LROT>(?:(?:(?:\\ '
  '|\t))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t'
  '))+)?\\*(?:(?:(?:\\ |\t))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ '
  '|\t))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)',
  {1: 'NAME',
   2: '_LROT',
   3: '_RROT',
   4: '_MULT',
   5: '_SUBT',
   6: '__ANON_14',
   7: '_WS',
   8: '_NL',
   9: 'STATE',
   10: '__ANON_15',
   11: '_NEGATE_ALL',
   12: '_VAR_CLOSE',
   13: '_VAR_OPEN',
   14: 'BANG',
   15: 'COMMA',
   16: 'LSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[219] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_LROT>(?:(?:(?:\\ '
  '|\t))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t'
  '))+)?\\*(?:(?:(?:\\ |\t))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ '
  '|\t))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)',
  {1: 'NAME',
   2: '_LROT',
   3: '_RROT',
   4: '_MULT',
   5: '_SUBT',
   6: '__ANON_14',
   7: '_WS',
   8: '_NL',
   9: 'STATE',
   10: '__ANON_15',
   11: '_NEGATE_ALL',
   12: '_VAR_CLOSE',
   13: '_VAR_OPEN',
   14: 'BANG',
   15: 'COMMA',
   16: 'LSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[220] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_LROT>(?:(?:(?:\\ '
  '|\t))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t'
  '))+)?\\*(?:(?:(?:\\ |\t))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ '
  '|\t))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)',
  {1: 'NAME',
   2: '_LROT',
   3: '_RROT',
   4: '_MULT',
   5: '_SUBT',
   6: '__ANON_14',
   7: '_WS',
   8: '_NL',
   9: 'STATE',
   10: '__ANON_15',
   11: '_NEGATE_ALL',
   12: '_VAR_CLOSE',
   13: '_VAR_OPEN',
   14: 'BANG',
   15: 'COMMA',
   16: 'LSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[221] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_LROT>(?:(?:(?:\\ '
  '|\t))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t'
  '))+)?\\*(?:(?:(?:\\ |\t))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ '
  '|\t))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)',
  {1: 'NAME',
   2: '_LROT',
   3: '_RROT',
   4: '_MULT',
   5: '_SUBT',
   6: '__ANON_14',
   7: '_WS',
   8: '_NL',
   9: 'STATE',
   10: '__ANON_15',
   11: '_NEGATE_ALL',
   12: '_VAR_CLOSE',
   13: '_VAR_OPEN',
   14: 'BANG',
   15: 'COMMA',
   16: 'LSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[222] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_LROT>(?:(?:(?:\\ '
  '|\t))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t'
  '))+)?\\*(?:(?:(?:\\ |\t))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ '
  '|\t))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)',
  {1: 'NAME',
   2: '_LROT',
   3: '_RROT',
   4: '_MULT',
   5: '_SUBT',
   6: '__ANON_14',
   7: '_WS',
   8: '_NL',
   9: 'STATE',
   10: '__ANON_15',
   11: '_NEGATE_ALL',
   12: '_VAR_CLOSE',
   13: '_VAR_OPEN',
   14: 'BANG',
   15: 'COMMA',
   16: 'LSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[223] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)', {1: '_VAR_CLOSE', 2: 'COMMA'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[224] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: '_NEGATE_ALL',
   5: '_VAR_OPEN',
   6: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[225] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_LROT>(?:(?:(?:\\ '
  '|\t))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t'
  '))+)?\\*(?:(?:(?:\\ |\t))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ '
  '|\t))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)',
  {1: 'NAME',
   2: '_LROT',
   3: '_RROT',
   4: '_MULT',
   5: '_SUBT',
   6: '__ANON_14',
   7: '_WS',
   8: '_NL',
   9: 'STATE',
   10: '__ANON_15',
   11: '_NEGATE_ALL',
   12: '_VAR_CLOSE',
   13: '_VAR_OPEN',
   14: 'BANG',
   15: 'COMMA',
   16: 'LSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[226] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: '__ANON_15',
   5: '_NEGATE_ALL',
   6: '_VAR_OPEN',
   7: 'BANG',
   8: 'LSQB',
   9: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[227] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<__ANON_14>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '__ANON_14',
   3: '_WS',
   4: '_NL',
   5: 'STATE',
   6: '__ANON_15',
   7: '_NEGATE_ALL',
   8: '_VAR_OPEN',
   9: 'BANG',
   10: 'LSQB',
   11: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[228] = (lexer_regexps)
MRES = (
[('(?P<_WS>(?:(?:\\ |\t))+)|(?P<__ANON_2>\\.\\.)', {1: '_WS', 2: '__ANON_2'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[229] = (lexer_regexps)
MRES = (
[('(?P<_WS>(?:(?:\\ |\t))+)|(?P<STATE>\\d+)', {1: '_WS', 2: 'STATE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[230] = (lexer_regexps)
MRES = (
[('(?P<__ANON_2>\\.\\.)', {1: '__ANON_2'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[231] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_14',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_15',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[232] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_14',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_15',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[233] = (lexer_regexps)
MRES = (
[('(?P<STATE>\\d+)', {1: 'STATE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[234] = (lexer_regexps)
MRES = (
[('(?P<_WS>(?:(?:\\ |\t))+)|(?P<STATE>\\d+)', {1: '_WS', 2: 'STATE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[235] = (lexer_regexps)
MRES = (
[('(?P<_WS>(?:(?:\\ |\t))+)|(?P<STATE>\\d+)', {1: '_WS', 2: 'STATE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[236] = (lexer_regexps)
MRES = (
[('(?P<__ANON_2>\\.\\.)', {1: '__ANON_2'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[237] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<INT>[0123456789]+)|(?P<STATE>\\d+)|(?P<_VAR_OPEN>[({])',
  {1: 'NAME', 2: 'INT', 3: 'STATE', 4: '_VAR_OPEN'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[238] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<__ANON_2>\\.\\.)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<PLUS>\\+)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_WS',
   6: '__ANON_2',
   7: '_VAR_CLOSE',
   8: 'COMMA',
   9: 'PLUS',
   10: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[239] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[240] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[241] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)', {1: '_VAR_CLOSE', 2: 'COMMA'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[242] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[243] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<INT>[0123456789]+)|(?P<STATE>\\d+)|(?P<_VAR_OPEN>[({])',
  {1: 'NAME', 2: 'INT', 3: 'STATE', 4: '_VAR_OPEN'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[244] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[245] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_14',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_15',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[246] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)',
  {1: 'NAME', 2: 'STATE', 3: '_VAR_OPEN', 4: 'LSQB'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[247] = (lexer_regexps)
MRES = (
[('(?P<INT>[0123456789]+)', {1: 'INT'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[248] = (lexer_regexps)
MRES = (
[('(?P<INT>[0123456789]+)', {1: 'INT'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[249] = (lexer_regexps)
MRES = (
[('(?P<INT>[0123456789]+)', {1: 'INT'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[250] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[251] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t))+)?)|(?P<RSQB>\\])',
  {1: '_LROT', 2: '_RROT', 3: '_MULT', 4: '_SUBT', 5: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[252] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t))+)?)|(?P<RSQB>\\])',
  {1: '_LROT', 2: '_RROT', 3: '_MULT', 4: '_SUBT', 5: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[253] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_14',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_15',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[254] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[255] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t))+)?)|(?P<RSQB>\\])',
  {1: '_LROT', 2: '_RROT', 3: '_MULT', 4: '_SUBT', 5: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[256] = (lexer_regexps)
MRES = (
[('(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t))+)?)|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<__ANON_2>\\.\\.)|(?P<PLUS>\\+)',
  {1: '_MULT', 2: '_WS', 3: '__ANON_2', 4: 'PLUS'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[257] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LEAVE_ALONE>_)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: '_NEGATE_ALL',
   4: '_VAR_OPEN',
   5: 'LEAVE_ALONE',
   6: 'LSQB',
   7: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[258] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[259] = (lexer_regexps)
MRES = (
[('(?P<COMPASS_DIR>NE|SE|SW|NW|N|E|S|W|FG|BG)|(?P<__ANON_10>7)|(?P<__ANON_11>8)|(?P<__ANON_12>9)|(?P<__ANON_3>0)|(?P<__ANON_4>1)|(?P<__ANON_5>2)|(?P<__ANON_6>3)|(?P<__ANON_7>4)|(?P<__ANON_8>5)|(?P<__ANON_9>6)',
  {1: 'COMPASS_DIR',
   2: '__ANON_10',
   3: '__ANON_11',
   4: '__ANON_12',
   5: '__ANON_3',
   6: '__ANON_4',
   7: '__ANON_5',
   8: '__ANON_6',
   9: '__ANON_7',
   10: '__ANON_8',
   11: '__ANON_9'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[260] = (lexer_regexps)
MRES = (
[('(?P<COLON>\\:)|(?P<RSQB>\\])', {1: 'COLON', 2: 'RSQB'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[261] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[262] = (lexer_regexps)
MRES = (
[('(?P<COLON>\\:)|(?P<RSQB>\\])', {1: 'COLON', 2: 'RSQB'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[263] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[264] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[265] = (lexer_regexps)
MRES = (
[('(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t))+)?)', {1: '_MULT'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[266] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LEAVE_ALONE>_)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: '_NEGATE_ALL',
   4: '_VAR_OPEN',
   5: 'LEAVE_ALONE',
   6: 'LSQB',
   7: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[267] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[268] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LEAVE_ALONE>_)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: '_NEGATE_ALL',
   4: '_VAR_OPEN',
   5: 'LEAVE_ALONE',
   6: 'LSQB',
   7: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[269] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_14>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<RPAR>\\))|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_14',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_15',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: 'RPAR',
   14: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[270] = (lexer_regexps)
MRES = (
[('(?P<SYMMETRY_NAME>(?<![\\w\\.])(?!(?:[NS][EW]?|[EW])(?![\\w\\.]))[\\w\\.]+)|(?P<COMPASS_DIR>NE|SE|SW|NW|N|E|S|W|FG|BG)',
  {1: 'SYMMETRY_NAME', 2: 'COMPASS_DIR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[271] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_14>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_14',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_15',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[272] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_14>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_14',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_15',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[273] = (lexer_regexps)
MRES = (
[('(?P<COLON>\\:)|(?P<LSQB>\\[)', {1: 'COLON', 2: 'LSQB'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[274] = (lexer_regexps)
MRES = (
[('(?P<COMPASS_DIR>NE|SE|SW|NW|N|E|S|W|FG|BG)', {1: 'COMPASS_DIR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[275] = (lexer_regexps)
MRES = (
[('(?P<_WS>(?:(?:\\ |\t))+)|(?P<RPAR>\\))', {1: '_WS', 2: 'RPAR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[276] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_14>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_14',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_15',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[277] = (lexer_regexps)
MRES = (
[('(?P<COMMA>\\,)|(?P<SEMICOLON>\\;)', {1: 'COMMA', 2: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[278] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: '_NEGATE_ALL',
   4: '_VAR_OPEN',
   5: 'LSQB',
   6: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[279] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)',
  {1: 'NAME'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[280] = (lexer_regexps)
MRES = (
[('(?P<COMMA>\\,)|(?P<SEMICOLON>\\;)', {1: 'COMMA', 2: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[281] = (lexer_regexps)
MRES = (
[('(?P<COMMA>\\,)|(?P<SEMICOLON>\\;)', {1: 'COMMA', 2: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[282] = (lexer_regexps)
MRES = (
[('(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t))+)?\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t))+)?\\/(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<COMMA>\\,)|(?P<SEMICOLON>\\;)',
  {1: '_HENSEL_CLOSE',
   2: '_HENSEL_SEP',
   3: '_PERMUTE',
   4: 'COMMA',
   5: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[283] = (lexer_regexps)
MRES = (
[('(?P<_WS>(?:(?:\\ |\t))+)', {1: '_WS'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[284] = (lexer_regexps)
MRES = (
[('(?P<COMMA>\\,)|(?P<SEMICOLON>\\;)', {1: 'COMMA', 2: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[285] = (lexer_regexps)
MRES = (
[('(?P<COMMA>\\,)|(?P<SEMICOLON>\\;)', {1: 'COMMA', 2: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[286] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: '_NEGATE_ALL',
   4: '_VAR_OPEN',
   5: 'LSQB',
   6: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[287] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)', {1: '_VAR_CLOSE', 2: 'COMMA'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[288] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)', {1: '_VAR_CLOSE', 2: 'COMMA'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[289] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_LROT>(?:(?:(?:\\ '
  '|\t))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t'
  '))+)?\\*(?:(?:(?:\\ |\t))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ '
  '|\t))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)',
  {1: 'NAME',
   2: '_LROT',
   3: '_RROT',
   4: '_MULT',
   5: '_SUBT',
   6: '__ANON_14',
   7: '_WS',
   8: '_NL',
   9: 'STATE',
   10: '__ANON_15',
   11: '_NEGATE_ALL',
   12: '_VAR_CLOSE',
   13: '_VAR_OPEN',
   14: 'BANG',
   15: 'COMMA',
   16: 'LSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[290] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: '_NEGATE_ALL',
   5: '_VAR_OPEN',
   6: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[291] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME', 2: 'STATE', 3: '_NEGATE_ALL', 4: '_VAR_OPEN', 5: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[292] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)', {1: '_VAR_CLOSE', 2: 'COMMA'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[293] = (lexer_regexps)
MRES = (
[('(?P<_WS>(?:(?:\\ |\t))+)|(?P<STATE>\\d+)', {1: '_WS', 2: 'STATE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[294] = (lexer_regexps)
MRES = (
[('(?P<__ANON_2>\\.\\.)', {1: '__ANON_2'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[295] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_14',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_15',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[296] = (lexer_regexps)
MRES = (
[('(?P<STATE>\\d+)', {1: 'STATE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[297] = (lexer_regexps)
MRES = (
[('(?P<_WS>(?:(?:\\ |\t))+)|(?P<STATE>\\d+)', {1: '_WS', 2: 'STATE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[298] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_14',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_15',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[299] = (lexer_regexps)
MRES = (
[('(?P<STATE>\\d+)', {1: 'STATE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[300] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_14',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_15',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[301] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_14',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_15',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[302] = (lexer_regexps)
MRES = (
[('(?P<STATE>\\d+)', {1: 'STATE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[303] = (lexer_regexps)
MRES = (
[('(?P<_WS>(?:(?:\\ |\t))+)|(?P<STATE>\\d+)', {1: '_WS', 2: 'STATE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[304] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[305] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[306] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[307] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[308] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[309] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[310] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[311] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)', {1: '_VAR_CLOSE', 2: 'COMMA'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[312] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<EXTEND_LAST>\\.\\.\\.)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: 'EXTEND_LAST',
   5: '_NEGATE_ALL',
   6: '_VAR_OPEN',
   7: 'LSQB',
   8: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[313] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[314] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[315] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<__ANON_2>\\.\\.)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<PLUS>\\+)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_WS',
   6: '__ANON_2',
   7: '_VAR_CLOSE',
   8: 'COMMA',
   9: 'PLUS',
   10: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[316] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[317] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[318] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[319] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[320] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[321] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[322] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_14',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_15',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[323] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_14',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_15',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[324] = (lexer_regexps)
MRES = (
[('(?P<INT>[0123456789]+)', {1: 'INT'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[325] = (lexer_regexps)
MRES = (
[('(?P<INT>[0123456789]+)', {1: 'INT'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[326] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_14>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<RPAR>\\))|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_14',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_15',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: 'RPAR',
   14: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[327] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_VAR_OPEN>[({])|(?P<LEAVE_ALONE>_)|(?P<LSQB>\\[)',
  {1: 'NAME', 2: 'STATE', 3: '_VAR_OPEN', 4: 'LEAVE_ALONE', 5: 'LSQB'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[328] = (lexer_regexps)
MRES = (
[('(?P<INT>[0123456789]+)', {1: 'INT'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[329] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<INT>[0123456789]+)|(?P<STATE>\\d+)|(?P<_VAR_OPEN>[({])|(?P<LEAVE_ALONE>_)',
  {1: 'NAME', 2: 'INT', 3: 'STATE', 4: '_VAR_OPEN', 5: 'LEAVE_ALONE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[330] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<__ANON_2>\\.\\.)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<PLUS>\\+)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_WS',
   6: '__ANON_2',
   7: '_VAR_CLOSE',
   8: 'COMMA',
   9: 'PLUS',
   10: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[331] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[332] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)', {1: '_VAR_CLOSE', 2: 'COMMA'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[333] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[334] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[335] = (lexer_regexps)
MRES = (
[('(?P<INT>[0123456789]+)', {1: 'INT'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[336] = (lexer_regexps)
MRES = (
[('(?P<COLON>\\:)|(?P<RSQB>\\])', {1: 'COLON', 2: 'RSQB'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[337] = (lexer_regexps)
MRES = (
[('(?P<COLON>\\:)|(?P<RSQB>\\])', {1: 'COLON', 2: 'RSQB'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[338] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_14>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<RPAR>\\))|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_14',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_15',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: 'RPAR',
   14: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[339] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LEAVE_ALONE>_)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: '_NEGATE_ALL',
   5: '_VAR_OPEN',
   6: 'LEAVE_ALONE',
   7: 'LSQB',
   8: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[340] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LEAVE_ALONE>_)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: '_NEGATE_ALL',
   5: '_VAR_OPEN',
   6: 'LEAVE_ALONE',
   7: 'LSQB',
   8: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[341] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_14>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<RPAR>\\))|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_14',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_15',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: 'RPAR',
   14: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[342] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<INT>[0123456789]+)|(?P<STATE>\\d+)|(?P<_VAR_OPEN>[({])|(?P<LEAVE_ALONE>_)',
  {1: 'NAME', 2: 'INT', 3: 'STATE', 4: '_VAR_OPEN', 5: 'LEAVE_ALONE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[343] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[344] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[345] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_14>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_14',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_15',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[346] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_14>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_14',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_15',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[347] = (lexer_regexps)
MRES = (
[('(?P<_WS>(?:(?:\\ |\t))+)|(?P<RPAR>\\))', {1: '_WS', 2: 'RPAR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[348] = (lexer_regexps)
MRES = (
[('(?P<COMPASS_DIR>NE|SE|SW|NW|N|E|S|W|FG|BG)|(?P<RPAR>\\))',
  {1: 'COMPASS_DIR', 2: 'RPAR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[349] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_14>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_14',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_15',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[350] = (lexer_regexps)
MRES = (
[('(?P<_WS>(?:(?:\\ |\t))+)|(?P<RPAR>\\))', {1: '_WS', 2: 'RPAR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[351] = (lexer_regexps)
MRES = (
[('(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t))+)?\\/(?:(?:(?:\\ |\t))+)?)',
  {1: '_HENSEL_SEP'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[352] = (lexer_regexps)
MRES = (
[('(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t))+)?\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t))+)?\\/(?:(?:(?:\\ |\t))+)?)',
  {1: '_HENSEL_CLOSE', 2: '_HENSEL_SEP'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[353] = (lexer_regexps)
MRES = (
[('(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t))+)?\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t))+)?\\/(?:(?:(?:\\ |\t))+)?)',
  {1: '_HENSEL_CLOSE', 2: '_HENSEL_SEP'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[354] = (lexer_regexps)
MRES = (
[('(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t))+)?\\/(?:(?:(?:\\ |\t))+)?)',
  {1: '_HENSEL_SEP'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[355] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)', {1: '_VAR_CLOSE', 2: 'COMMA'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[356] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)', {1: '_VAR_CLOSE', 2: 'COMMA'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[357] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME', 2: 'STATE', 3: '_NEGATE_ALL', 4: '_VAR_OPEN', 5: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[358] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)', {1: '_VAR_CLOSE', 2: 'COMMA'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[359] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_14',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_15',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[360] = (lexer_regexps)
MRES = (
[('(?P<STATE>\\d+)', {1: 'STATE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[361] = (lexer_regexps)
MRES = (
[('(?P<_WS>(?:(?:\\ |\t))+)|(?P<STATE>\\d+)', {1: '_WS', 2: 'STATE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[362] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_14',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_15',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[363] = (lexer_regexps)
MRES = (
[('(?P<STATE>\\d+)', {1: 'STATE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[364] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_14',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_15',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[365] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_14',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_15',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[366] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_14',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_15',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[367] = (lexer_regexps)
MRES = (
[('(?P<STATE>\\d+)', {1: 'STATE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[368] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_14',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_15',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[369] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<EXTEND_LAST>\\.\\.\\.)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: 'EXTEND_LAST',
   5: '_NEGATE_ALL',
   6: '_VAR_OPEN',
   7: 'LSQB',
   8: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[370] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[371] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<EXTEND_LAST>\\.\\.\\.)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: 'EXTEND_LAST',
   4: '_NEGATE_ALL',
   5: '_VAR_OPEN',
   6: 'LSQB',
   7: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[372] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])', {1: '_VAR_CLOSE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[373] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)', {1: '_VAR_CLOSE', 2: 'COMMA'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[374] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[375] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[376] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<__ANON_2>\\.\\.)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<PLUS>\\+)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_WS',
   6: '__ANON_2',
   7: '_VAR_CLOSE',
   8: 'COMMA',
   9: 'PLUS',
   10: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[377] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[378] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[379] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[380] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[381] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[382] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[383] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[384] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[385] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[386] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[387] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[388] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[389] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)', {1: '_VAR_CLOSE', 2: 'COMMA'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[390] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<EXTEND_LAST>\\.\\.\\.)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LEAVE_ALONE>_)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: 'EXTEND_LAST',
   5: '_NEGATE_ALL',
   6: '_VAR_OPEN',
   7: 'LEAVE_ALONE',
   8: 'LSQB',
   9: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[391] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[392] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[393] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[394] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LEAVE_ALONE>_)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: '_NEGATE_ALL',
   5: '_VAR_OPEN',
   6: 'LEAVE_ALONE',
   7: 'LSQB',
   8: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[395] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LEAVE_ALONE>_)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: '_NEGATE_ALL',
   5: '_VAR_OPEN',
   6: 'LEAVE_ALONE',
   7: 'LSQB',
   8: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[396] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[397] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t))+)?)|(?P<RSQB>\\])',
  {1: '_LROT', 2: '_RROT', 3: '_MULT', 4: '_SUBT', 5: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[398] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LEAVE_ALONE>_)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: '_NEGATE_ALL',
   4: '_VAR_OPEN',
   5: 'LEAVE_ALONE',
   6: 'LSQB',
   7: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[399] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t))+)?)|(?P<RSQB>\\])',
  {1: '_LROT', 2: '_RROT', 3: '_MULT', 4: '_SUBT', 5: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[400] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LEAVE_ALONE>_)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: '_NEGATE_ALL',
   4: '_VAR_OPEN',
   5: 'LEAVE_ALONE',
   6: 'LSQB',
   7: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[401] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[402] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[403] = (lexer_regexps)
MRES = (
[('(?P<_WS>(?:(?:\\ |\t))+)|(?P<RPAR>\\))', {1: '_WS', 2: 'RPAR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[404] = (lexer_regexps)
MRES = (
[('(?P<COMPASS_DIR>NE|SE|SW|NW|N|E|S|W|FG|BG)|(?P<RPAR>\\))',
  {1: 'COMPASS_DIR', 2: 'RPAR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[405] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_14>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_14',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_15',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[406] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_14>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_14',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_15',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[407] = (lexer_regexps)
MRES = (
[('(?P<_WS>(?:(?:\\ |\t))+)|(?P<RPAR>\\))', {1: '_WS', 2: 'RPAR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[408] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_14>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_14',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_15',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[409] = (lexer_regexps)
MRES = (
[('(?P<COMPASS_DIR>NE|SE|SW|NW|N|E|S|W|FG|BG)|(?P<RPAR>\\))',
  {1: 'COMPASS_DIR', 2: 'RPAR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[410] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: '_NEGATE_ALL',
   4: '_VAR_OPEN',
   5: 'LSQB',
   6: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[411] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: '_NEGATE_ALL',
   4: '_VAR_OPEN',
   5: 'LSQB',
   6: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[412] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)', {1: '_VAR_CLOSE', 2: 'COMMA'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[413] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_14',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_15',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[414] = (lexer_regexps)
MRES = (
[('(?P<STATE>\\d+)', {1: 'STATE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[415] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_14',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_15',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[416] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_14',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_15',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[417] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_14',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_15',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[418] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<EXTEND_LAST>\\.\\.\\.)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: 'EXTEND_LAST',
   4: '_NEGATE_ALL',
   5: '_VAR_OPEN',
   6: 'LSQB',
   7: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[419] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])', {1: '_VAR_CLOSE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[420] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)', {1: '_VAR_CLOSE', 2: 'COMMA'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[421] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])', {1: '_VAR_CLOSE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[422] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)', {1: '_VAR_CLOSE', 2: 'COMMA'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[423] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[424] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<EXTEND_LAST>\\.\\.\\.)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LEAVE_ALONE>_)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: 'EXTEND_LAST',
   5: '_NEGATE_ALL',
   6: '_VAR_OPEN',
   7: 'LEAVE_ALONE',
   8: 'LSQB',
   9: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[425] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[426] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)', {1: '_VAR_CLOSE', 2: 'COMMA'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[427] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])', {1: '_VAR_CLOSE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[428] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<EXTEND_LAST>\\.\\.\\.)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LEAVE_ALONE>_)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: 'EXTEND_LAST',
   4: '_NEGATE_ALL',
   5: '_VAR_OPEN',
   6: 'LEAVE_ALONE',
   7: 'LSQB',
   8: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[429] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t))+)?)|(?P<RSQB>\\])',
  {1: '_LROT', 2: '_RROT', 3: '_MULT', 4: '_SUBT', 5: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[430] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LEAVE_ALONE>_)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: '_NEGATE_ALL',
   4: '_VAR_OPEN',
   5: 'LEAVE_ALONE',
   6: 'LSQB',
   7: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[431] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t))+)?)|(?P<RSQB>\\])',
  {1: '_LROT', 2: '_RROT', 3: '_MULT', 4: '_SUBT', 5: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[432] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LEAVE_ALONE>_)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: '_NEGATE_ALL',
   4: '_VAR_OPEN',
   5: 'LEAVE_ALONE',
   6: 'LSQB',
   7: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[433] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_14>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<RPAR>\\))|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_14',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_15',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: 'RPAR',
   14: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[434] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t))+)?)|(?P<RSQB>\\])',
  {1: '_LROT', 2: '_RROT', 3: '_MULT', 4: '_SUBT', 5: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[435] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_14>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<RPAR>\\))|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_14',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_15',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: 'RPAR',
   14: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[436] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t))+)?)|(?P<RSQB>\\])',
  {1: '_LROT', 2: '_RROT', 3: '_MULT', 4: '_SUBT', 5: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[437] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_14>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_14',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_15',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[438] = (lexer_regexps)
MRES = (
[('(?P<COMPASS_DIR>NE|SE|SW|NW|N|E|S|W|FG|BG)|(?P<RPAR>\\))',
  {1: 'COMPASS_DIR', 2: 'RPAR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[439] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_14>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_14',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_15',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[440] = (lexer_regexps)
MRES = (
[('(?P<_WS>(?:(?:\\ |\t))+)|(?P<RPAR>\\))', {1: '_WS', 2: 'RPAR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[441] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_14>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_14',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_15',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[442] = (lexer_regexps)
MRES = (
[('(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t))+)?\\>(?:(?:(?:\\ |\t))+)?)',
  {1: '_HENSEL_CLOSE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[443] = (lexer_regexps)
MRES = (
[('(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t))+)?\\/(?:(?:(?:\\ |\t))+)?)',
  {1: '_HENSEL_SEP'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[444] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_14>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_14',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_15',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[445] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)', {1: '_VAR_CLOSE', 2: 'COMMA'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[446] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])', {1: '_VAR_CLOSE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[447] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[448] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[449] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<EXTEND_LAST>\\.\\.\\.)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LEAVE_ALONE>_)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: 'EXTEND_LAST',
   4: '_NEGATE_ALL',
   5: '_VAR_OPEN',
   6: 'LEAVE_ALONE',
   7: 'LSQB',
   8: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[450] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)', {1: '_VAR_CLOSE', 2: 'COMMA'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[451] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])', {1: '_VAR_CLOSE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[452] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[453] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)', {1: '_VAR_CLOSE', 2: 'COMMA'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[454] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])', {1: '_VAR_CLOSE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[455] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[456] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t))+)?)|(?P<RSQB>\\])',
  {1: '_LROT', 2: '_RROT', 3: '_MULT', 4: '_SUBT', 5: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[457] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[458] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t))+)?)|(?P<RSQB>\\])',
  {1: '_LROT', 2: '_RROT', 3: '_MULT', 4: '_SUBT', 5: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[459] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_14>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<RPAR>\\))|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_14',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_15',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: 'RPAR',
   14: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[460] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_14>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<RPAR>\\))|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_14',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_15',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: 'RPAR',
   14: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[461] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_14>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_14',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_15',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[462] = (lexer_regexps)
MRES = (
[('(?P<COMMA>\\,)|(?P<SEMICOLON>\\;)', {1: 'COMMA', 2: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[463] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: '_NEGATE_ALL',
   4: '_VAR_OPEN',
   5: 'LSQB',
   6: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[464] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[465] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])', {1: '_VAR_CLOSE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[466] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)', {1: '_VAR_CLOSE', 2: 'COMMA'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[467] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[468] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[469] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[470] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[471] = (lexer_regexps)
MRES = (
[('(?P<STATE>\\d+)|(?P<LSQB>\\[)', {1: 'STATE', 2: 'LSQB'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[472] = (lexer_regexps)
MRES = (
[('(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t))+)?\\>(?:(?:(?:\\ |\t))+)?)',
  {1: '_HENSEL_CLOSE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[473] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[474] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_14>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_14',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_15',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[475] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_14>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_14',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_15',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[476] = (lexer_regexps)
MRES = (
[('(?P<COMMA>\\,)|(?P<SEMICOLON>\\;)', {1: 'COMMA', 2: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[477] = (lexer_regexps)
MRES = (
[('(?P<STATE>\\d+)|(?P<LSQB>\\[)', {1: 'STATE', 2: 'LSQB'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[478] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_14>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_14',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_15',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[479] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_14>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_15>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_14',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_15',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[480] = (lexer_regexps)
class ContextualLexer:
    def __init__(self):
        self.lexers = LEXERS
        self.set_parser_state(None)
    def set_parser_state(self, state):
        self.parser_state = state
    def lex(self, stream, tbl):
        newline_types = NEWLINE_TYPES
        ignore_types = IGNORE_TYPES
        lexers = LEXERS
        l = _Lex(lexers[self.parser_state], self.parser_state)
        for x in l.lex(stream, newline_types, ignore_types, tbl):
            yield x
            l.lexer = lexers[self.parser_state]
            l.state = self.parser_state
RULES = {
  0: Rule(NonTerminal('table'), [NonTerminal('__anon_plus_0')], None, RuleOptions(False, False, None)),
  1: Rule(NonTerminal('line'), [Terminal('NAME', False), Terminal('_WS', True), Terminal('EQUAL', True), Terminal('_WS', True), NonTerminal('_expr')], 'var_decl', RuleOptions(False, False, None)),
  2: Rule(NonTerminal('line'), [NonTerminal('rulestring_tr'), NonTerminal('_aux')], 'rulestring_transition', RuleOptions(False, False, None)),
  3: Rule(NonTerminal('line'), [NonTerminal('transition')], 'transition', RuleOptions(False, False, None)),
  4: Rule(NonTerminal('line'), [Terminal('NAME', False), Terminal('EQUAL', True), NonTerminal('_expr')], 'var_decl', RuleOptions(False, False, None)),
  5: Rule(NonTerminal('line'), [Terminal('NAME', False), Terminal('_WS', True), Terminal('EQUAL', True), NonTerminal('_expr')], 'var_decl', RuleOptions(False, False, None)),
  6: Rule(NonTerminal('line'), [Terminal('NAME', False), Terminal('EQUAL', True), Terminal('_WS', True), NonTerminal('_expr')], 'var_decl', RuleOptions(False, False, None)),
  7: Rule(NonTerminal('line'), [Terminal('NAME', False), Terminal('COLON', True), Terminal('_WS', True), Terminal('__ANON_0', False)], 'directive', RuleOptions(False, False, None)),
  8: Rule(NonTerminal('line'), [Terminal('BANG', True), NonTerminal('_expr_no_int')], 'print_var', RuleOptions(False, False, None)),
  9: Rule(NonTerminal('line'), [Terminal('NAME', False), Terminal('COLON', True), Terminal('__ANON_0', False)], 'directive', RuleOptions(False, False, None)),
  10: Rule(NonTerminal('line'), [NonTerminal('rulestring_tr')], 'rulestring_transition', RuleOptions(False, False, None)),
  11: Rule(NonTerminal('line'), [NonTerminal('transition'), NonTerminal('_aux')], 'transition', RuleOptions(False, False, None)),
  12: Rule(NonTerminal('rulestring_tr'), [NonTerminal('_tr_expr'), NonTerminal('_sep'), Terminal('_HENSEL_OPEN', True), NonTerminal('hensel_rulestring'), Terminal('_HENSEL_SEP', True), NonTerminal('_rs_expr'), Terminal('_HENSEL_SEP', True), NonTerminal('_rs_expr'), Terminal('_HENSEL_CLOSE', True), NonTerminal('_sep'), Terminal('STATE', False)], 'rulestring_tr', RuleOptions(False, False, None)),
  13: Rule(NonTerminal('rulestring_tr'), [NonTerminal('_tr_expr'), NonTerminal('_sep'), Terminal('_HENSEL_OPEN', True), NonTerminal('hensel_rulestring'), Terminal('_WS', True), Terminal('NAME', False), Terminal('_HENSEL_SEP', True), NonTerminal('_rs_expr'), Terminal('_HENSEL_SEP', True), NonTerminal('_rs_expr'), Terminal('_HENSEL_CLOSE', True), NonTerminal('_sep'), Terminal('STATE', False)], 'special_rulestring_tr', RuleOptions(False, False, None)),
  14: Rule(NonTerminal('rulestring_tr'), [NonTerminal('_tr_expr'), NonTerminal('_sep'), Terminal('_HENSEL_OPEN', True), NonTerminal('hensel_rulestring'), Terminal('_HENSEL_SEP', True), NonTerminal('_rs_expr'), Terminal('_HENSEL_SEP', True), NonTerminal('_rs_expr'), Terminal('_HENSEL_CLOSE', True), NonTerminal('_sep'), NonTerminal('reference')], 'rulestring_tr', RuleOptions(False, False, None)),
  15: Rule(NonTerminal('rulestring_tr'), [NonTerminal('_tr_expr'), NonTerminal('_sep'), Terminal('_HENSEL_OPEN', True), NonTerminal('hensel_rulestring'), Terminal('_WS', True), Terminal('NAME', False), Terminal('_HENSEL_SEP', True), NonTerminal('_rs_expr'), Terminal('_HENSEL_SEP', True), NonTerminal('_rs_expr'), Terminal('_HENSEL_CLOSE', True), NonTerminal('_sep'), NonTerminal('reference')], 'special_rulestring_tr', RuleOptions(False, False, None)),
  16: Rule(NonTerminal('_rs_expr'), [NonTerminal('_tr_expr')], None, RuleOptions(False, False, None)),
  17: Rule(NonTerminal('_rs_expr'), [NonTerminal('inline_binding')], None, RuleOptions(False, False, None)),
  18: Rule(NonTerminal('transition'), [NonTerminal('_tr_expr'), NonTerminal('__anon_plus_1'), NonTerminal('_sep'), NonTerminal('_tr_expr')], 'main', RuleOptions(False, False, None)),
  19: Rule(NonTerminal('tr_state'), [NonTerminal('crange'), Terminal('_WS', True), NonTerminal('inline_binding')], None, RuleOptions(False, False, None)),
  20: Rule(NonTerminal('tr_state'), [NonTerminal('_tr_expr'), Terminal('_PERMUTE', True), Terminal('__ANON_1', False)], 'permute_shorthand', RuleOptions(False, False, None)),
  21: Rule(NonTerminal('tr_state'), [NonTerminal('prefix'), Terminal('_WS', True), NonTerminal('_tr_expr')], None, RuleOptions(False, False, None)),
  22: Rule(NonTerminal('tr_state'), [NonTerminal('_tr_expr')], None, RuleOptions(False, False, None)),
  23: Rule(NonTerminal('tr_state'), [NonTerminal('crange'), Terminal('_WS', True), NonTerminal('_tr_expr')], None, RuleOptions(False, False, None)),
  24: Rule(NonTerminal('tr_state'), [NonTerminal('inline_binding')], 'permute_shorthand', RuleOptions(False, False, None)),
  25: Rule(NonTerminal('tr_state'), [NonTerminal('inline_binding'), Terminal('_PERMUTE', True), Terminal('__ANON_1', False)], 'permute_shorthand', RuleOptions(False, False, None)),
  26: Rule(NonTerminal('inline_binding'), [Terminal('LSQB', True), NonTerminal('_tr_expr_no_int'), Terminal('RSQB', True)], None, RuleOptions(False, False, None)),
  27: Rule(NonTerminal('prefix'), [Terminal('COMPASS_DIR', False)], 'cdir', RuleOptions(False, False, None)),
  28: Rule(NonTerminal('prefix'), [NonTerminal('crange')], None, RuleOptions(False, False, None)),
  29: Rule(NonTerminal('crange'), [Terminal('COMPASS_DIR', False), Terminal('__ANON_2', True), Terminal('COMPASS_DIR', False)], None, RuleOptions(False, False, None)),
  30: Rule(NonTerminal('_sep'), [Terminal('COMMA', True)], None, RuleOptions(False, False, None)),
  31: Rule(NonTerminal('_sep'), [Terminal('SEMICOLON', True)], None, RuleOptions(False, False, None)),
  32: Rule(NonTerminal('_sep'), [Terminal('COMMA', True), Terminal('_WS', True)], None, RuleOptions(False, False, None)),
  33: Rule(NonTerminal('_sep'), [Terminal('SEMICOLON', True), Terminal('_WS', True)], None, RuleOptions(False, False, None)),
  34: Rule(NonTerminal('_aux'), [NonTerminal('hoist_aux'), NonTerminal('normal_aux')], None, RuleOptions(False, False, None)),
  35: Rule(NonTerminal('_aux'), [NonTerminal('normal_aux'), NonTerminal('hoist_aux')], None, RuleOptions(False, False, None)),
  36: Rule(NonTerminal('_aux'), [NonTerminal('hoist_aux')], None, RuleOptions(False, False, None)),
  37: Rule(NonTerminal('_aux'), [NonTerminal('normal_aux')], None, RuleOptions(False, False, None)),
  38: Rule(NonTerminal('normal_aux'), [Terminal('_NORMAL_ARROW', True), NonTerminal('_auxlist')], None, RuleOptions(False, False, None)),
  39: Rule(NonTerminal('hoist_aux'), [Terminal('_HOIST_ARROW', True), NonTerminal('_auxlist')], None, RuleOptions(False, False, None)),
  40: Rule(NonTerminal('_auxlist'), [NonTerminal('auxiliary'), NonTerminal('__anon_star_2')], None, RuleOptions(False, False, None)),
  41: Rule(NonTerminal('_auxlist'), [NonTerminal('auxiliary')], None, RuleOptions(False, False, None)),
  42: Rule(NonTerminal('_auxlist'), [NonTerminal('symmetried_aux')], None, RuleOptions(False, False, None)),
  43: Rule(NonTerminal('_auxlist'), [NonTerminal('symmetried_aux'), NonTerminal('__anon_star_2')], None, RuleOptions(False, False, None)),
  44: Rule(NonTerminal('symmetried_aux'), [Terminal('SYMMETRY_NAME', False), Terminal('BANG', True), NonTerminal('_aux_group')], 'stationary_symmetried_aux', RuleOptions(False, False, None)),
  45: Rule(NonTerminal('symmetried_aux'), [Terminal('SYMMETRY_NAME', False), NonTerminal('_aux_group')], None, RuleOptions(False, False, None)),
  46: Rule(NonTerminal('_aux_group'), [Terminal('LPAR', True), Terminal('_WS', True), NonTerminal('auxiliary'), NonTerminal('__anon_star_3'), Terminal('RPAR', True)], None, RuleOptions(False, False, None)),
  47: Rule(NonTerminal('_aux_group'), [Terminal('LPAR', True), Terminal('_WS', True), NonTerminal('auxiliary'), Terminal('_WS', True), Terminal('RPAR', True)], None, RuleOptions(False, False, None)),
  48: Rule(NonTerminal('_aux_group'), [Terminal('LPAR', True), NonTerminal('auxiliary'), NonTerminal('__anon_star_3'), Terminal('RPAR', True)], None, RuleOptions(False, False, None)),
  49: Rule(NonTerminal('_aux_group'), [Terminal('LPAR', True), Terminal('_WS', True), NonTerminal('auxiliary'), Terminal('RPAR', True)], None, RuleOptions(False, False, None)),
  50: Rule(NonTerminal('_aux_group'), [Terminal('LPAR', True), NonTerminal('auxiliary'), Terminal('_WS', True), Terminal('RPAR', True)], None, RuleOptions(False, False, None)),
  51: Rule(NonTerminal('_aux_group'), [Terminal('LPAR', True), NonTerminal('auxiliary'), Terminal('RPAR', True)], None, RuleOptions(False, False, None)),
  52: Rule(NonTerminal('_aux_group'), [Terminal('LPAR', True), NonTerminal('auxiliary'), NonTerminal('__anon_star_3'), Terminal('_WS', True), Terminal('RPAR', True)], None, RuleOptions(False, False, None)),
  53: Rule(NonTerminal('_aux_group'), [Terminal('LPAR', True), Terminal('_WS', True), NonTerminal('auxiliary'), NonTerminal('__anon_star_3'), Terminal('_WS', True), Terminal('RPAR', True)], None, RuleOptions(False, False, None)),
  54: Rule(NonTerminal('auxiliary'), [NonTerminal('cdir_delay'), Terminal('LSQB', True), NonTerminal('_aux_expr_no_int'), Terminal('RSQB', True)], 'aux_map_self', RuleOptions(False, False, None)),
  55: Rule(NonTerminal('auxiliary'), [NonTerminal('cdir_delay'), Terminal('LSQB', True), Terminal('COMPASS_DIR', False), Terminal('COLON', True), Terminal('_WS', True), NonTerminal('_aux_expr_no_int'), Terminal('RSQB', True)], 'aux_map_other', RuleOptions(False, False, None)),
  56: Rule(NonTerminal('auxiliary'), [NonTerminal('cdir_delay'), Terminal('LSQB', True), NonTerminal('_digit_bind'), Terminal('RSQB', True)], 'aux_bind_self', RuleOptions(False, False, None)),
  57: Rule(NonTerminal('auxiliary'), [NonTerminal('cdir_delay'), Terminal('LSQB', True), Terminal('COMPASS_DIR', False), Terminal('COLON', True), NonTerminal('_aux_expr_no_int'), Terminal('RSQB', True)], 'aux_map_other', RuleOptions(False, False, None)),
  58: Rule(NonTerminal('auxiliary'), [NonTerminal('cdir_delay'), Terminal('COLON', True), Terminal('STATE', False)], 'aux_bare', RuleOptions(False, False, None)),
  59: Rule(NonTerminal('auxiliary'), [NonTerminal('cdir_delay'), Terminal('LSQB', True), Terminal('COMPASS_DIR', False), Terminal('RSQB', True)], 'aux_bind_self', RuleOptions(False, False, None)),
  60: Rule(NonTerminal('auxiliary'), [NonTerminal('cdir_delay'), Terminal('LSQB', True), NonTerminal('_digit_bind'), Terminal('COLON', True), NonTerminal('_aux_expr_no_int'), Terminal('RSQB', True)], 'aux_map_other', RuleOptions(False, False, None)),
  61: Rule(NonTerminal('auxiliary'), [NonTerminal('cdir_delay'), Terminal('LSQB', True), NonTerminal('_digit_bind'), Terminal('COLON', True), Terminal('_WS', True), NonTerminal('_aux_expr_no_int'), Terminal('RSQB', True)], 'aux_map_other', RuleOptions(False, False, None)),
  62: Rule(NonTerminal('cdir_delay'), [Terminal('COMPASS_DIR', False), Terminal('PLUS', True), Terminal('INT', False)], None, RuleOptions(False, False, None)),
  63: Rule(NonTerminal('cdir_delay'), [Terminal('COMPASS_DIR', False)], None, RuleOptions(False, False, None)),
  64: Rule(NonTerminal('var'), [Terminal('_VAR_OPEN', True), NonTerminal('_expr'), NonTerminal('__anon_star_4'), Terminal('_VAR_CLOSE', True)], 'noref_var', RuleOptions(False, False, None)),
  65: Rule(NonTerminal('var'), [Terminal('_VAR_OPEN', True), NonTerminal('_expr'), Terminal('_VAR_CLOSE', True)], 'noref_var', RuleOptions(False, False, None)),
  66: Rule(NonTerminal('var'), [Terminal('_VAR_OPEN', True), NonTerminal('range'), Terminal('_VAR_CLOSE', True)], 'noref_var', RuleOptions(False, False, None)),
  67: Rule(NonTerminal('tr_var'), [Terminal('_VAR_OPEN', True), NonTerminal('range'), Terminal('_VAR_CLOSE', True)], 'var', RuleOptions(False, False, None)),
  68: Rule(NonTerminal('tr_var'), [Terminal('_VAR_OPEN', True), NonTerminal('_tr_expr'), NonTerminal('__anon_star_5'), Terminal('_VAR_CLOSE', True)], 'var', RuleOptions(False, False, None)),
  69: Rule(NonTerminal('tr_var'), [Terminal('_VAR_OPEN', True), NonTerminal('_tr_expr'), Terminal('_VAR_CLOSE', True)], 'var', RuleOptions(False, False, None)),
  70: Rule(NonTerminal('ref_var'), [Terminal('_VAR_OPEN', True), NonTerminal('_ref_expr'), NonTerminal('__anon_star_6'), Terminal('_VAR_CLOSE', True)], 'var', RuleOptions(False, False, None)),
  71: Rule(NonTerminal('ref_var'), [Terminal('_VAR_OPEN', True), NonTerminal('range'), Terminal('_VAR_CLOSE', True)], 'var', RuleOptions(False, False, None)),
  72: Rule(NonTerminal('ref_var'), [Terminal('_VAR_OPEN', True), NonTerminal('_ref_expr'), NonTerminal('__anon_star_6'), Terminal('COMMA', True), Terminal('_WS', True), Terminal('EXTEND_LAST', False), Terminal('_VAR_CLOSE', True)], 'var', RuleOptions(False, False, None)),
  73: Rule(NonTerminal('ref_var'), [Terminal('_VAR_OPEN', True), NonTerminal('_ref_expr'), NonTerminal('__anon_star_6'), Terminal('COMMA', True), Terminal('EXTEND_LAST', False), Terminal('_VAR_CLOSE', True)], 'var', RuleOptions(False, False, None)),
  74: Rule(NonTerminal('ref_var'), [Terminal('_VAR_OPEN', True), NonTerminal('_ref_expr'), Terminal('_VAR_CLOSE', True)], 'var', RuleOptions(False, False, None)),
  75: Rule(NonTerminal('ref_var'), [Terminal('_VAR_OPEN', True), NonTerminal('_ref_expr'), Terminal('COMMA', True), Terminal('EXTEND_LAST', False), Terminal('_VAR_CLOSE', True)], 'var', RuleOptions(False, False, None)),
  76: Rule(NonTerminal('ref_var'), [Terminal('_VAR_OPEN', True), NonTerminal('_ref_expr'), Terminal('COMMA', True), Terminal('_WS', True), Terminal('EXTEND_LAST', False), Terminal('_VAR_CLOSE', True)], 'var', RuleOptions(False, False, None)),
  77: Rule(NonTerminal('aux_var'), [Terminal('_VAR_OPEN', True), NonTerminal('range'), Terminal('_VAR_CLOSE', True)], 'var', RuleOptions(False, False, None)),
  78: Rule(NonTerminal('aux_var'), [Terminal('_VAR_OPEN', True), NonTerminal('_aux_expr'), NonTerminal('__anon_star_7'), Terminal('_VAR_CLOSE', True)], 'var', RuleOptions(False, False, None)),
  79: Rule(NonTerminal('aux_var'), [Terminal('_VAR_OPEN', True), NonTerminal('_aux_expr'), NonTerminal('__anon_star_7'), Terminal('COMMA', True), Terminal('EXTEND_LAST', False), Terminal('_VAR_CLOSE', True)], 'var', RuleOptions(False, False, None)),
  80: Rule(NonTerminal('aux_var'), [Terminal('_VAR_OPEN', True), NonTerminal('_aux_expr'), Terminal('COMMA', True), Terminal('_WS', True), Terminal('EXTEND_LAST', False), Terminal('_VAR_CLOSE', True)], 'var', RuleOptions(False, False, None)),
  81: Rule(NonTerminal('aux_var'), [Terminal('_VAR_OPEN', True), NonTerminal('_aux_expr'), Terminal('_VAR_CLOSE', True)], 'var', RuleOptions(False, False, None)),
  82: Rule(NonTerminal('aux_var'), [Terminal('_VAR_OPEN', True), NonTerminal('_aux_expr'), Terminal('COMMA', True), Terminal('EXTEND_LAST', False), Terminal('_VAR_CLOSE', True)], 'var', RuleOptions(False, False, None)),
  83: Rule(NonTerminal('aux_var'), [Terminal('_VAR_OPEN', True), NonTerminal('_aux_expr'), NonTerminal('__anon_star_7'), Terminal('COMMA', True), Terminal('_WS', True), Terminal('EXTEND_LAST', False), Terminal('_VAR_CLOSE', True)], 'var', RuleOptions(False, False, None)),
  84: Rule(NonTerminal('_expr'), [NonTerminal('_expr_no_int')], None, RuleOptions(False, False, None)),
  85: Rule(NonTerminal('_expr'), [Terminal('STATE', False)], None, RuleOptions(False, False, None)),
  86: Rule(NonTerminal('_expr_norec_int'), [NonTerminal('_expr_no_rec')], None, RuleOptions(False, False, None)),
  87: Rule(NonTerminal('_expr_norec_int'), [Terminal('STATE', False)], None, RuleOptions(False, False, None)),
  88: Rule(NonTerminal('_expr_no_int'), [NonTerminal('range')], None, RuleOptions(False, False, None)),
  89: Rule(NonTerminal('_expr_no_int'), [NonTerminal('var')], None, RuleOptions(False, False, None)),
  90: Rule(NonTerminal('_expr_no_int'), [NonTerminal('operation')], None, RuleOptions(False, False, None)),
  91: Rule(NonTerminal('_expr_no_int'), [Terminal('NAME', False)], None, RuleOptions(False, False, None)),
  92: Rule(NonTerminal('_expr_no_rec'), [NonTerminal('range')], None, RuleOptions(False, False, None)),
  93: Rule(NonTerminal('_expr_no_rec'), [NonTerminal('var')], None, RuleOptions(False, False, None)),
  94: Rule(NonTerminal('_expr_no_rec'), [Terminal('NAME', False)], None, RuleOptions(False, False, None)),
  95: Rule(NonTerminal('operation'), [NonTerminal('_expr_no_int'), Terminal('_RROT', True), Terminal('INT', False)], 'noref_rot_right', RuleOptions(False, False, None)),
  96: Rule(NonTerminal('operation'), [NonTerminal('_expr_no_int'), Terminal('_LROT', True), Terminal('INT', False)], 'noref_rot_left', RuleOptions(False, False, None)),
  97: Rule(NonTerminal('operation'), [Terminal('_NEGATE_LIVE', True), NonTerminal('_expr')], 'noref_live_except', RuleOptions(False, False, None)),
  98: Rule(NonTerminal('operation'), [Terminal('STATE', False), Terminal('_MULT', True), NonTerminal('_expr_no_rec')], 'noref_int_to_var_length', RuleOptions(False, False, None)),
  99: Rule(NonTerminal('operation'), [Terminal('_NEGATE_ALL', True), NonTerminal('_expr')], 'noref_all_except', RuleOptions(False, False, None)),
  100: Rule(NonTerminal('operation'), [NonTerminal('_expr_no_int'), NonTerminal('_subt'), NonTerminal('_expr_norec_int')], 'noref_subt', RuleOptions(False, False, None)),
  101: Rule(NonTerminal('operation'), [Terminal('STATE', False), Terminal('_MULT', True), Terminal('INT', False)], 'noref_repeat_int', RuleOptions(False, False, None)),
  102: Rule(NonTerminal('operation'), [NonTerminal('_expr_no_int'), Terminal('_MULT', True), Terminal('INT', False)], 'noref_repeat_var', RuleOptions(False, False, None)),
  103: Rule(NonTerminal('_tr_expr'), [NonTerminal('reference')], None, RuleOptions(False, False, None)),
  104: Rule(NonTerminal('_tr_expr'), [Terminal('STATE', False)], None, RuleOptions(False, False, None)),
  105: Rule(NonTerminal('_tr_expr'), [NonTerminal('_tr_expr_no_int')], None, RuleOptions(False, False, None)),
  106: Rule(NonTerminal('_tr_expr_norec_int'), [NonTerminal('_tr_expr_no_rec')], None, RuleOptions(False, False, None)),
  107: Rule(NonTerminal('_tr_expr_norec_int'), [NonTerminal('reference')], None, RuleOptions(False, False, None)),
  108: Rule(NonTerminal('_tr_expr_norec_int'), [Terminal('STATE', False)], None, RuleOptions(False, False, None)),
  109: Rule(NonTerminal('_tr_expr_no_int'), [NonTerminal('tr_var')], None, RuleOptions(False, False, None)),
  110: Rule(NonTerminal('_tr_expr_no_int'), [NonTerminal('range')], None, RuleOptions(False, False, None)),
  111: Rule(NonTerminal('_tr_expr_no_int'), [Terminal('NAME', False)], None, RuleOptions(False, False, None)),
  112: Rule(NonTerminal('_tr_expr_no_int'), [NonTerminal('tr_operation')], None, RuleOptions(False, False, None)),
  113: Rule(NonTerminal('_tr_expr_no_rec'), [NonTerminal('tr_var')], None, RuleOptions(False, False, None)),
  114: Rule(NonTerminal('_tr_expr_no_rec'), [NonTerminal('range')], None, RuleOptions(False, False, None)),
  115: Rule(NonTerminal('_tr_expr_no_rec'), [Terminal('NAME', False)], None, RuleOptions(False, False, None)),
  116: Rule(NonTerminal('tr_operation'), [NonTerminal('_tr_expr_no_int'), Terminal('_MULT', True), Terminal('INT', False)], 'repeat_var', RuleOptions(False, False, None)),
  117: Rule(NonTerminal('tr_operation'), [Terminal('_NEGATE_ALL', True), NonTerminal('_tr_expr')], 'all_except', RuleOptions(False, False, None)),
  118: Rule(NonTerminal('tr_operation'), [NonTerminal('reference'), Terminal('_MULT', True), Terminal('INT', False)], 'repeat_int', RuleOptions(False, False, None)),
  119: Rule(NonTerminal('tr_operation'), [NonTerminal('reference'), Terminal('_MULT', True), NonTerminal('_tr_expr_no_rec')], 'int_to_var_length', RuleOptions(False, False, None)),
  120: Rule(NonTerminal('tr_operation'), [NonTerminal('_tr_expr_no_int'), Terminal('_LROT', True), Terminal('INT', False)], 'rot_left', RuleOptions(False, False, None)),
  121: Rule(NonTerminal('tr_operation'), [NonTerminal('_tr_expr_no_int'), NonTerminal('_subt'), NonTerminal('_tr_expr_norec_int')], 'subt', RuleOptions(False, False, None)),
  122: Rule(NonTerminal('tr_operation'), [NonTerminal('_tr_expr_no_int'), Terminal('_RROT', True), Terminal('INT', False)], 'rot_right', RuleOptions(False, False, None)),
  123: Rule(NonTerminal('tr_operation'), [Terminal('STATE', False), Terminal('_MULT', True), NonTerminal('_tr_expr_no_rec')], 'int_to_var_length', RuleOptions(False, False, None)),
  124: Rule(NonTerminal('tr_operation'), [Terminal('STATE', False), Terminal('_MULT', True), Terminal('INT', False)], 'repeat_int', RuleOptions(False, False, None)),
  125: Rule(NonTerminal('tr_operation'), [Terminal('_NEGATE_LIVE', True), NonTerminal('_tr_expr')], 'live_except', RuleOptions(False, False, None)),
  126: Rule(NonTerminal('_ref_expr'), [NonTerminal('reference')], None, RuleOptions(False, False, None)),
  127: Rule(NonTerminal('_ref_expr'), [Terminal('STATE', False)], None, RuleOptions(False, False, None)),
  128: Rule(NonTerminal('_ref_expr'), [NonTerminal('_ref_expr_no_int')], None, RuleOptions(False, False, None)),
  129: Rule(NonTerminal('_ref_expr_norec_int'), [NonTerminal('_ref_expr_no_rec')], None, RuleOptions(False, False, None)),
  130: Rule(NonTerminal('_ref_expr_norec_int'), [NonTerminal('reference')], None, RuleOptions(False, False, None)),
  131: Rule(NonTerminal('_ref_expr_norec_int'), [Terminal('STATE', False)], None, RuleOptions(False, False, None)),
  132: Rule(NonTerminal('_ref_expr_no_int'), [NonTerminal('ref_operation')], None, RuleOptions(False, False, None)),
  133: Rule(NonTerminal('_ref_expr_no_int'), [NonTerminal('range')], None, RuleOptions(False, False, None)),
  134: Rule(NonTerminal('_ref_expr_no_int'), [Terminal('NAME', False)], None, RuleOptions(False, False, None)),
  135: Rule(NonTerminal('_ref_expr_no_int'), [NonTerminal('ref_var')], None, RuleOptions(False, False, None)),
  136: Rule(NonTerminal('_ref_expr_no_rec'), [NonTerminal('range')], None, RuleOptions(False, False, None)),
  137: Rule(NonTerminal('_ref_expr_no_rec'), [Terminal('NAME', False)], None, RuleOptions(False, False, None)),
  138: Rule(NonTerminal('_ref_expr_no_rec'), [NonTerminal('ref_var')], None, RuleOptions(False, False, None)),
  139: Rule(NonTerminal('ref_operation'), [NonTerminal('_ref_expr_no_int'), NonTerminal('_subt'), NonTerminal('_ref_expr_norec_int')], 'subt', RuleOptions(False, False, None)),
  140: Rule(NonTerminal('ref_operation'), [NonTerminal('reference'), Terminal('_MULT', True), Terminal('INT', False)], 'repeat_int', RuleOptions(False, False, None)),
  141: Rule(NonTerminal('ref_operation'), [Terminal('STATE', False), Terminal('_MULT', True), NonTerminal('_ref_expr_no_rec')], 'int_to_var_length', RuleOptions(False, False, None)),
  142: Rule(NonTerminal('ref_operation'), [NonTerminal('reference'), Terminal('_MULT', True), NonTerminal('_ref_expr_no_rec')], 'int_to_var_length', RuleOptions(False, False, None)),
  143: Rule(NonTerminal('ref_operation'), [NonTerminal('_ref_expr_no_int'), Terminal('_MULT', True), Terminal('INT', False)], 'repeat_var', RuleOptions(False, False, None)),
  144: Rule(NonTerminal('ref_operation'), [Terminal('_NEGATE_ALL', True), NonTerminal('_ref_expr')], 'all_except', RuleOptions(False, False, None)),
  145: Rule(NonTerminal('ref_operation'), [Terminal('STATE', False), Terminal('_MULT', True), Terminal('INT', False)], 'repeat_int', RuleOptions(False, False, None)),
  146: Rule(NonTerminal('ref_operation'), [NonTerminal('_ref_expr_no_int'), Terminal('_LROT', True), Terminal('INT', False)], 'rot_left', RuleOptions(False, False, None)),
  147: Rule(NonTerminal('ref_operation'), [NonTerminal('_ref_expr_no_int'), Terminal('_RROT', True), Terminal('INT', False)], 'rot_right', RuleOptions(False, False, None)),
  148: Rule(NonTerminal('ref_operation'), [Terminal('_NEGATE_LIVE', True), NonTerminal('_ref_expr')], 'live_except', RuleOptions(False, False, None)),
  149: Rule(NonTerminal('_aux_expr'), [NonTerminal('_aux_expr_no_int')], None, RuleOptions(False, False, None)),
  150: Rule(NonTerminal('_aux_expr'), [NonTerminal('aux_reference')], None, RuleOptions(False, False, None)),
  151: Rule(NonTerminal('_aux_expr'), [Terminal('STATE', False)], None, RuleOptions(False, False, None)),
  152: Rule(NonTerminal('_aux_expr_norec_int'), [NonTerminal('aux_reference')], None, RuleOptions(False, False, None)),
  153: Rule(NonTerminal('_aux_expr_norec_int'), [Terminal('STATE', False)], None, RuleOptions(False, False, None)),
  154: Rule(NonTerminal('_aux_expr_norec_int'), [NonTerminal('_aux_expr_no_rec')], None, RuleOptions(False, False, None)),
  155: Rule(NonTerminal('_aux_expr_no_int'), [NonTerminal('leave_alone_mult')], None, RuleOptions(False, False, None)),
  156: Rule(NonTerminal('_aux_expr_no_int'), [NonTerminal('aux_var')], None, RuleOptions(False, False, None)),
  157: Rule(NonTerminal('_aux_expr_no_int'), [NonTerminal('range')], None, RuleOptions(False, False, None)),
  158: Rule(NonTerminal('_aux_expr_no_int'), [NonTerminal('aux_operation')], None, RuleOptions(False, False, None)),
  159: Rule(NonTerminal('_aux_expr_no_int'), [Terminal('LEAVE_ALONE', False)], None, RuleOptions(False, False, None)),
  160: Rule(NonTerminal('_aux_expr_no_int'), [Terminal('NAME', False)], None, RuleOptions(False, False, None)),
  161: Rule(NonTerminal('_aux_expr_no_rec'), [NonTerminal('leave_alone_mult')], None, RuleOptions(False, False, None)),
  162: Rule(NonTerminal('_aux_expr_no_rec'), [NonTerminal('aux_var')], None, RuleOptions(False, False, None)),
  163: Rule(NonTerminal('_aux_expr_no_rec'), [NonTerminal('range')], None, RuleOptions(False, False, None)),
  164: Rule(NonTerminal('_aux_expr_no_rec'), [Terminal('LEAVE_ALONE', False)], None, RuleOptions(False, False, None)),
  165: Rule(NonTerminal('_aux_expr_no_rec'), [Terminal('NAME', False)], None, RuleOptions(False, False, None)),
  166: Rule(NonTerminal('aux_operation'), [Terminal('STATE', False), Terminal('_MULT', True), NonTerminal('_aux_expr_no_rec')], 'int_to_var_length', RuleOptions(False, False, None)),
  167: Rule(NonTerminal('aux_operation'), [Terminal('_NEGATE_ALL', True), NonTerminal('_aux_expr')], 'all_except', RuleOptions(False, False, None)),
  168: Rule(NonTerminal('aux_operation'), [NonTerminal('_aux_expr_no_int'), Terminal('_LROT', True), Terminal('INT', False)], 'rot_left', RuleOptions(False, False, None)),
  169: Rule(NonTerminal('aux_operation'), [NonTerminal('aux_reference'), Terminal('_MULT', True), NonTerminal('_aux_expr_no_rec')], 'int_to_var_length', RuleOptions(False, False, None)),
  170: Rule(NonTerminal('aux_operation'), [NonTerminal('aux_reference'), Terminal('_MULT', True), Terminal('INT', False)], 'repeat_int', RuleOptions(False, False, None)),
  171: Rule(NonTerminal('aux_operation'), [Terminal('STATE', False), Terminal('_MULT', True), Terminal('INT', False)], 'repeat_int', RuleOptions(False, False, None)),
  172: Rule(NonTerminal('aux_operation'), [NonTerminal('_aux_expr_no_int'), NonTerminal('_subt'), NonTerminal('_aux_expr_norec_int')], 'subt', RuleOptions(False, False, None)),
  173: Rule(NonTerminal('aux_operation'), [NonTerminal('_aux_expr_no_int'), Terminal('_RROT', True), Terminal('INT', False)], 'rot_right', RuleOptions(False, False, None)),
  174: Rule(NonTerminal('aux_operation'), [Terminal('_NEGATE_LIVE', True), NonTerminal('_aux_expr')], 'live_except', RuleOptions(False, False, None)),
  175: Rule(NonTerminal('aux_operation'), [NonTerminal('_aux_expr_no_int'), Terminal('_MULT', True), Terminal('INT', False)], 'repeat_var', RuleOptions(False, False, None)),
  176: Rule(NonTerminal('aux_reference'), [Terminal('LSQB', True), Terminal('COMPASS_DIR', False), Terminal('RSQB', True)], 'binding', RuleOptions(False, False, None)),
  177: Rule(NonTerminal('aux_reference'), [Terminal('LSQB', True), Terminal('COMPASS_DIR', False), Terminal('COLON', True), Terminal('_WS', True), NonTerminal('_aux_expr_no_int'), Terminal('RSQB', True)], 'mapping', RuleOptions(False, False, None)),
  178: Rule(NonTerminal('aux_reference'), [Terminal('LSQB', True), NonTerminal('_digit_bind'), Terminal('COLON', True), Terminal('_WS', True), NonTerminal('_aux_expr_no_int'), Terminal('RSQB', True)], 'mapping', RuleOptions(False, False, None)),
  179: Rule(NonTerminal('aux_reference'), [Terminal('LSQB', True), NonTerminal('_digit_bind'), Terminal('RSQB', True)], 'binding', RuleOptions(False, False, None)),
  180: Rule(NonTerminal('aux_reference'), [Terminal('LSQB', True), Terminal('COMPASS_DIR', False), Terminal('COLON', True), NonTerminal('_aux_expr_no_int'), Terminal('RSQB', True)], 'mapping', RuleOptions(False, False, None)),
  181: Rule(NonTerminal('aux_reference'), [Terminal('LSQB', True), NonTerminal('_digit_bind'), Terminal('COLON', True), NonTerminal('_aux_expr_no_int'), Terminal('RSQB', True)], 'mapping', RuleOptions(False, False, None)),
  182: Rule(NonTerminal('reference'), [Terminal('LSQB', True), Terminal('COMPASS_DIR', False), Terminal('RSQB', True)], 'binding', RuleOptions(False, False, None)),
  183: Rule(NonTerminal('reference'), [Terminal('LSQB', True), Terminal('COMPASS_DIR', False), Terminal('COLON', True), Terminal('_WS', True), NonTerminal('_ref_expr_no_int'), Terminal('RSQB', True)], 'mapping', RuleOptions(False, False, None)),
  184: Rule(NonTerminal('reference'), [Terminal('LSQB', True), Terminal('COMPASS_DIR', False), Terminal('COLON', True), NonTerminal('_ref_expr_no_int'), Terminal('RSQB', True)], 'mapping', RuleOptions(False, False, None)),
  185: Rule(NonTerminal('reference'), [Terminal('LSQB', True), NonTerminal('_digit_bind'), Terminal('COLON', True), NonTerminal('_ref_expr_no_int'), Terminal('RSQB', True)], 'mapping', RuleOptions(False, False, None)),
  186: Rule(NonTerminal('reference'), [Terminal('LSQB', True), NonTerminal('_digit_bind'), Terminal('RSQB', True)], 'binding', RuleOptions(False, False, None)),
  187: Rule(NonTerminal('reference'), [Terminal('LSQB', True), NonTerminal('_digit_bind'), Terminal('COLON', True), Terminal('_WS', True), NonTerminal('_ref_expr_no_int'), Terminal('RSQB', True)], 'mapping', RuleOptions(False, False, None)),
  188: Rule(NonTerminal('range'), [Terminal('STATE', False), Terminal('PLUS', True), Terminal('INT', False), Terminal('__ANON_2', True), Terminal('_WS', True), Terminal('STATE', False)], 'range_step', RuleOptions(False, False, None)),
  189: Rule(NonTerminal('range'), [Terminal('STATE', False), Terminal('_WS', True), Terminal('PLUS', True), Terminal('_WS', True), Terminal('INT', False), Terminal('_WS', True), Terminal('__ANON_2', True), Terminal('_WS', True), Terminal('STATE', False)], 'range_step', RuleOptions(False, False, None)),
  190: Rule(NonTerminal('range'), [Terminal('STATE', False), Terminal('_WS', True), Terminal('PLUS', True), Terminal('_WS', True), Terminal('INT', False), Terminal('__ANON_2', True), Terminal('STATE', False)], 'range_step', RuleOptions(False, False, None)),
  191: Rule(NonTerminal('range'), [Terminal('STATE', False), Terminal('_WS', True), Terminal('PLUS', True), Terminal('INT', False), Terminal('_WS', True), Terminal('__ANON_2', True), Terminal('STATE', False)], 'range_step', RuleOptions(False, False, None)),
  192: Rule(NonTerminal('range'), [Terminal('STATE', False), Terminal('PLUS', True), Terminal('INT', False), Terminal('_WS', True), Terminal('__ANON_2', True), Terminal('_WS', True), Terminal('STATE', False)], 'range_step', RuleOptions(False, False, None)),
  193: Rule(NonTerminal('range'), [Terminal('STATE', False), Terminal('_WS', True), Terminal('PLUS', True), Terminal('_WS', True), Terminal('INT', False), Terminal('_WS', True), Terminal('__ANON_2', True), Terminal('STATE', False)], 'range_step', RuleOptions(False, False, None)),
  194: Rule(NonTerminal('range'), [Terminal('STATE', False), Terminal('PLUS', True), Terminal('_WS', True), Terminal('INT', False), Terminal('__ANON_2', True), Terminal('_WS', True), Terminal('STATE', False)], 'range_step', RuleOptions(False, False, None)),
  195: Rule(NonTerminal('range'), [Terminal('STATE', False), Terminal('_WS', True), Terminal('__ANON_2', True), Terminal('_WS', True), Terminal('STATE', False)], None, RuleOptions(False, False, None)),
  196: Rule(NonTerminal('range'), [Terminal('STATE', False), Terminal('PLUS', True), Terminal('INT', False), Terminal('__ANON_2', True), Terminal('STATE', False)], 'range_step', RuleOptions(False, False, None)),
  197: Rule(NonTerminal('range'), [Terminal('STATE', False), Terminal('_WS', True), Terminal('PLUS', True), Terminal('INT', False), Terminal('_WS', True), Terminal('__ANON_2', True), Terminal('_WS', True), Terminal('STATE', False)], 'range_step', RuleOptions(False, False, None)),
  198: Rule(NonTerminal('range'), [Terminal('STATE', False), Terminal('_WS', True), Terminal('__ANON_2', True), Terminal('STATE', False)], None, RuleOptions(False, False, None)),
  199: Rule(NonTerminal('range'), [Terminal('STATE', False), Terminal('__ANON_2', True), Terminal('_WS', True), Terminal('STATE', False)], None, RuleOptions(False, False, None)),
  200: Rule(NonTerminal('range'), [Terminal('STATE', False), Terminal('_WS', True), Terminal('PLUS', True), Terminal('INT', False), Terminal('__ANON_2', True), Terminal('_WS', True), Terminal('STATE', False)], 'range_step', RuleOptions(False, False, None)),
  201: Rule(NonTerminal('range'), [Terminal('STATE', False), Terminal('__ANON_2', True), Terminal('STATE', False)], None, RuleOptions(False, False, None)),
  202: Rule(NonTerminal('range'), [Terminal('STATE', False), Terminal('PLUS', True), Terminal('INT', False), Terminal('_WS', True), Terminal('__ANON_2', True), Terminal('STATE', False)], 'range_step', RuleOptions(False, False, None)),
  203: Rule(NonTerminal('range'), [Terminal('STATE', False), Terminal('PLUS', True), Terminal('_WS', True), Terminal('INT', False), Terminal('_WS', True), Terminal('__ANON_2', True), Terminal('_WS', True), Terminal('STATE', False)], 'range_step', RuleOptions(False, False, None)),
  204: Rule(NonTerminal('range'), [Terminal('STATE', False), Terminal('PLUS', True), Terminal('_WS', True), Terminal('INT', False), Terminal('_WS', True), Terminal('__ANON_2', True), Terminal('STATE', False)], 'range_step', RuleOptions(False, False, None)),
  205: Rule(NonTerminal('range'), [Terminal('STATE', False), Terminal('_WS', True), Terminal('PLUS', True), Terminal('INT', False), Terminal('__ANON_2', True), Terminal('STATE', False)], 'range_step', RuleOptions(False, False, None)),
  206: Rule(NonTerminal('range'), [Terminal('STATE', False), Terminal('PLUS', True), Terminal('_WS', True), Terminal('INT', False), Terminal('__ANON_2', True), Terminal('STATE', False)], 'range_step', RuleOptions(False, False, None)),
  207: Rule(NonTerminal('range'), [Terminal('STATE', False), Terminal('_WS', True), Terminal('PLUS', True), Terminal('_WS', True), Terminal('INT', False), Terminal('__ANON_2', True), Terminal('_WS', True), Terminal('STATE', False)], 'range_step', RuleOptions(False, False, None)),
  208: Rule(NonTerminal('leave_alone_mult'), [Terminal('LEAVE_ALONE', False), Terminal('_MULT', True), Terminal('INT', False)], None, RuleOptions(False, False, None)),
  209: Rule(NonTerminal('_subt'), [Terminal('_SUBT', True)], None, RuleOptions(False, False, None)),
  210: Rule(NonTerminal('_subt'), [Terminal('_NEGATE_LIVE', True), Terminal('_WS', True)], None, RuleOptions(False, False, None)),
  211: Rule(NonTerminal('_subt'), [Terminal('_NEGATE_LIVE', True)], None, RuleOptions(False, False, None)),
  212: Rule(NonTerminal('_digit_bind'), [Terminal('__ANON_8', True)], None, RuleOptions(True, False, None)),
  213: Rule(NonTerminal('_digit_bind'), [Terminal('__ANON_4', True)], None, RuleOptions(True, False, None)),
  214: Rule(NonTerminal('_digit_bind'), [Terminal('__ANON_12', True)], None, RuleOptions(True, False, None)),
  215: Rule(NonTerminal('_digit_bind'), [Terminal('__ANON_6', True)], None, RuleOptions(True, False, None)),
  216: Rule(NonTerminal('_digit_bind'), [Terminal('__ANON_3', True)], None, RuleOptions(True, False, None)),
  217: Rule(NonTerminal('_digit_bind'), [Terminal('__ANON_11', True)], None, RuleOptions(True, False, None)),
  218: Rule(NonTerminal('_digit_bind'), [Terminal('__ANON_10', True)], None, RuleOptions(True, False, None)),
  219: Rule(NonTerminal('_digit_bind'), [Terminal('__ANON_7', True)], None, RuleOptions(True, False, None)),
  220: Rule(NonTerminal('_digit_bind'), [Terminal('__ANON_5', True)], None, RuleOptions(True, False, None)),
  221: Rule(NonTerminal('_digit_bind'), [Terminal('__ANON_9', True)], None, RuleOptions(True, False, None)),
  222: Rule(NonTerminal('hensel_rulestring'), [Terminal('__ANON_13', False)], None, RuleOptions(False, False, None)),
  223: Rule(NonTerminal('end_bs'), [Terminal('__ANON_14', False)], None, RuleOptions(False, False, None)),
  224: Rule(NonTerminal('comment'), [Terminal('__ANON_15', False)], None, RuleOptions(False, False, None)),
  225: Rule(NonTerminal('__anon_plus_0'), [NonTerminal('__anon_plus_0'), NonTerminal('comment')], None, None),
  226: Rule(NonTerminal('__anon_plus_0'), [NonTerminal('line'), Terminal('_NL', True)], None, None),
  227: Rule(NonTerminal('__anon_plus_0'), [NonTerminal('__anon_plus_0'), NonTerminal('line'), NonTerminal('end_bs'), Terminal('_NL', True)], None, None),
  228: Rule(NonTerminal('__anon_plus_0'), [Terminal('_WS', True), NonTerminal('comment')], None, None),
  229: Rule(NonTerminal('__anon_plus_0'), [NonTerminal('line'), NonTerminal('end_bs')], None, None),
  230: Rule(NonTerminal('__anon_plus_0'), [NonTerminal('comment'), Terminal('_NL', True)], None, None),
  231: Rule(NonTerminal('__anon_plus_0'), [NonTerminal('__anon_plus_0'), Terminal('_WS', True), NonTerminal('line'), Terminal('_NL', True)], None, None),
  232: Rule(NonTerminal('__anon_plus_0'), [NonTerminal('__anon_plus_0'), NonTerminal('line'), NonTerminal('end_bs')], None, None),
  233: Rule(NonTerminal('__anon_plus_0'), [NonTerminal('__anon_plus_0'), Terminal('_WS', True), NonTerminal('line'), NonTerminal('end_bs'), Terminal('_NL', True)], None, None),
  234: Rule(NonTerminal('__anon_plus_0'), [NonTerminal('__anon_plus_0'), NonTerminal('line')], None, None),
  235: Rule(NonTerminal('__anon_plus_0'), [Terminal('_WS', True), NonTerminal('line'), NonTerminal('end_bs'), Terminal('_NL', True)], None, None),
  236: Rule(NonTerminal('__anon_plus_0'), [NonTerminal('comment')], None, None),
  237: Rule(NonTerminal('__anon_plus_0'), [NonTerminal('__anon_plus_0'), Terminal('_WS', True), NonTerminal('line')], None, None),
  238: Rule(NonTerminal('__anon_plus_0'), [Terminal('_WS', True), NonTerminal('comment'), Terminal('_NL', True)], None, None),
  239: Rule(NonTerminal('__anon_plus_0'), [NonTerminal('__anon_plus_0'), NonTerminal('line'), Terminal('_NL', True)], None, None),
  240: Rule(NonTerminal('__anon_plus_0'), [NonTerminal('__anon_plus_0'), Terminal('_WS', True), NonTerminal('comment')], None, None),
  241: Rule(NonTerminal('__anon_plus_0'), [NonTerminal('__anon_plus_0'), NonTerminal('comment'), Terminal('_NL', True)], None, None),
  242: Rule(NonTerminal('__anon_plus_0'), [Terminal('_WS', True), NonTerminal('line'), NonTerminal('end_bs')], None, None),
  243: Rule(NonTerminal('__anon_plus_0'), [NonTerminal('__anon_plus_0'), Terminal('_WS', True), NonTerminal('line'), NonTerminal('end_bs')], None, None),
  244: Rule(NonTerminal('__anon_plus_0'), [NonTerminal('line')], None, None),
  245: Rule(NonTerminal('__anon_plus_0'), [NonTerminal('line'), NonTerminal('end_bs'), Terminal('_NL', True)], None, None),
  246: Rule(NonTerminal('__anon_plus_0'), [Terminal('_WS', True), NonTerminal('line')], None, None),
  247: Rule(NonTerminal('__anon_plus_0'), [NonTerminal('__anon_plus_0'), Terminal('_WS', True), NonTerminal('comment'), Terminal('_NL', True)], None, None),
  248: Rule(NonTerminal('__anon_plus_0'), [Terminal('_WS', True), NonTerminal('line'), Terminal('_NL', True)], None, None),
  249: Rule(NonTerminal('__anon_plus_1'), [NonTerminal('_sep'), NonTerminal('tr_state')], None, None),
  250: Rule(NonTerminal('__anon_plus_1'), [NonTerminal('__anon_plus_1'), NonTerminal('_sep'), NonTerminal('tr_state')], None, None),
  251: Rule(NonTerminal('__anon_star_2'), [NonTerminal('__anon_star_2'), Terminal('_WS', True), NonTerminal('symmetried_aux')], None, None),
  252: Rule(NonTerminal('__anon_star_2'), [NonTerminal('__anon_star_2'), Terminal('_WS', True), NonTerminal('auxiliary')], None, None),
  253: Rule(NonTerminal('__anon_star_2'), [Terminal('_WS', True), NonTerminal('auxiliary')], None, None),
  254: Rule(NonTerminal('__anon_star_2'), [Terminal('_WS', True), NonTerminal('symmetried_aux')], None, None),
  255: Rule(NonTerminal('__anon_star_3'), [Terminal('_WS', True), NonTerminal('auxiliary')], None, None),
  256: Rule(NonTerminal('__anon_star_3'), [NonTerminal('__anon_star_3'), Terminal('_WS', True), NonTerminal('auxiliary')], None, None),
  257: Rule(NonTerminal('__anon_star_4'), [Terminal('COMMA', True), NonTerminal('_expr')], None, None),
  258: Rule(NonTerminal('__anon_star_4'), [NonTerminal('__anon_star_4'), Terminal('COMMA', True), Terminal('_WS', True), NonTerminal('_expr')], None, None),
  259: Rule(NonTerminal('__anon_star_4'), [NonTerminal('__anon_star_4'), Terminal('COMMA', True), NonTerminal('_expr')], None, None),
  260: Rule(NonTerminal('__anon_star_4'), [Terminal('COMMA', True), Terminal('_WS', True), NonTerminal('_expr')], None, None),
  261: Rule(NonTerminal('__anon_star_5'), [Terminal('COMMA', True), Terminal('_WS', True), NonTerminal('_tr_expr')], None, None),
  262: Rule(NonTerminal('__anon_star_5'), [NonTerminal('__anon_star_5'), Terminal('COMMA', True), NonTerminal('_tr_expr')], None, None),
  263: Rule(NonTerminal('__anon_star_5'), [NonTerminal('__anon_star_5'), Terminal('COMMA', True), Terminal('_WS', True), NonTerminal('_tr_expr')], None, None),
  264: Rule(NonTerminal('__anon_star_5'), [Terminal('COMMA', True), NonTerminal('_tr_expr')], None, None),
  265: Rule(NonTerminal('__anon_star_6'), [NonTerminal('__anon_star_6'), Terminal('COMMA', True), NonTerminal('_ref_expr')], None, None),
  266: Rule(NonTerminal('__anon_star_6'), [Terminal('COMMA', True), Terminal('_WS', True), NonTerminal('_ref_expr')], None, None),
  267: Rule(NonTerminal('__anon_star_6'), [Terminal('COMMA', True), NonTerminal('_ref_expr')], None, None),
  268: Rule(NonTerminal('__anon_star_6'), [NonTerminal('__anon_star_6'), Terminal('COMMA', True), Terminal('_WS', True), NonTerminal('_ref_expr')], None, None),
  269: Rule(NonTerminal('__anon_star_7'), [Terminal('COMMA', True), Terminal('_WS', True), NonTerminal('_aux_expr')], None, None),
  270: Rule(NonTerminal('__anon_star_7'), [NonTerminal('__anon_star_7'), Terminal('COMMA', True), NonTerminal('_aux_expr')], None, None),
  271: Rule(NonTerminal('__anon_star_7'), [Terminal('COMMA', True), NonTerminal('_aux_expr')], None, None),
  272: Rule(NonTerminal('__anon_star_7'), [NonTerminal('__anon_star_7'), Terminal('COMMA', True), Terminal('_WS', True), NonTerminal('_aux_expr')], None, None),
}
parse_tree_builder = ParseTreeBuilder(RULES.values(), Tree)
class ParseTable: pass
parse_table = ParseTable()
STATES = {
  0: {0: (0, 1), 1: (0, 2), 2: (0, 3), 3: (0, 4), 4: (0, 5), 5: (0, 6), 6: (0, 7), 7: (0, 8), 8: (0, 9), 9: (0, 10), 10: (0, 11), 11: (0, 12), 12: (0, 13), 13: (0, 14), 14: (0, 15), 15: (0, 16), 16: (0, 17), 17: (0, 18), 18: (0, 19), 19: (0, 20), 20: (0, 21)},
  1: {18: (1, 103), 21: (0, 22), 22: (1, 103), 7: (1, 103), 5: (1, 103), 23: (1, 103), 24: (1, 103), 13: (1, 103), 16: (1, 103), 3: (1, 103), 4: (1, 103), 9: (1, 103), 25: (1, 103), 26: (1, 103), 27: (1, 103), 28: (1, 103), 29: (1, 103), 30: (1, 103), 31: (1, 103), 32: (1, 103), 33: (1, 103), 34: (1, 103), 35: (1, 103), 19: (1, 103), 36: (1, 103)},
  2: {31: (1, 0), 0: (0, 1), 2: (0, 3), 3: (0, 4), 4: (0, 5), 6: (0, 23), 10: (0, 24), 7: (0, 8), 5: (0, 25), 8: (0, 9), 9: (0, 10), 12: (0, 13), 16: (0, 17), 13: (0, 14), 14: (0, 15), 15: (0, 16), 17: (0, 18), 18: (0, 19), 19: (0, 20), 20: (0, 21)},
  3: {18: (1, 105), 21: (0, 28), 22: (0, 29), 7: (1, 105), 5: (1, 105), 23: (1, 105), 24: (0, 31), 13: (1, 105), 16: (1, 105), 3: (1, 105), 4: (1, 105), 9: (0, 26), 25: (1, 105), 26: (1, 105), 27: (1, 105), 28: (1, 105), 29: (1, 105), 30: (1, 105), 31: (1, 105), 32: (1, 105), 33: (1, 105), 34: (0, 27), 35: (1, 105), 19: (1, 105), 36: (1, 105), 37: (0, 30)},
  4: {18: (1, 111), 21: (1, 111), 22: (1, 111), 7: (1, 111), 5: (0, 32), 23: (1, 111), 24: (1, 111), 13: (1, 111), 16: (1, 111), 3: (1, 111), 4: (1, 111), 9: (1, 111), 25: (1, 111), 26: (1, 111), 27: (1, 111), 28: (1, 111), 29: (1, 111), 30: (1, 111), 31: (1, 111), 32: (1, 111), 33: (1, 111), 34: (1, 111), 35: (1, 111), 19: (1, 111), 36: (1, 111), 38: (0, 33), 39: (0, 34)},
  5: {18: (1, 104), 21: (0, 36), 22: (1, 104), 7: (1, 104), 5: (0, 35), 23: (1, 104), 24: (1, 104), 13: (1, 104), 16: (1, 104), 3: (1, 104), 4: (1, 104), 9: (1, 104), 25: (1, 104), 26: (1, 104), 27: (1, 104), 28: (1, 104), 29: (1, 104), 30: (1, 104), 31: (1, 104), 32: (1, 104), 33: (1, 104), 34: (1, 104), 35: (1, 104), 19: (1, 104), 36: (1, 104), 40: (0, 37), 41: (0, 38)},
  6: {0: (0, 1), 2: (0, 3), 3: (0, 4), 4: (0, 5), 10: (0, 39), 7: (0, 8), 8: (0, 9), 9: (0, 10), 12: (0, 13), 16: (0, 17), 13: (0, 14), 6: (0, 40), 14: (0, 15), 15: (0, 16), 17: (0, 18), 18: (0, 19), 19: (0, 20), 20: (0, 21)},
  7: {13: (1, 236), 18: (1, 236), 31: (1, 236), 19: (1, 236), 16: (1, 236), 3: (1, 236), 7: (1, 236), 5: (1, 236), 4: (1, 236), 9: (1, 236), 23: (0, 41)},
  8: {42: (0, 42), 43: (0, 43), 44: (0, 44), 45: (0, 45), 46: (0, 46), 47: (0, 47), 48: (0, 48), 49: (0, 49), 50: (0, 50), 51: (0, 51), 52: (0, 52), 53: (0, 53)},
  9: {18: (1, 10), 7: (1, 10), 31: (1, 10), 5: (1, 10), 32: (1, 10), 23: (1, 10), 13: (1, 10), 19: (1, 10), 16: (1, 10), 3: (1, 10), 4: (1, 10), 9: (1, 10), 54: (0, 54), 30: (0, 55), 55: (0, 56), 56: (0, 57), 36: (0, 58)},
  10: {4: (0, 5), 0: (0, 1), 2: (0, 3), 14: (0, 15), 15: (0, 59), 16: (0, 17), 17: (0, 18), 7: (0, 8), 9: (0, 10), 18: (0, 19), 3: (0, 60), 20: (0, 21)},
  11: {13: (1, 244), 18: (1, 244), 31: (1, 244), 19: (1, 244), 16: (1, 244), 3: (1, 244), 7: (1, 244), 5: (1, 244), 4: (1, 244), 9: (1, 244), 32: (0, 61), 57: (0, 62), 23: (0, 63)},
  12: {31: (0, 64)},
  13: {18: (1, 3), 7: (1, 3), 31: (1, 3), 5: (1, 3), 32: (1, 3), 23: (1, 3), 13: (1, 3), 19: (1, 3), 16: (1, 3), 3: (1, 3), 4: (1, 3), 9: (1, 3), 54: (0, 65), 30: (0, 55), 55: (0, 56), 56: (0, 57), 36: (0, 58)},
  14: {18: (1, 224), 7: (1, 224), 31: (1, 224), 5: (1, 224), 23: (1, 224), 13: (1, 224), 19: (1, 224), 16: (1, 224), 3: (1, 224), 4: (1, 224), 9: (1, 224)},
  15: {18: (1, 110), 21: (1, 110), 22: (1, 110), 7: (1, 110), 5: (1, 110), 23: (1, 110), 24: (1, 110), 13: (1, 110), 16: (1, 110), 3: (1, 110), 4: (1, 110), 9: (1, 110), 25: (1, 110), 26: (1, 110), 27: (1, 110), 28: (1, 110), 29: (1, 110), 30: (1, 110), 31: (1, 110), 32: (1, 110), 33: (1, 110), 34: (1, 110), 35: (1, 110), 19: (1, 110), 36: (1, 110)},
  16: {58: (0, 66), 59: (0, 67), 28: (0, 68), 25: (0, 69)},
  17: {14: (0, 70), 4: (0, 5), 0: (0, 1), 15: (0, 71), 2: (0, 3), 16: (0, 17), 17: (0, 18), 7: (0, 8), 9: (0, 10), 18: (0, 19), 3: (0, 60), 20: (0, 21)},
  18: {18: (1, 109), 21: (1, 109), 22: (1, 109), 7: (1, 109), 5: (1, 109), 23: (1, 109), 24: (1, 109), 13: (1, 109), 16: (1, 109), 3: (1, 109), 4: (1, 109), 9: (1, 109), 25: (1, 109), 26: (1, 109), 27: (1, 109), 28: (1, 109), 29: (1, 109), 30: (1, 109), 31: (1, 109), 32: (1, 109), 33: (1, 109), 34: (1, 109), 35: (1, 109), 19: (1, 109), 36: (1, 109)},
  19: {4: (0, 5), 0: (0, 1), 2: (0, 3), 14: (0, 15), 15: (0, 72), 16: (0, 17), 17: (0, 18), 7: (0, 8), 9: (0, 10), 18: (0, 19), 3: (0, 60), 20: (0, 21)},
  20: {4: (0, 73), 60: (0, 74), 9: (0, 75), 16: (0, 76), 18: (0, 77), 3: (0, 78), 61: (0, 79), 14: (0, 80), 62: (0, 81)},
  21: {18: (1, 112), 21: (1, 112), 22: (1, 112), 7: (1, 112), 5: (1, 112), 23: (1, 112), 24: (1, 112), 13: (1, 112), 16: (1, 112), 3: (1, 112), 4: (1, 112), 9: (1, 112), 25: (1, 112), 26: (1, 112), 27: (1, 112), 28: (1, 112), 29: (1, 112), 30: (1, 112), 31: (1, 112), 32: (1, 112), 33: (1, 112), 34: (1, 112), 35: (1, 112), 19: (1, 112), 36: (1, 112)},
  22: {4: (0, 82), 17: (0, 83), 63: (0, 84), 3: (0, 85), 16: (0, 17), 64: (0, 86), 14: (0, 87)},
  23: {13: (1, 225), 18: (1, 225), 31: (1, 225), 19: (1, 225), 16: (1, 225), 3: (1, 225), 7: (1, 225), 5: (1, 225), 4: (1, 225), 9: (1, 225), 23: (0, 88)},
  24: {13: (1, 234), 18: (1, 234), 31: (1, 234), 19: (1, 234), 16: (1, 234), 3: (1, 234), 7: (1, 234), 5: (1, 234), 4: (1, 234), 9: (1, 234), 32: (0, 61), 57: (0, 89), 23: (0, 90)},
  25: {10: (0, 91), 0: (0, 1), 2: (0, 3), 3: (0, 4), 4: (0, 5), 7: (0, 8), 8: (0, 9), 9: (0, 10), 6: (0, 92), 12: (0, 13), 16: (0, 17), 13: (0, 14), 14: (0, 15), 15: (0, 16), 17: (0, 18), 18: (0, 19), 19: (0, 20), 20: (0, 21)},
  26: {65: (1, 211), 16: (1, 211), 3: (1, 211), 7: (1, 211), 4: (1, 211), 5: (0, 93)},
  27: {64: (0, 94)},
  28: {64: (0, 95)},
  29: {65: (1, 209), 16: (1, 209), 3: (1, 209), 7: (1, 209), 4: (1, 209)},
  30: {4: (0, 96), 17: (0, 83), 3: (0, 85), 63: (0, 97), 16: (0, 17), 7: (0, 8), 14: (0, 87), 0: (0, 98), 66: (0, 99)},
  31: {64: (0, 100)},
  32: {38: (0, 101)},
  33: {4: (0, 102), 60: (0, 103), 9: (0, 75), 16: (0, 76), 18: (0, 77), 5: (0, 104), 3: (0, 78), 67: (0, 105), 61: (0, 79), 14: (0, 80), 62: (0, 81)},
  34: {68: (0, 106), 5: (0, 107)},
  35: {40: (0, 108), 41: (0, 109)},
  36: {4: (0, 82), 17: (0, 83), 3: (0, 85), 16: (0, 17), 64: (0, 110), 63: (0, 111), 14: (0, 87)},
  37: {64: (0, 112), 5: (0, 113)},
  38: {4: (0, 114), 5: (0, 115)},
  39: {13: (1, 246), 18: (1, 246), 31: (1, 246), 19: (1, 246), 16: (1, 246), 3: (1, 246), 7: (1, 246), 5: (1, 246), 4: (1, 246), 9: (1, 246), 32: (0, 61), 23: (0, 116), 57: (0, 117)},
  40: {13: (1, 228), 18: (1, 228), 31: (1, 228), 19: (1, 228), 16: (1, 228), 3: (1, 228), 7: (1, 228), 5: (1, 228), 4: (1, 228), 9: (1, 228), 23: (0, 118)},
  41: {13: (1, 230), 18: (1, 230), 31: (1, 230), 19: (1, 230), 16: (1, 230), 3: (1, 230), 7: (1, 230), 5: (1, 230), 4: (1, 230), 9: (1, 230)},
  42: {39: (0, 119), 26: (0, 120)},
  43: {26: (1, 217), 39: (1, 217)},
  44: {26: (1, 220), 39: (1, 220)},
  45: {26: (1, 214), 39: (1, 214)},
  46: {39: (0, 121), 26: (0, 122)},
  47: {26: (1, 219), 39: (1, 219)},
  48: {26: (1, 213), 39: (1, 213)},
  49: {26: (1, 215), 39: (1, 215)},
  50: {26: (1, 216), 39: (1, 216)},
  51: {26: (1, 218), 39: (1, 218)},
  52: {26: (1, 212), 39: (1, 212)},
  53: {26: (1, 221), 39: (1, 221)},
  54: {18: (1, 2), 7: (1, 2), 31: (1, 2), 5: (1, 2), 32: (1, 2), 23: (1, 2), 13: (1, 2), 19: (1, 2), 16: (1, 2), 3: (1, 2), 4: (1, 2), 9: (1, 2)},
  55: {69: (0, 123), 70: (0, 124), 71: (0, 125), 72: (0, 126), 46: (0, 127), 73: (0, 128)},
  56: {18: (1, 37), 7: (1, 37), 31: (1, 37), 5: (1, 37), 32: (1, 37), 23: (1, 37), 13: (1, 37), 19: (1, 37), 16: (1, 37), 3: (1, 37), 4: (1, 37), 9: (1, 37), 56: (0, 129), 30: (0, 55)},
  57: {18: (1, 36), 7: (1, 36), 31: (1, 36), 5: (1, 36), 32: (1, 36), 23: (1, 36), 13: (1, 36), 19: (1, 36), 16: (1, 36), 3: (1, 36), 4: (1, 36), 9: (1, 36), 55: (0, 130), 36: (0, 58)},
  58: {70: (0, 124), 71: (0, 125), 72: (0, 126), 46: (0, 127), 69: (0, 131), 73: (0, 128)},
  59: {18: (1, 125), 21: (1, 125), 22: (1, 125), 7: (1, 125), 5: (1, 125), 23: (1, 125), 24: (1, 125), 13: (1, 125), 16: (1, 125), 3: (1, 125), 4: (1, 125), 9: (1, 125), 25: (1, 125), 26: (1, 125), 27: (1, 125), 28: (1, 125), 29: (1, 125), 30: (1, 125), 31: (1, 125), 32: (1, 125), 33: (1, 125), 34: (1, 125), 35: (1, 125), 19: (1, 125), 36: (1, 125)},
  60: {18: (1, 111), 21: (1, 111), 22: (1, 111), 7: (1, 111), 5: (1, 111), 23: (1, 111), 24: (1, 111), 13: (1, 111), 16: (1, 111), 3: (1, 111), 4: (1, 111), 9: (1, 111), 25: (1, 111), 26: (1, 111), 27: (1, 111), 28: (1, 111), 29: (1, 111), 30: (1, 111), 31: (1, 111), 32: (1, 111), 33: (1, 111), 34: (1, 111), 35: (1, 111), 19: (1, 111), 36: (1, 111)},
  61: {18: (1, 223), 7: (1, 223), 31: (1, 223), 5: (1, 223), 23: (1, 223), 13: (1, 223), 19: (1, 223), 16: (1, 223), 3: (1, 223), 4: (1, 223), 9: (1, 223)},
  62: {13: (1, 229), 18: (1, 229), 31: (1, 229), 19: (1, 229), 16: (1, 229), 3: (1, 229), 7: (1, 229), 5: (1, 229), 4: (1, 229), 9: (1, 229), 23: (0, 132)},
  63: {13: (1, 226), 18: (1, 226), 31: (1, 226), 19: (1, 226), 16: (1, 226), 3: (1, 226), 7: (1, 226), 5: (1, 226), 4: (1, 226), 9: (1, 226)},
  64: {},
  65: {18: (1, 11), 7: (1, 11), 31: (1, 11), 5: (1, 11), 32: (1, 11), 23: (1, 11), 13: (1, 11), 19: (1, 11), 16: (1, 11), 3: (1, 11), 4: (1, 11), 9: (1, 11)},
  66: {74: (0, 133), 4: (0, 5), 75: (0, 134), 0: (0, 1), 76: (0, 135), 2: (0, 3), 16: (0, 17), 77: (0, 136), 14: (0, 15), 17: (0, 18), 7: (0, 137), 46: (0, 138), 9: (0, 10), 18: (0, 19), 15: (0, 139), 3: (0, 60), 78: (0, 140), 20: (0, 21)},
  67: {28: (0, 68), 58: (0, 141), 25: (0, 69)},
  68: {18: (1, 31), 16: (1, 31), 3: (1, 31), 75: (1, 31), 7: (1, 31), 46: (1, 31), 4: (1, 31), 9: (1, 31), 5: (0, 142)},
  69: {18: (1, 30), 16: (1, 30), 3: (1, 30), 75: (1, 30), 7: (1, 30), 46: (1, 30), 4: (1, 30), 9: (1, 30), 5: (0, 143)},
  70: {18: (1, 110), 21: (1, 110), 22: (1, 110), 7: (1, 110), 5: (1, 110), 23: (1, 110), 24: (1, 110), 13: (1, 110), 16: (1, 110), 3: (1, 110), 4: (1, 110), 9: (1, 110), 25: (1, 110), 26: (1, 110), 27: (1, 110), 28: (1, 110), 29: (0, 144), 30: (1, 110), 31: (1, 110), 32: (1, 110), 33: (1, 110), 34: (1, 110), 35: (1, 110), 19: (1, 110), 36: (1, 110)},
  71: {79: (0, 145), 25: (0, 146), 29: (0, 147)},
  72: {18: (1, 117), 21: (1, 117), 22: (1, 117), 7: (1, 117), 5: (1, 117), 23: (1, 117), 24: (1, 117), 13: (1, 117), 16: (1, 117), 3: (1, 117), 4: (1, 117), 9: (1, 117), 25: (1, 117), 26: (1, 117), 27: (1, 117), 28: (1, 117), 29: (1, 117), 30: (1, 117), 31: (1, 117), 32: (1, 117), 33: (1, 117), 34: (1, 117), 35: (1, 117), 19: (1, 117), 36: (1, 117)},
  73: {5: (0, 35), 40: (0, 37), 41: (0, 38), 21: (0, 148)},
  74: {18: (1, 8), 7: (1, 8), 31: (1, 8), 5: (1, 8), 32: (1, 8), 23: (1, 8), 13: (1, 8), 19: (1, 8), 16: (1, 8), 3: (1, 8), 4: (1, 8), 9: (0, 26), 37: (0, 149), 34: (0, 150), 21: (0, 151), 22: (0, 29), 24: (0, 152)},
  75: {4: (0, 102), 60: (0, 103), 9: (0, 75), 16: (0, 76), 18: (0, 77), 67: (0, 153), 3: (0, 78), 61: (0, 79), 14: (0, 80), 62: (0, 81)},
  76: {4: (0, 102), 60: (0, 103), 9: (0, 75), 16: (0, 76), 18: (0, 77), 14: (0, 154), 3: (0, 78), 67: (0, 155), 61: (0, 79), 62: (0, 81)},
  77: {4: (0, 102), 60: (0, 103), 9: (0, 75), 16: (0, 76), 18: (0, 77), 3: (0, 78), 61: (0, 79), 14: (0, 80), 67: (0, 156), 62: (0, 81)},
  78: {18: (1, 91), 21: (1, 91), 22: (1, 91), 25: (1, 91), 7: (1, 91), 29: (1, 91), 31: (1, 91), 5: (1, 91), 32: (1, 91), 23: (1, 91), 24: (1, 91), 13: (1, 91), 34: (1, 91), 19: (1, 91), 16: (1, 91), 3: (1, 91), 4: (1, 91), 9: (1, 91)},
  79: {18: (1, 89), 21: (1, 89), 22: (1, 89), 25: (1, 89), 7: (1, 89), 29: (1, 89), 31: (1, 89), 5: (1, 89), 32: (1, 89), 23: (1, 89), 24: (1, 89), 13: (1, 89), 34: (1, 89), 19: (1, 89), 16: (1, 89), 3: (1, 89), 4: (1, 89), 9: (1, 89)},
  80: {18: (1, 88), 21: (1, 88), 22: (1, 88), 25: (1, 88), 7: (1, 88), 29: (1, 88), 31: (1, 88), 5: (1, 88), 32: (1, 88), 23: (1, 88), 24: (1, 88), 13: (1, 88), 34: (1, 88), 19: (1, 88), 16: (1, 88), 3: (1, 88), 4: (1, 88), 9: (1, 88)},
  81: {18: (1, 90), 21: (1, 90), 22: (1, 90), 25: (1, 90), 7: (1, 90), 29: (1, 90), 31: (1, 90), 5: (1, 90), 32: (1, 90), 23: (1, 90), 24: (1, 90), 13: (1, 90), 34: (1, 90), 19: (1, 90), 16: (1, 90), 3: (1, 90), 4: (1, 90), 9: (1, 90)},
  82: {5: (0, 35), 40: (0, 37), 41: (0, 38)},
  83: {18: (1, 113), 21: (1, 113), 22: (1, 113), 7: (1, 113), 5: (1, 113), 23: (1, 113), 24: (1, 113), 13: (1, 113), 16: (1, 113), 3: (1, 113), 4: (1, 113), 9: (1, 113), 25: (1, 113), 26: (1, 113), 27: (1, 113), 28: (1, 113), 29: (1, 113), 30: (1, 113), 31: (1, 113), 32: (1, 113), 33: (1, 113), 34: (1, 113), 35: (1, 113), 19: (1, 113), 36: (1, 113)},
  84: {18: (1, 119), 21: (1, 119), 22: (1, 119), 7: (1, 119), 5: (1, 119), 23: (1, 119), 24: (1, 119), 13: (1, 119), 16: (1, 119), 3: (1, 119), 4: (1, 119), 9: (1, 119), 25: (1, 119), 26: (1, 119), 27: (1, 119), 28: (1, 119), 29: (1, 119), 30: (1, 119), 31: (1, 119), 32: (1, 119), 33: (1, 119), 34: (1, 119), 35: (1, 119), 19: (1, 119), 36: (1, 119)},
  85: {18: (1, 115), 21: (1, 115), 22: (1, 115), 7: (1, 115), 5: (1, 115), 23: (1, 115), 24: (1, 115), 13: (1, 115), 16: (1, 115), 3: (1, 115), 4: (1, 115), 9: (1, 115), 25: (1, 115), 26: (1, 115), 27: (1, 115), 28: (1, 115), 29: (1, 115), 30: (1, 115), 31: (1, 115), 32: (1, 115), 33: (1, 115), 34: (1, 115), 35: (1, 115), 19: (1, 115), 36: (1, 115)},
  86: {18: (1, 118), 21: (1, 118), 22: (1, 118), 7: (1, 118), 5: (1, 118), 23: (1, 118), 24: (1, 118), 13: (1, 118), 16: (1, 118), 3: (1, 118), 4: (1, 118), 9: (1, 118), 25: (1, 118), 26: (1, 118), 27: (1, 118), 28: (1, 118), 29: (1, 118), 30: (1, 118), 31: (1, 118), 32: (1, 118), 33: (1, 118), 34: (1, 118), 35: (1, 118), 19: (1, 118), 36: (1, 118)},
  87: {18: (1, 114), 21: (1, 114), 22: (1, 114), 7: (1, 114), 5: (1, 114), 23: (1, 114), 24: (1, 114), 13: (1, 114), 16: (1, 114), 3: (1, 114), 4: (1, 114), 9: (1, 114), 25: (1, 114), 26: (1, 114), 27: (1, 114), 28: (1, 114), 29: (1, 114), 30: (1, 114), 31: (1, 114), 32: (1, 114), 33: (1, 114), 34: (1, 114), 35: (1, 114), 19: (1, 114), 36: (1, 114)},
  88: {13: (1, 241), 18: (1, 241), 31: (1, 241), 19: (1, 241), 16: (1, 241), 3: (1, 241), 7: (1, 241), 5: (1, 241), 4: (1, 241), 9: (1, 241)},
  89: {13: (1, 232), 18: (1, 232), 31: (1, 232), 19: (1, 232), 16: (1, 232), 3: (1, 232), 7: (1, 232), 5: (1, 232), 4: (1, 232), 9: (1, 232), 23: (0, 157)},
  90: {13: (1, 239), 18: (1, 239), 31: (1, 239), 19: (1, 239), 16: (1, 239), 3: (1, 239), 7: (1, 239), 5: (1, 239), 4: (1, 239), 9: (1, 239)},
  91: {13: (1, 237), 18: (1, 237), 31: (1, 237), 19: (1, 237), 16: (1, 237), 3: (1, 237), 7: (1, 237), 5: (1, 237), 4: (1, 237), 9: (1, 237), 57: (0, 158), 32: (0, 61), 23: (0, 159)},
  92: {13: (1, 240), 18: (1, 240), 31: (1, 240), 19: (1, 240), 16: (1, 240), 3: (1, 240), 7: (1, 240), 5: (1, 240), 4: (1, 240), 9: (1, 240), 23: (0, 160)},
  93: {65: (1, 210), 16: (1, 210), 3: (1, 210), 7: (1, 210), 4: (1, 210)},
  94: {18: (1, 122), 21: (1, 122), 22: (1, 122), 7: (1, 122), 5: (1, 122), 23: (1, 122), 24: (1, 122), 13: (1, 122), 16: (1, 122), 3: (1, 122), 4: (1, 122), 9: (1, 122), 25: (1, 122), 26: (1, 122), 27: (1, 122), 28: (1, 122), 29: (1, 122), 30: (1, 122), 31: (1, 122), 32: (1, 122), 33: (1, 122), 34: (1, 122), 35: (1, 122), 19: (1, 122), 36: (1, 122)},
  95: {18: (1, 116), 21: (1, 116), 22: (1, 116), 7: (1, 116), 5: (1, 116), 23: (1, 116), 24: (1, 116), 13: (1, 116), 16: (1, 116), 3: (1, 116), 4: (1, 116), 9: (1, 116), 25: (1, 116), 26: (1, 116), 27: (1, 116), 28: (1, 116), 29: (1, 116), 30: (1, 116), 31: (1, 116), 32: (1, 116), 33: (1, 116), 34: (1, 116), 35: (1, 116), 19: (1, 116), 36: (1, 116)},
  96: {18: (1, 108), 21: (1, 108), 22: (1, 108), 7: (1, 108), 5: (0, 35), 23: (1, 108), 24: (1, 108), 13: (1, 108), 16: (1, 108), 3: (1, 108), 4: (1, 108), 9: (1, 108), 25: (1, 108), 26: (1, 108), 27: (1, 108), 28: (1, 108), 29: (1, 108), 30: (1, 108), 31: (1, 108), 32: (1, 108), 33: (1, 108), 34: (1, 108), 35: (1, 108), 19: (1, 108), 36: (1, 108), 40: (0, 37), 41: (0, 38)},
  97: {18: (1, 106), 21: (1, 106), 22: (1, 106), 7: (1, 106), 5: (1, 106), 23: (1, 106), 24: (1, 106), 13: (1, 106), 16: (1, 106), 3: (1, 106), 4: (1, 106), 9: (1, 106), 25: (1, 106), 26: (1, 106), 27: (1, 106), 28: (1, 106), 29: (1, 106), 30: (1, 106), 31: (1, 106), 32: (1, 106), 33: (1, 106), 34: (1, 106), 35: (1, 106), 19: (1, 106), 36: (1, 106)},
  98: {18: (1, 107), 21: (1, 107), 22: (1, 107), 7: (1, 107), 5: (1, 107), 23: (1, 107), 24: (1, 107), 13: (1, 107), 16: (1, 107), 3: (1, 107), 4: (1, 107), 9: (1, 107), 25: (1, 107), 26: (1, 107), 27: (1, 107), 28: (1, 107), 29: (1, 107), 30: (1, 107), 31: (1, 107), 32: (1, 107), 33: (1, 107), 34: (1, 107), 35: (1, 107), 19: (1, 107), 36: (1, 107)},
  99: {18: (1, 121), 21: (1, 121), 22: (1, 121), 7: (1, 121), 5: (1, 121), 23: (1, 121), 24: (1, 121), 13: (1, 121), 16: (1, 121), 3: (1, 121), 4: (1, 121), 9: (1, 121), 25: (1, 121), 26: (1, 121), 27: (1, 121), 28: (1, 121), 29: (1, 121), 30: (1, 121), 31: (1, 121), 32: (1, 121), 33: (1, 121), 34: (1, 121), 35: (1, 121), 19: (1, 121), 36: (1, 121)},
  100: {18: (1, 120), 21: (1, 120), 22: (1, 120), 7: (1, 120), 5: (1, 120), 23: (1, 120), 24: (1, 120), 13: (1, 120), 16: (1, 120), 3: (1, 120), 4: (1, 120), 9: (1, 120), 25: (1, 120), 26: (1, 120), 27: (1, 120), 28: (1, 120), 29: (1, 120), 30: (1, 120), 31: (1, 120), 32: (1, 120), 33: (1, 120), 34: (1, 120), 35: (1, 120), 19: (1, 120), 36: (1, 120)},
  101: {4: (0, 102), 60: (0, 103), 9: (0, 75), 67: (0, 161), 16: (0, 76), 18: (0, 77), 3: (0, 78), 5: (0, 162), 61: (0, 79), 14: (0, 80), 62: (0, 81)},
  102: {18: (1, 85), 21: (0, 148), 22: (1, 85), 25: (1, 85), 7: (1, 85), 29: (1, 85), 31: (1, 85), 5: (0, 35), 23: (1, 85), 32: (1, 85), 24: (1, 85), 13: (1, 85), 34: (1, 85), 19: (1, 85), 16: (1, 85), 3: (1, 85), 4: (1, 85), 9: (1, 85), 40: (0, 37), 41: (0, 38)},
  103: {18: (1, 84), 21: (0, 151), 22: (0, 29), 25: (1, 84), 7: (1, 84), 29: (1, 84), 31: (1, 84), 5: (1, 84), 23: (1, 84), 32: (1, 84), 24: (0, 152), 13: (1, 84), 34: (0, 150), 19: (1, 84), 16: (1, 84), 3: (1, 84), 4: (1, 84), 9: (0, 26), 37: (0, 149)},
  104: {4: (0, 102), 60: (0, 103), 9: (0, 75), 16: (0, 76), 18: (0, 77), 3: (0, 78), 61: (0, 79), 14: (0, 80), 67: (0, 163), 62: (0, 81)},
  105: {18: (1, 4), 7: (1, 4), 31: (1, 4), 5: (1, 4), 32: (1, 4), 23: (1, 4), 13: (1, 4), 19: (1, 4), 16: (1, 4), 3: (1, 4), 4: (1, 4), 9: (1, 4)},
  106: {18: (1, 9), 7: (1, 9), 31: (1, 9), 5: (1, 9), 32: (1, 9), 23: (1, 9), 13: (1, 9), 19: (1, 9), 16: (1, 9), 3: (1, 9), 4: (1, 9), 9: (1, 9)},
  107: {68: (0, 164)},
  108: {5: (0, 165), 64: (0, 166)},
  109: {4: (0, 167), 5: (0, 168)},
  110: {18: (1, 124), 21: (1, 124), 22: (1, 124), 7: (1, 124), 5: (1, 124), 23: (1, 124), 24: (1, 124), 13: (1, 124), 16: (1, 124), 3: (1, 124), 4: (1, 124), 9: (1, 124), 25: (1, 124), 26: (1, 124), 27: (1, 124), 28: (1, 124), 29: (1, 124), 30: (1, 124), 31: (1, 124), 32: (1, 124), 33: (1, 124), 34: (1, 124), 35: (1, 124), 19: (1, 124), 36: (1, 124)},
  111: {18: (1, 123), 21: (1, 123), 22: (1, 123), 7: (1, 123), 5: (1, 123), 23: (1, 123), 24: (1, 123), 13: (1, 123), 16: (1, 123), 3: (1, 123), 4: (1, 123), 9: (1, 123), 25: (1, 123), 26: (1, 123), 27: (1, 123), 28: (1, 123), 29: (1, 123), 30: (1, 123), 31: (1, 123), 32: (1, 123), 33: (1, 123), 34: (1, 123), 35: (1, 123), 19: (1, 123), 36: (1, 123)},
  112: {41: (0, 169), 5: (0, 170)},
  113: {64: (0, 171)},
  114: {18: (1, 201), 21: (1, 201), 22: (1, 201), 7: (1, 201), 5: (1, 201), 23: (1, 201), 24: (1, 201), 13: (1, 201), 16: (1, 201), 3: (1, 201), 4: (1, 201), 9: (1, 201), 25: (1, 201), 26: (1, 201), 27: (1, 201), 28: (1, 201), 29: (1, 201), 30: (1, 201), 31: (1, 201), 32: (1, 201), 33: (1, 201), 34: (1, 201), 35: (1, 201), 19: (1, 201), 36: (1, 201)},
  115: {4: (0, 172)},
  116: {13: (1, 248), 18: (1, 248), 31: (1, 248), 19: (1, 248), 16: (1, 248), 3: (1, 248), 7: (1, 248), 5: (1, 248), 4: (1, 248), 9: (1, 248)},
  117: {13: (1, 242), 18: (1, 242), 31: (1, 242), 19: (1, 242), 16: (1, 242), 3: (1, 242), 7: (1, 242), 5: (1, 242), 4: (1, 242), 9: (1, 242), 23: (0, 173)},
  118: {13: (1, 238), 18: (1, 238), 31: (1, 238), 19: (1, 238), 16: (1, 238), 3: (1, 238), 7: (1, 238), 5: (1, 238), 4: (1, 238), 9: (1, 238)},
  119: {4: (0, 174), 16: (0, 175), 14: (0, 176), 0: (0, 177), 18: (0, 178), 80: (0, 179), 9: (0, 180), 7: (0, 8), 3: (0, 181), 5: (0, 182), 81: (0, 183), 82: (0, 184)},
  120: {18: (1, 186), 21: (1, 186), 22: (1, 186), 7: (1, 186), 5: (1, 186), 23: (1, 186), 24: (1, 186), 13: (1, 186), 16: (1, 186), 3: (1, 186), 4: (1, 186), 9: (1, 186), 25: (1, 186), 26: (1, 186), 27: (1, 186), 30: (1, 186), 29: (1, 186), 28: (1, 186), 31: (1, 186), 32: (1, 186), 33: (1, 186), 34: (1, 186), 35: (1, 186), 19: (1, 186), 36: (1, 186)},
  121: {4: (0, 174), 16: (0, 175), 14: (0, 176), 0: (0, 177), 5: (0, 185), 80: (0, 186), 18: (0, 178), 9: (0, 180), 7: (0, 8), 3: (0, 181), 81: (0, 183), 82: (0, 184)},
  122: {18: (1, 182), 21: (1, 182), 22: (1, 182), 7: (1, 182), 5: (1, 182), 23: (1, 182), 24: (1, 182), 13: (1, 182), 16: (1, 182), 3: (1, 182), 4: (1, 182), 9: (1, 182), 25: (1, 182), 26: (1, 182), 27: (1, 182), 30: (1, 182), 29: (1, 182), 28: (1, 182), 31: (1, 182), 32: (1, 182), 33: (1, 182), 34: (1, 182), 35: (1, 182), 19: (1, 182), 36: (1, 182)},
  123: {18: (1, 39), 7: (1, 39), 31: (1, 39), 5: (1, 39), 23: (1, 39), 32: (1, 39), 13: (1, 39), 19: (1, 39), 16: (1, 39), 3: (1, 39), 36: (1, 39), 4: (1, 39), 9: (1, 39)},
  124: {7: (0, 187), 39: (0, 188)},
  125: {18: (1, 42), 7: (1, 42), 30: (1, 42), 31: (1, 42), 5: (0, 190), 32: (1, 42), 23: (1, 42), 13: (1, 42), 19: (1, 42), 16: (1, 42), 3: (1, 42), 36: (1, 42), 4: (1, 42), 9: (1, 42), 83: (0, 189)},
  126: {18: (1, 41), 7: (1, 41), 30: (1, 41), 31: (1, 41), 5: (0, 190), 32: (1, 41), 23: (1, 41), 13: (1, 41), 19: (1, 41), 16: (1, 41), 3: (1, 41), 36: (1, 41), 4: (1, 41), 9: (1, 41), 83: (0, 191)},
  127: {39: (1, 63), 7: (1, 63), 40: (0, 192)},
  128: {84: (0, 193), 85: (0, 194), 19: (0, 195)},
  129: {18: (1, 35), 7: (1, 35), 31: (1, 35), 5: (1, 35), 32: (1, 35), 23: (1, 35), 13: (1, 35), 19: (1, 35), 16: (1, 35), 3: (1, 35), 4: (1, 35), 9: (1, 35)},
  130: {18: (1, 34), 7: (1, 34), 31: (1, 34), 5: (1, 34), 32: (1, 34), 23: (1, 34), 13: (1, 34), 19: (1, 34), 16: (1, 34), 3: (1, 34), 4: (1, 34), 9: (1, 34)},
  131: {18: (1, 38), 7: (1, 38), 30: (1, 38), 31: (1, 38), 5: (1, 38), 23: (1, 38), 32: (1, 38), 13: (1, 38), 19: (1, 38), 16: (1, 38), 3: (1, 38), 4: (1, 38), 9: (1, 38)},
  132: {13: (1, 245), 18: (1, 245), 31: (1, 245), 19: (1, 245), 16: (1, 245), 3: (1, 245), 7: (1, 245), 5: (1, 245), 4: (1, 245), 9: (1, 245)},
  133: {28: (1, 24), 25: (1, 24), 27: (0, 196)},
  134: {86: (0, 197), 87: (0, 198)},
  135: {5: (0, 199)},
  136: {28: (1, 249), 25: (1, 249)},
  137: {2: (0, 200), 4: (0, 201), 42: (0, 42), 0: (0, 202), 43: (0, 43), 45: (0, 45), 14: (0, 15), 47: (0, 47), 49: (0, 49), 50: (0, 50), 16: (0, 17), 17: (0, 18), 51: (0, 51), 46: (0, 46), 7: (0, 8), 9: (0, 10), 18: (0, 19), 44: (0, 44), 3: (0, 60), 48: (0, 48), 52: (0, 52), 53: (0, 53), 20: (0, 21)},
  138: {5: (1, 27), 41: (0, 203)},
  139: {28: (1, 22), 25: (1, 22), 27: (0, 204)},
  140: {5: (0, 205)},
  141: {74: (0, 133), 4: (0, 5), 0: (0, 1), 76: (0, 135), 2: (0, 3), 16: (0, 17), 15: (0, 206), 14: (0, 15), 17: (0, 18), 7: (0, 137), 46: (0, 138), 9: (0, 10), 18: (0, 19), 3: (0, 60), 78: (0, 140), 77: (0, 207), 20: (0, 21)},
  142: {18: (1, 33), 16: (1, 33), 3: (1, 33), 75: (1, 33), 7: (1, 33), 46: (1, 33), 4: (1, 33), 9: (1, 33)},
  143: {18: (1, 32), 16: (1, 32), 3: (1, 32), 75: (1, 32), 7: (1, 32), 46: (1, 32), 4: (1, 32), 9: (1, 32)},
  144: {18: (1, 67), 21: (1, 67), 22: (1, 67), 7: (1, 67), 5: (1, 67), 23: (1, 67), 24: (1, 67), 13: (1, 67), 16: (1, 67), 3: (1, 67), 4: (1, 67), 9: (1, 67), 25: (1, 67), 26: (1, 67), 27: (1, 67), 28: (1, 67), 29: (1, 67), 30: (1, 67), 31: (1, 67), 32: (1, 67), 33: (1, 67), 34: (1, 67), 35: (1, 67), 19: (1, 67), 36: (1, 67)},
  145: {25: (0, 208), 29: (0, 209)},
  146: {4: (0, 5), 0: (0, 1), 2: (0, 3), 14: (0, 15), 15: (0, 210), 16: (0, 17), 17: (0, 18), 7: (0, 8), 9: (0, 10), 18: (0, 19), 3: (0, 60), 5: (0, 211), 20: (0, 21)},
  147: {18: (1, 69), 21: (1, 69), 22: (1, 69), 7: (1, 69), 5: (1, 69), 23: (1, 69), 24: (1, 69), 13: (1, 69), 16: (1, 69), 3: (1, 69), 4: (1, 69), 9: (1, 69), 25: (1, 69), 26: (1, 69), 27: (1, 69), 28: (1, 69), 29: (1, 69), 30: (1, 69), 31: (1, 69), 32: (1, 69), 33: (1, 69), 34: (1, 69), 35: (1, 69), 19: (1, 69), 36: (1, 69)},
  148: {4: (0, 82), 64: (0, 212), 88: (0, 213), 16: (0, 76), 3: (0, 214), 14: (0, 215), 61: (0, 216)},
  149: {4: (0, 217), 88: (0, 218), 16: (0, 76), 89: (0, 219), 3: (0, 214), 14: (0, 215), 61: (0, 216)},
  150: {64: (0, 220)},
  151: {64: (0, 221)},
  152: {64: (0, 222)},
  153: {18: (1, 97), 21: (1, 97), 22: (1, 97), 25: (1, 97), 7: (1, 97), 29: (1, 97), 31: (1, 97), 5: (1, 97), 32: (1, 97), 23: (1, 97), 24: (1, 97), 13: (1, 97), 34: (1, 97), 19: (1, 97), 16: (1, 97), 3: (1, 97), 4: (1, 97), 9: (1, 97)},
  154: {18: (1, 88), 21: (1, 88), 22: (1, 88), 25: (1, 88), 7: (1, 88), 29: (0, 223), 31: (1, 88), 5: (1, 88), 32: (1, 88), 23: (1, 88), 24: (1, 88), 13: (1, 88), 34: (1, 88), 19: (1, 88), 16: (1, 88), 3: (1, 88), 4: (1, 88), 9: (1, 88)},
  155: {90: (0, 224), 25: (0, 225), 29: (0, 226)},
  156: {18: (1, 99), 21: (1, 99), 22: (1, 99), 25: (1, 99), 7: (1, 99), 29: (1, 99), 31: (1, 99), 5: (1, 99), 32: (1, 99), 23: (1, 99), 24: (1, 99), 13: (1, 99), 34: (1, 99), 19: (1, 99), 16: (1, 99), 3: (1, 99), 4: (1, 99), 9: (1, 99)},
  157: {13: (1, 227), 18: (1, 227), 31: (1, 227), 19: (1, 227), 16: (1, 227), 3: (1, 227), 7: (1, 227), 5: (1, 227), 4: (1, 227), 9: (1, 227)},
  158: {13: (1, 243), 18: (1, 243), 31: (1, 243), 19: (1, 243), 16: (1, 243), 3: (1, 243), 7: (1, 243), 5: (1, 243), 4: (1, 243), 9: (1, 243), 23: (0, 227)},
  159: {13: (1, 231), 18: (1, 231), 31: (1, 231), 19: (1, 231), 16: (1, 231), 3: (1, 231), 7: (1, 231), 5: (1, 231), 4: (1, 231), 9: (1, 231)},
  160: {13: (1, 247), 18: (1, 247), 31: (1, 247), 19: (1, 247), 16: (1, 247), 3: (1, 247), 7: (1, 247), 5: (1, 247), 4: (1, 247), 9: (1, 247)},
  161: {18: (1, 5), 7: (1, 5), 31: (1, 5), 5: (1, 5), 32: (1, 5), 23: (1, 5), 13: (1, 5), 19: (1, 5), 16: (1, 5), 3: (1, 5), 4: (1, 5), 9: (1, 5)},
  162: {4: (0, 102), 60: (0, 103), 9: (0, 75), 16: (0, 76), 18: (0, 77), 3: (0, 78), 67: (0, 228), 61: (0, 79), 14: (0, 80), 62: (0, 81)},
  163: {18: (1, 6), 7: (1, 6), 31: (1, 6), 5: (1, 6), 32: (1, 6), 23: (1, 6), 13: (1, 6), 19: (1, 6), 16: (1, 6), 3: (1, 6), 4: (1, 6), 9: (1, 6)},
  164: {18: (1, 7), 7: (1, 7), 31: (1, 7), 5: (1, 7), 32: (1, 7), 23: (1, 7), 13: (1, 7), 19: (1, 7), 16: (1, 7), 3: (1, 7), 4: (1, 7), 9: (1, 7)},
  165: {64: (0, 229)},
  166: {41: (0, 230), 5: (0, 231)},
  167: {18: (1, 198), 21: (1, 198), 22: (1, 198), 7: (1, 198), 5: (1, 198), 23: (1, 198), 24: (1, 198), 13: (1, 198), 16: (1, 198), 3: (1, 198), 4: (1, 198), 9: (1, 198), 25: (1, 198), 26: (1, 198), 27: (1, 198), 28: (1, 198), 29: (1, 198), 30: (1, 198), 31: (1, 198), 32: (1, 198), 33: (1, 198), 34: (1, 198), 35: (1, 198), 19: (1, 198), 36: (1, 198)},
  168: {4: (0, 232)},
  169: {4: (0, 233), 5: (0, 234)},
  170: {41: (0, 235)},
  171: {41: (0, 236), 5: (0, 237)},
  172: {18: (1, 199), 21: (1, 199), 22: (1, 199), 7: (1, 199), 5: (1, 199), 23: (1, 199), 24: (1, 199), 13: (1, 199), 16: (1, 199), 3: (1, 199), 4: (1, 199), 9: (1, 199), 25: (1, 199), 26: (1, 199), 27: (1, 199), 28: (1, 199), 29: (1, 199), 30: (1, 199), 31: (1, 199), 32: (1, 199), 33: (1, 199), 34: (1, 199), 35: (1, 199), 19: (1, 199), 36: (1, 199)},
  173: {13: (1, 235), 18: (1, 235), 31: (1, 235), 19: (1, 235), 16: (1, 235), 3: (1, 235), 7: (1, 235), 5: (1, 235), 4: (1, 235), 9: (1, 235)},
  174: {5: (0, 35), 21: (0, 238), 40: (0, 37), 41: (0, 38)},
  175: {4: (0, 239), 16: (0, 175), 14: (0, 240), 0: (0, 241), 91: (0, 242), 18: (0, 178), 80: (0, 243), 9: (0, 180), 7: (0, 8), 3: (0, 181), 81: (0, 183), 82: (0, 184)},
  176: {24: (1, 133), 34: (1, 133), 21: (1, 133), 22: (1, 133), 25: (1, 133), 26: (1, 133), 29: (1, 133), 9: (1, 133)},
  177: {21: (0, 244)},
  178: {4: (0, 239), 16: (0, 175), 91: (0, 245), 14: (0, 176), 0: (0, 241), 18: (0, 178), 80: (0, 243), 9: (0, 180), 7: (0, 8), 3: (0, 181), 81: (0, 183), 82: (0, 184)},
  179: {9: (0, 26), 26: (0, 246), 37: (0, 247), 21: (0, 248), 34: (0, 249), 22: (0, 29), 24: (0, 250)},
  180: {4: (0, 239), 16: (0, 175), 14: (0, 176), 0: (0, 241), 91: (0, 251), 18: (0, 178), 80: (0, 243), 9: (0, 180), 7: (0, 8), 3: (0, 181), 81: (0, 183), 82: (0, 184)},
  181: {24: (1, 134), 34: (1, 134), 21: (1, 134), 22: (1, 134), 25: (1, 134), 26: (1, 134), 29: (1, 134), 9: (1, 134)},
  182: {4: (0, 174), 16: (0, 175), 14: (0, 176), 0: (0, 177), 18: (0, 178), 80: (0, 252), 9: (0, 180), 7: (0, 8), 3: (0, 181), 81: (0, 183), 82: (0, 184)},
  183: {24: (1, 132), 34: (1, 132), 21: (1, 132), 22: (1, 132), 25: (1, 132), 26: (1, 132), 29: (1, 132), 9: (1, 132)},
  184: {24: (1, 135), 34: (1, 135), 21: (1, 135), 22: (1, 135), 25: (1, 135), 26: (1, 135), 29: (1, 135), 9: (1, 135)},
  185: {4: (0, 174), 16: (0, 175), 14: (0, 176), 0: (0, 177), 18: (0, 178), 80: (0, 253), 9: (0, 180), 7: (0, 8), 3: (0, 181), 81: (0, 183), 82: (0, 184)},
  186: {9: (0, 26), 26: (0, 254), 37: (0, 247), 21: (0, 248), 34: (0, 249), 22: (0, 29), 24: (0, 250)},
  187: {3: (0, 255), 43: (0, 43), 92: (0, 256), 45: (0, 45), 4: (0, 257), 16: (0, 258), 65: (0, 259), 7: (0, 260), 42: (0, 261), 48: (0, 48), 52: (0, 52), 93: (0, 262), 46: (0, 263), 47: (0, 47), 49: (0, 49), 94: (0, 264), 50: (0, 50), 51: (0, 51), 14: (0, 265), 95: (0, 266), 44: (0, 44), 18: (0, 267), 96: (0, 268), 9: (0, 269), 53: (0, 53)},
  188: {4: (0, 270)},
  189: {18: (1, 43), 7: (1, 43), 30: (1, 43), 31: (1, 43), 5: (0, 271), 32: (1, 43), 23: (1, 43), 13: (1, 43), 19: (1, 43), 16: (1, 43), 3: (1, 43), 36: (1, 43), 4: (1, 43), 9: (1, 43)},
  190: {73: (0, 128), 70: (0, 124), 72: (0, 272), 46: (0, 127), 71: (0, 273)},
  191: {18: (1, 40), 7: (1, 40), 30: (1, 40), 31: (1, 40), 5: (0, 271), 32: (1, 40), 23: (1, 40), 13: (1, 40), 19: (1, 40), 16: (1, 40), 3: (1, 40), 36: (1, 40), 4: (1, 40), 9: (1, 40)},
  192: {64: (0, 274)},
  193: {70: (0, 124), 46: (0, 127), 5: (0, 275), 72: (0, 276)},
  194: {18: (1, 45), 7: (1, 45), 30: (1, 45), 31: (1, 45), 5: (1, 45), 32: (1, 45), 23: (1, 45), 13: (1, 45), 19: (1, 45), 16: (1, 45), 3: (1, 45), 36: (1, 45), 4: (1, 45), 9: (1, 45)},
  195: {84: (0, 193), 85: (0, 277)},
  196: {97: (0, 278)},
  197: {35: (0, 279), 5: (0, 280)},
  198: {35: (1, 222), 5: (1, 222)},
  199: {4: (0, 5), 0: (0, 1), 2: (0, 3), 14: (0, 15), 74: (0, 281), 16: (0, 17), 17: (0, 18), 7: (0, 137), 9: (0, 10), 18: (0, 19), 15: (0, 282), 3: (0, 60), 20: (0, 21)},
  200: {9: (0, 26), 34: (0, 27), 21: (0, 28), 22: (0, 29), 37: (0, 30), 26: (0, 283), 24: (0, 31)},
  201: {5: (0, 35), 21: (0, 36), 40: (0, 37), 41: (0, 38)},
  202: {21: (0, 22)},
  203: {46: (0, 284)},
  204: {97: (0, 285)},
  205: {4: (0, 5), 0: (0, 1), 2: (0, 3), 14: (0, 15), 16: (0, 17), 17: (0, 18), 15: (0, 286), 7: (0, 8), 9: (0, 10), 18: (0, 19), 3: (0, 60), 20: (0, 21)},
  206: {28: (1, 22), 25: (1, 22), 18: (1, 18), 7: (1, 18), 30: (1, 18), 31: (1, 18), 5: (1, 18), 23: (1, 18), 32: (1, 18), 13: (1, 18), 19: (1, 18), 16: (1, 18), 3: (1, 18), 36: (1, 18), 4: (1, 18), 9: (1, 18), 27: (0, 204)},
  207: {28: (1, 250), 25: (1, 250)},
  208: {4: (0, 5), 0: (0, 1), 2: (0, 3), 5: (0, 287), 14: (0, 15), 16: (0, 17), 17: (0, 18), 7: (0, 8), 9: (0, 10), 18: (0, 19), 3: (0, 60), 15: (0, 288), 20: (0, 21)},
  209: {18: (1, 68), 21: (1, 68), 22: (1, 68), 7: (1, 68), 5: (1, 68), 23: (1, 68), 24: (1, 68), 13: (1, 68), 16: (1, 68), 3: (1, 68), 4: (1, 68), 9: (1, 68), 25: (1, 68), 26: (1, 68), 27: (1, 68), 28: (1, 68), 29: (1, 68), 30: (1, 68), 31: (1, 68), 32: (1, 68), 33: (1, 68), 34: (1, 68), 35: (1, 68), 19: (1, 68), 36: (1, 68)},
  210: {29: (1, 264), 25: (1, 264)},
  211: {4: (0, 5), 0: (0, 1), 2: (0, 3), 14: (0, 15), 16: (0, 17), 17: (0, 18), 15: (0, 289), 7: (0, 8), 9: (0, 10), 18: (0, 19), 3: (0, 60), 20: (0, 21)},
  212: {18: (1, 101), 21: (1, 101), 22: (1, 101), 25: (1, 101), 7: (1, 101), 29: (1, 101), 31: (1, 101), 5: (1, 101), 32: (1, 101), 23: (1, 101), 24: (1, 101), 13: (1, 101), 34: (1, 101), 19: (1, 101), 16: (1, 101), 3: (1, 101), 4: (1, 101), 9: (1, 101)},
  213: {18: (1, 98), 21: (1, 98), 22: (1, 98), 25: (1, 98), 7: (1, 98), 29: (1, 98), 31: (1, 98), 5: (1, 98), 32: (1, 98), 23: (1, 98), 24: (1, 98), 13: (1, 98), 34: (1, 98), 19: (1, 98), 16: (1, 98), 3: (1, 98), 4: (1, 98), 9: (1, 98)},
  214: {18: (1, 94), 21: (1, 94), 22: (1, 94), 25: (1, 94), 7: (1, 94), 29: (1, 94), 31: (1, 94), 5: (1, 94), 32: (1, 94), 23: (1, 94), 24: (1, 94), 13: (1, 94), 34: (1, 94), 19: (1, 94), 16: (1, 94), 3: (1, 94), 4: (1, 94), 9: (1, 94)},
  215: {18: (1, 92), 21: (1, 92), 22: (1, 92), 25: (1, 92), 7: (1, 92), 29: (1, 92), 31: (1, 92), 5: (1, 92), 32: (1, 92), 23: (1, 92), 24: (1, 92), 13: (1, 92), 34: (1, 92), 19: (1, 92), 16: (1, 92), 3: (1, 92), 4: (1, 92), 9: (1, 92)},
  216: {18: (1, 93), 21: (1, 93), 22: (1, 93), 25: (1, 93), 7: (1, 93), 29: (1, 93), 31: (1, 93), 5: (1, 93), 32: (1, 93), 23: (1, 93), 24: (1, 93), 13: (1, 93), 34: (1, 93), 19: (1, 93), 16: (1, 93), 3: (1, 93), 4: (1, 93), 9: (1, 93)},
  217: {18: (1, 87), 21: (1, 87), 22: (1, 87), 25: (1, 87), 7: (1, 87), 29: (1, 87), 31: (1, 87), 5: (0, 35), 32: (1, 87), 23: (1, 87), 24: (1, 87), 13: (1, 87), 34: (1, 87), 19: (1, 87), 16: (1, 87), 3: (1, 87), 4: (1, 87), 9: (1, 87), 40: (0, 37), 41: (0, 38)},
  218: {18: (1, 86), 21: (1, 86), 22: (1, 86), 25: (1, 86), 7: (1, 86), 29: (1, 86), 31: (1, 86), 5: (1, 86), 32: (1, 86), 23: (1, 86), 24: (1, 86), 13: (1, 86), 34: (1, 86), 19: (1, 86), 16: (1, 86), 3: (1, 86), 4: (1, 86), 9: (1, 86)},
  219: {18: (1, 100), 21: (1, 100), 22: (1, 100), 25: (1, 100), 7: (1, 100), 29: (1, 100), 31: (1, 100), 5: (1, 100), 32: (1, 100), 23: (1, 100), 24: (1, 100), 13: (1, 100), 34: (1, 100), 19: (1, 100), 16: (1, 100), 3: (1, 100), 4: (1, 100), 9: (1, 100)},
  220: {18: (1, 95), 21: (1, 95), 22: (1, 95), 25: (1, 95), 7: (1, 95), 29: (1, 95), 31: (1, 95), 5: (1, 95), 32: (1, 95), 23: (1, 95), 24: (1, 95), 13: (1, 95), 34: (1, 95), 19: (1, 95), 16: (1, 95), 3: (1, 95), 4: (1, 95), 9: (1, 95)},
  221: {18: (1, 102), 21: (1, 102), 22: (1, 102), 25: (1, 102), 7: (1, 102), 29: (1, 102), 31: (1, 102), 5: (1, 102), 32: (1, 102), 23: (1, 102), 24: (1, 102), 13: (1, 102), 34: (1, 102), 19: (1, 102), 16: (1, 102), 3: (1, 102), 4: (1, 102), 9: (1, 102)},
  222: {18: (1, 96), 21: (1, 96), 22: (1, 96), 25: (1, 96), 7: (1, 96), 29: (1, 96), 31: (1, 96), 5: (1, 96), 32: (1, 96), 23: (1, 96), 24: (1, 96), 13: (1, 96), 34: (1, 96), 19: (1, 96), 16: (1, 96), 3: (1, 96), 4: (1, 96), 9: (1, 96)},
  223: {18: (1, 66), 21: (1, 66), 22: (1, 66), 25: (1, 66), 7: (1, 66), 29: (1, 66), 31: (1, 66), 5: (1, 66), 32: (1, 66), 23: (1, 66), 24: (1, 66), 13: (1, 66), 34: (1, 66), 19: (1, 66), 16: (1, 66), 3: (1, 66), 4: (1, 66), 9: (1, 66)},
  224: {29: (0, 290), 25: (0, 291)},
  225: {4: (0, 102), 60: (0, 103), 9: (0, 75), 5: (0, 292), 16: (0, 76), 18: (0, 77), 67: (0, 293), 3: (0, 78), 61: (0, 79), 14: (0, 80), 62: (0, 81)},
  226: {18: (1, 65), 21: (1, 65), 22: (1, 65), 25: (1, 65), 7: (1, 65), 29: (1, 65), 31: (1, 65), 5: (1, 65), 32: (1, 65), 23: (1, 65), 24: (1, 65), 13: (1, 65), 34: (1, 65), 19: (1, 65), 16: (1, 65), 3: (1, 65), 4: (1, 65), 9: (1, 65)},
  227: {13: (1, 233), 18: (1, 233), 31: (1, 233), 19: (1, 233), 16: (1, 233), 3: (1, 233), 7: (1, 233), 5: (1, 233), 4: (1, 233), 9: (1, 233)},
  228: {18: (1, 1), 7: (1, 1), 31: (1, 1), 5: (1, 1), 32: (1, 1), 23: (1, 1), 13: (1, 1), 19: (1, 1), 16: (1, 1), 3: (1, 1), 4: (1, 1), 9: (1, 1)},
  229: {41: (0, 294), 5: (0, 295)},
  230: {4: (0, 296), 5: (0, 297)},
  231: {41: (0, 298)},
  232: {18: (1, 195), 21: (1, 195), 22: (1, 195), 7: (1, 195), 5: (1, 195), 23: (1, 195), 24: (1, 195), 13: (1, 195), 16: (1, 195), 3: (1, 195), 4: (1, 195), 9: (1, 195), 25: (1, 195), 26: (1, 195), 27: (1, 195), 28: (1, 195), 29: (1, 195), 30: (1, 195), 31: (1, 195), 32: (1, 195), 33: (1, 195), 34: (1, 195), 35: (1, 195), 19: (1, 195), 36: (1, 195)},
  233: {18: (1, 196), 21: (1, 196), 22: (1, 196), 7: (1, 196), 5: (1, 196), 23: (1, 196), 24: (1, 196), 13: (1, 196), 16: (1, 196), 3: (1, 196), 4: (1, 196), 9: (1, 196), 25: (1, 196), 26: (1, 196), 27: (1, 196), 28: (1, 196), 29: (1, 196), 30: (1, 196), 31: (1, 196), 32: (1, 196), 33: (1, 196), 34: (1, 196), 35: (1, 196), 19: (1, 196), 36: (1, 196)},
  234: {4: (0, 299)},
  235: {5: (0, 300), 4: (0, 301)},
  236: {4: (0, 302), 5: (0, 303)},
  237: {41: (0, 304)},
  238: {4: (0, 82), 16: (0, 175), 82: (0, 305), 14: (0, 306), 98: (0, 307), 64: (0, 308), 3: (0, 309)},
  239: {24: (1, 127), 34: (1, 127), 21: (0, 238), 22: (1, 127), 25: (1, 127), 26: (1, 127), 29: (1, 127), 9: (1, 127), 5: (0, 35), 40: (0, 37), 41: (0, 38)},
  240: {24: (1, 133), 34: (1, 133), 21: (1, 133), 22: (1, 133), 25: (1, 133), 26: (1, 133), 29: (0, 310), 9: (1, 133)},
  241: {24: (1, 126), 34: (1, 126), 21: (0, 244), 22: (1, 126), 25: (1, 126), 26: (1, 126), 29: (1, 126), 9: (1, 126)},
  242: {29: (0, 311), 99: (0, 312), 25: (0, 313)},
  243: {24: (0, 250), 34: (0, 249), 21: (0, 248), 22: (0, 29), 25: (1, 128), 26: (1, 128), 29: (1, 128), 9: (0, 26), 37: (0, 247)},
  244: {4: (0, 82), 16: (0, 175), 82: (0, 305), 14: (0, 306), 64: (0, 314), 98: (0, 315), 3: (0, 309)},
  245: {24: (1, 144), 34: (1, 144), 21: (1, 144), 22: (1, 144), 25: (1, 144), 26: (1, 144), 29: (1, 144), 9: (1, 144)},
  246: {18: (1, 185), 21: (1, 185), 22: (1, 185), 7: (1, 185), 5: (1, 185), 23: (1, 185), 24: (1, 185), 13: (1, 185), 16: (1, 185), 3: (1, 185), 4: (1, 185), 9: (1, 185), 25: (1, 185), 26: (1, 185), 27: (1, 185), 30: (1, 185), 29: (1, 185), 28: (1, 185), 31: (1, 185), 32: (1, 185), 33: (1, 185), 34: (1, 185), 35: (1, 185), 19: (1, 185), 36: (1, 185)},
  247: {4: (0, 316), 16: (0, 175), 82: (0, 305), 14: (0, 306), 98: (0, 317), 0: (0, 318), 7: (0, 8), 3: (0, 309), 100: (0, 319)},
  248: {64: (0, 320)},
  249: {64: (0, 321)},
  250: {64: (0, 322)},
  251: {24: (1, 148), 34: (1, 148), 21: (1, 148), 22: (1, 148), 25: (1, 148), 26: (1, 148), 29: (1, 148), 9: (1, 148)},
  252: {9: (0, 26), 37: (0, 247), 21: (0, 248), 26: (0, 323), 34: (0, 249), 22: (0, 29), 24: (0, 250)},
  253: {26: (0, 324), 9: (0, 26), 37: (0, 247), 21: (0, 248), 34: (0, 249), 22: (0, 29), 24: (0, 250)},
  254: {18: (1, 184), 21: (1, 184), 22: (1, 184), 7: (1, 184), 5: (1, 184), 23: (1, 184), 24: (1, 184), 13: (1, 184), 16: (1, 184), 3: (1, 184), 4: (1, 184), 9: (1, 184), 25: (1, 184), 26: (1, 184), 27: (1, 184), 30: (1, 184), 29: (1, 184), 28: (1, 184), 31: (1, 184), 32: (1, 184), 33: (1, 184), 34: (1, 184), 35: (1, 184), 19: (1, 184), 36: (1, 184)},
  255: {24: (1, 160), 34: (1, 160), 21: (1, 160), 22: (1, 160), 25: (1, 160), 26: (1, 160), 29: (1, 160), 9: (1, 160)},
  256: {9: (0, 26), 24: (0, 325), 34: (0, 326), 26: (0, 327), 37: (0, 328), 21: (0, 329), 22: (0, 29)},
  257: {5: (0, 35), 40: (0, 37), 41: (0, 38), 21: (0, 330)},
  258: {93: (0, 262), 4: (0, 331), 3: (0, 255), 92: (0, 332), 7: (0, 260), 16: (0, 258), 94: (0, 264), 101: (0, 333), 95: (0, 334), 65: (0, 259), 14: (0, 335), 18: (0, 267), 96: (0, 268), 9: (0, 269)},
  259: {24: (1, 159), 34: (1, 159), 21: (0, 336), 22: (1, 159), 25: (1, 159), 26: (1, 159), 29: (1, 159), 9: (1, 159)},
  260: {46: (0, 337), 43: (0, 43), 44: (0, 44), 45: (0, 45), 42: (0, 338), 47: (0, 47), 48: (0, 48), 49: (0, 49), 50: (0, 50), 51: (0, 51), 52: (0, 52), 53: (0, 53)},
  261: {26: (0, 339), 39: (0, 340)},
  262: {24: (1, 155), 34: (1, 155), 21: (1, 155), 22: (1, 155), 25: (1, 155), 26: (1, 155), 29: (1, 155), 9: (1, 155)},
  263: {39: (0, 341), 26: (0, 342)},
  264: {24: (1, 158), 34: (1, 158), 21: (1, 158), 22: (1, 158), 25: (1, 158), 26: (1, 158), 29: (1, 158), 9: (1, 158)},
  265: {24: (1, 157), 34: (1, 157), 21: (1, 157), 22: (1, 157), 25: (1, 157), 26: (1, 157), 29: (1, 157), 9: (1, 157)},
  266: {21: (0, 343)},
  267: {93: (0, 262), 4: (0, 331), 3: (0, 255), 92: (0, 332), 7: (0, 260), 16: (0, 258), 94: (0, 264), 95: (0, 334), 65: (0, 259), 14: (0, 265), 18: (0, 267), 96: (0, 268), 9: (0, 269), 101: (0, 344)},
  268: {24: (1, 156), 34: (1, 156), 21: (1, 156), 22: (1, 156), 25: (1, 156), 26: (1, 156), 29: (1, 156), 9: (1, 156)},
  269: {93: (0, 262), 4: (0, 331), 3: (0, 255), 92: (0, 332), 7: (0, 260), 16: (0, 258), 94: (0, 264), 95: (0, 334), 65: (0, 259), 14: (0, 265), 101: (0, 345), 18: (0, 267), 96: (0, 268), 9: (0, 269)},
  270: {18: (1, 58), 7: (1, 58), 30: (1, 58), 31: (1, 58), 5: (1, 58), 32: (1, 58), 23: (1, 58), 13: (1, 58), 19: (1, 58), 16: (1, 58), 3: (1, 58), 102: (1, 58), 36: (1, 58), 4: (1, 58), 9: (1, 58)},
  271: {73: (0, 128), 70: (0, 124), 46: (0, 127), 71: (0, 346), 72: (0, 347)},
  272: {18: (1, 253), 7: (1, 253), 30: (1, 253), 31: (1, 253), 5: (1, 253), 32: (1, 253), 23: (1, 253), 13: (1, 253), 19: (1, 253), 16: (1, 253), 3: (1, 253), 36: (1, 253), 4: (1, 253), 9: (1, 253)},
  273: {18: (1, 254), 7: (1, 254), 30: (1, 254), 31: (1, 254), 5: (1, 254), 32: (1, 254), 23: (1, 254), 13: (1, 254), 19: (1, 254), 16: (1, 254), 3: (1, 254), 36: (1, 254), 4: (1, 254), 9: (1, 254)},
  274: {39: (1, 62), 7: (1, 62)},
  275: {72: (0, 348), 70: (0, 124), 46: (0, 127)},
  276: {5: (0, 349), 102: (0, 350), 103: (0, 351)},
  277: {18: (1, 44), 7: (1, 44), 30: (1, 44), 31: (1, 44), 5: (1, 44), 32: (1, 44), 23: (1, 44), 13: (1, 44), 19: (1, 44), 16: (1, 44), 3: (1, 44), 36: (1, 44), 4: (1, 44), 9: (1, 44)},
  278: {28: (1, 25), 25: (1, 25)},
  279: {4: (0, 5), 104: (0, 352), 0: (0, 1), 2: (0, 3), 14: (0, 15), 16: (0, 17), 17: (0, 18), 7: (0, 137), 9: (0, 10), 18: (0, 19), 3: (0, 60), 15: (0, 353), 74: (0, 354), 20: (0, 21)},
  280: {3: (0, 355)},
  281: {28: (1, 19), 25: (1, 19)},
  282: {28: (1, 23), 25: (1, 23)},
  283: {33: (1, 26), 27: (1, 26), 28: (1, 26), 35: (1, 26), 25: (1, 26)},
  284: {5: (1, 29)},
  285: {28: (1, 20), 25: (1, 20)},
  286: {28: (1, 21), 25: (1, 21)},
  287: {4: (0, 5), 0: (0, 1), 2: (0, 3), 14: (0, 15), 16: (0, 17), 17: (0, 18), 7: (0, 8), 9: (0, 10), 18: (0, 19), 3: (0, 60), 20: (0, 21), 15: (0, 356)},
  288: {29: (1, 262), 25: (1, 262)},
  289: {29: (1, 261), 25: (1, 261)},
  290: {18: (1, 64), 21: (1, 64), 22: (1, 64), 25: (1, 64), 7: (1, 64), 29: (1, 64), 31: (1, 64), 5: (1, 64), 32: (1, 64), 23: (1, 64), 24: (1, 64), 13: (1, 64), 34: (1, 64), 19: (1, 64), 16: (1, 64), 3: (1, 64), 4: (1, 64), 9: (1, 64)},
  291: {4: (0, 102), 60: (0, 103), 9: (0, 75), 16: (0, 76), 18: (0, 77), 3: (0, 78), 67: (0, 357), 61: (0, 79), 14: (0, 80), 5: (0, 358), 62: (0, 81)},
  292: {4: (0, 102), 60: (0, 103), 9: (0, 75), 16: (0, 76), 18: (0, 77), 3: (0, 78), 61: (0, 79), 14: (0, 80), 67: (0, 359), 62: (0, 81)},
  293: {29: (1, 257), 25: (1, 257)},
  294: {4: (0, 360), 5: (0, 361)},
  295: {41: (0, 362)},
  296: {18: (1, 205), 21: (1, 205), 22: (1, 205), 7: (1, 205), 5: (1, 205), 23: (1, 205), 24: (1, 205), 13: (1, 205), 16: (1, 205), 3: (1, 205), 4: (1, 205), 9: (1, 205), 25: (1, 205), 26: (1, 205), 27: (1, 205), 28: (1, 205), 29: (1, 205), 30: (1, 205), 31: (1, 205), 32: (1, 205), 33: (1, 205), 34: (1, 205), 35: (1, 205), 19: (1, 205), 36: (1, 205)},
  297: {4: (0, 363)},
  298: {5: (0, 364), 4: (0, 365)},
  299: {18: (1, 188), 21: (1, 188), 22: (1, 188), 7: (1, 188), 5: (1, 188), 23: (1, 188), 24: (1, 188), 13: (1, 188), 16: (1, 188), 3: (1, 188), 4: (1, 188), 9: (1, 188), 25: (1, 188), 26: (1, 188), 27: (1, 188), 28: (1, 188), 29: (1, 188), 30: (1, 188), 31: (1, 188), 32: (1, 188), 33: (1, 188), 34: (1, 188), 35: (1, 188), 19: (1, 188), 36: (1, 188)},
  300: {4: (0, 366)},
  301: {18: (1, 202), 21: (1, 202), 22: (1, 202), 7: (1, 202), 5: (1, 202), 23: (1, 202), 24: (1, 202), 13: (1, 202), 16: (1, 202), 3: (1, 202), 4: (1, 202), 9: (1, 202), 25: (1, 202), 26: (1, 202), 27: (1, 202), 28: (1, 202), 29: (1, 202), 30: (1, 202), 31: (1, 202), 32: (1, 202), 33: (1, 202), 34: (1, 202), 35: (1, 202), 19: (1, 202), 36: (1, 202)},
  302: {18: (1, 206), 21: (1, 206), 22: (1, 206), 7: (1, 206), 5: (1, 206), 23: (1, 206), 24: (1, 206), 13: (1, 206), 16: (1, 206), 3: (1, 206), 4: (1, 206), 9: (1, 206), 25: (1, 206), 26: (1, 206), 27: (1, 206), 28: (1, 206), 29: (1, 206), 30: (1, 206), 31: (1, 206), 32: (1, 206), 33: (1, 206), 34: (1, 206), 35: (1, 206), 19: (1, 206), 36: (1, 206)},
  303: {4: (0, 367)},
  304: {5: (0, 368), 4: (0, 369)},
  305: {24: (1, 138), 34: (1, 138), 21: (1, 138), 22: (1, 138), 25: (1, 138), 26: (1, 138), 29: (1, 138), 9: (1, 138)},
  306: {24: (1, 136), 34: (1, 136), 21: (1, 136), 22: (1, 136), 25: (1, 136), 26: (1, 136), 29: (1, 136), 9: (1, 136)},
  307: {24: (1, 141), 34: (1, 141), 21: (1, 141), 22: (1, 141), 25: (1, 141), 26: (1, 141), 29: (1, 141), 9: (1, 141)},
  308: {24: (1, 145), 34: (1, 145), 21: (1, 145), 22: (1, 145), 25: (1, 145), 26: (1, 145), 29: (1, 145), 9: (1, 145)},
  309: {24: (1, 137), 34: (1, 137), 21: (1, 137), 22: (1, 137), 25: (1, 137), 26: (1, 137), 29: (1, 137), 9: (1, 137)},
  310: {24: (1, 71), 34: (1, 71), 21: (1, 71), 22: (1, 71), 25: (1, 71), 26: (1, 71), 29: (1, 71), 9: (1, 71)},
  311: {24: (1, 74), 34: (1, 74), 21: (1, 74), 22: (1, 74), 25: (1, 74), 26: (1, 74), 29: (1, 74), 9: (1, 74)},
  312: {25: (0, 370), 29: (0, 371)},
  313: {4: (0, 239), 16: (0, 175), 14: (0, 176), 0: (0, 241), 18: (0, 178), 80: (0, 243), 9: (0, 180), 5: (0, 372), 7: (0, 8), 3: (0, 181), 105: (0, 373), 81: (0, 183), 82: (0, 184), 91: (0, 374)},
  314: {24: (1, 140), 34: (1, 140), 21: (1, 140), 22: (1, 140), 25: (1, 140), 26: (1, 140), 29: (1, 140), 9: (1, 140)},
  315: {24: (1, 142), 34: (1, 142), 21: (1, 142), 22: (1, 142), 25: (1, 142), 26: (1, 142), 29: (1, 142), 9: (1, 142)},
  316: {24: (1, 131), 34: (1, 131), 21: (1, 131), 22: (1, 131), 25: (1, 131), 26: (1, 131), 29: (1, 131), 9: (1, 131), 5: (0, 35), 40: (0, 37), 41: (0, 38)},
  317: {24: (1, 129), 34: (1, 129), 21: (1, 129), 22: (1, 129), 25: (1, 129), 26: (1, 129), 29: (1, 129), 9: (1, 129)},
  318: {24: (1, 130), 34: (1, 130), 21: (1, 130), 22: (1, 130), 25: (1, 130), 26: (1, 130), 29: (1, 130), 9: (1, 130)},
  319: {24: (1, 139), 34: (1, 139), 21: (1, 139), 22: (1, 139), 25: (1, 139), 26: (1, 139), 29: (1, 139), 9: (1, 139)},
  320: {24: (1, 143), 34: (1, 143), 21: (1, 143), 22: (1, 143), 25: (1, 143), 26: (1, 143), 29: (1, 143), 9: (1, 143)},
  321: {24: (1, 147), 34: (1, 147), 21: (1, 147), 22: (1, 147), 25: (1, 147), 26: (1, 147), 29: (1, 147), 9: (1, 147)},
  322: {24: (1, 146), 34: (1, 146), 21: (1, 146), 22: (1, 146), 25: (1, 146), 26: (1, 146), 29: (1, 146), 9: (1, 146)},
  323: {18: (1, 187), 21: (1, 187), 22: (1, 187), 7: (1, 187), 5: (1, 187), 23: (1, 187), 24: (1, 187), 13: (1, 187), 16: (1, 187), 3: (1, 187), 4: (1, 187), 9: (1, 187), 25: (1, 187), 26: (1, 187), 27: (1, 187), 30: (1, 187), 29: (1, 187), 28: (1, 187), 31: (1, 187), 32: (1, 187), 33: (1, 187), 34: (1, 187), 35: (1, 187), 19: (1, 187), 36: (1, 187)},
  324: {18: (1, 183), 21: (1, 183), 22: (1, 183), 7: (1, 183), 5: (1, 183), 23: (1, 183), 24: (1, 183), 13: (1, 183), 16: (1, 183), 3: (1, 183), 4: (1, 183), 9: (1, 183), 25: (1, 183), 26: (1, 183), 27: (1, 183), 30: (1, 183), 29: (1, 183), 28: (1, 183), 31: (1, 183), 32: (1, 183), 33: (1, 183), 34: (1, 183), 35: (1, 183), 19: (1, 183), 36: (1, 183)},
  325: {64: (0, 375)},
  326: {64: (0, 376)},
  327: {18: (1, 54), 7: (1, 54), 30: (1, 54), 31: (1, 54), 5: (1, 54), 32: (1, 54), 23: (1, 54), 13: (1, 54), 19: (1, 54), 16: (1, 54), 3: (1, 54), 102: (1, 54), 36: (1, 54), 4: (1, 54), 9: (1, 54)},
  328: {4: (0, 377), 7: (0, 260), 3: (0, 378), 96: (0, 379), 16: (0, 258), 93: (0, 380), 95: (0, 381), 106: (0, 382), 65: (0, 383), 107: (0, 384), 14: (0, 385)},
  329: {64: (0, 386)},
  330: {4: (0, 82), 3: (0, 378), 96: (0, 379), 16: (0, 258), 93: (0, 380), 64: (0, 387), 65: (0, 383), 107: (0, 388), 14: (0, 385)},
  331: {24: (1, 151), 34: (1, 151), 21: (0, 330), 22: (1, 151), 25: (1, 151), 26: (1, 151), 29: (1, 151), 9: (1, 151), 5: (0, 35), 40: (0, 37), 41: (0, 38)},
  332: {24: (0, 325), 34: (0, 326), 21: (0, 329), 22: (0, 29), 25: (1, 149), 26: (1, 149), 29: (1, 149), 9: (0, 26), 37: (0, 328)},
  333: {29: (0, 389), 108: (0, 390), 25: (0, 391)},
  334: {24: (1, 150), 34: (1, 150), 21: (0, 343), 22: (1, 150), 25: (1, 150), 26: (1, 150), 29: (1, 150), 9: (1, 150)},
  335: {24: (1, 157), 34: (1, 157), 21: (1, 157), 22: (1, 157), 25: (1, 157), 26: (1, 157), 29: (0, 392), 9: (1, 157)},
  336: {64: (0, 393)},
  337: {26: (0, 394), 39: (0, 395)},
  338: {39: (0, 396), 26: (0, 397)},
  339: {18: (1, 56), 7: (1, 56), 30: (1, 56), 31: (1, 56), 5: (1, 56), 32: (1, 56), 23: (1, 56), 13: (1, 56), 19: (1, 56), 16: (1, 56), 3: (1, 56), 102: (1, 56), 36: (1, 56), 4: (1, 56), 9: (1, 56)},
  340: {93: (0, 262), 4: (0, 257), 3: (0, 255), 92: (0, 398), 7: (0, 260), 16: (0, 258), 94: (0, 264), 65: (0, 259), 14: (0, 265), 95: (0, 266), 5: (0, 399), 18: (0, 267), 96: (0, 268), 9: (0, 269)},
  341: {93: (0, 262), 4: (0, 257), 3: (0, 255), 92: (0, 400), 7: (0, 260), 16: (0, 258), 94: (0, 264), 65: (0, 259), 14: (0, 265), 95: (0, 266), 18: (0, 267), 5: (0, 401), 96: (0, 268), 9: (0, 269)},
  342: {18: (1, 59), 7: (1, 59), 30: (1, 59), 31: (1, 59), 5: (1, 59), 32: (1, 59), 23: (1, 59), 13: (1, 59), 19: (1, 59), 16: (1, 59), 3: (1, 59), 102: (1, 59), 36: (1, 59), 4: (1, 59), 9: (1, 59)},
  343: {107: (0, 402), 4: (0, 82), 3: (0, 378), 96: (0, 379), 16: (0, 258), 64: (0, 403), 93: (0, 380), 65: (0, 383), 14: (0, 385)},
  344: {24: (1, 167), 34: (1, 167), 21: (1, 167), 22: (1, 167), 25: (1, 167), 26: (1, 167), 29: (1, 167), 9: (1, 167)},
  345: {24: (1, 174), 34: (1, 174), 21: (1, 174), 22: (1, 174), 25: (1, 174), 26: (1, 174), 29: (1, 174), 9: (1, 174)},
  346: {18: (1, 251), 7: (1, 251), 30: (1, 251), 31: (1, 251), 5: (1, 251), 32: (1, 251), 23: (1, 251), 13: (1, 251), 19: (1, 251), 16: (1, 251), 3: (1, 251), 36: (1, 251), 4: (1, 251), 9: (1, 251)},
  347: {18: (1, 252), 7: (1, 252), 30: (1, 252), 31: (1, 252), 5: (1, 252), 32: (1, 252), 23: (1, 252), 13: (1, 252), 19: (1, 252), 16: (1, 252), 3: (1, 252), 36: (1, 252), 4: (1, 252), 9: (1, 252)},
  348: {103: (0, 404), 5: (0, 405), 102: (0, 406)},
  349: {102: (0, 407), 70: (0, 124), 46: (0, 127), 72: (0, 408)},
  350: {18: (1, 51), 7: (1, 51), 30: (1, 51), 31: (1, 51), 5: (1, 51), 32: (1, 51), 23: (1, 51), 13: (1, 51), 19: (1, 51), 16: (1, 51), 3: (1, 51), 36: (1, 51), 4: (1, 51), 9: (1, 51)},
  351: {102: (0, 409), 5: (0, 410)},
  352: {35: (0, 411)},
  353: {35: (1, 16), 33: (1, 16)},
  354: {35: (1, 17), 33: (1, 17)},
  355: {35: (0, 412)},
  356: {29: (1, 263), 25: (1, 263)},
  357: {29: (1, 259), 25: (1, 259)},
  358: {4: (0, 102), 60: (0, 103), 9: (0, 75), 16: (0, 76), 18: (0, 77), 3: (0, 78), 61: (0, 79), 14: (0, 80), 67: (0, 413), 62: (0, 81)},
  359: {29: (1, 260), 25: (1, 260)},
  360: {18: (1, 190), 21: (1, 190), 22: (1, 190), 7: (1, 190), 5: (1, 190), 23: (1, 190), 24: (1, 190), 13: (1, 190), 16: (1, 190), 3: (1, 190), 4: (1, 190), 9: (1, 190), 25: (1, 190), 26: (1, 190), 27: (1, 190), 28: (1, 190), 29: (1, 190), 30: (1, 190), 31: (1, 190), 32: (1, 190), 33: (1, 190), 34: (1, 190), 35: (1, 190), 19: (1, 190), 36: (1, 190)},
  361: {4: (0, 414)},
  362: {5: (0, 415), 4: (0, 416)},
  363: {18: (1, 200), 21: (1, 200), 22: (1, 200), 7: (1, 200), 5: (1, 200), 23: (1, 200), 24: (1, 200), 13: (1, 200), 16: (1, 200), 3: (1, 200), 4: (1, 200), 9: (1, 200), 25: (1, 200), 26: (1, 200), 27: (1, 200), 28: (1, 200), 29: (1, 200), 30: (1, 200), 31: (1, 200), 32: (1, 200), 33: (1, 200), 34: (1, 200), 35: (1, 200), 19: (1, 200), 36: (1, 200)},
  364: {4: (0, 417)},
  365: {18: (1, 191), 21: (1, 191), 22: (1, 191), 7: (1, 191), 5: (1, 191), 23: (1, 191), 24: (1, 191), 13: (1, 191), 16: (1, 191), 3: (1, 191), 4: (1, 191), 9: (1, 191), 25: (1, 191), 26: (1, 191), 27: (1, 191), 28: (1, 191), 29: (1, 191), 30: (1, 191), 31: (1, 191), 32: (1, 191), 33: (1, 191), 34: (1, 191), 35: (1, 191), 19: (1, 191), 36: (1, 191)},
  366: {18: (1, 192), 21: (1, 192), 22: (1, 192), 7: (1, 192), 5: (1, 192), 23: (1, 192), 24: (1, 192), 13: (1, 192), 16: (1, 192), 3: (1, 192), 4: (1, 192), 9: (1, 192), 25: (1, 192), 26: (1, 192), 27: (1, 192), 28: (1, 192), 29: (1, 192), 30: (1, 192), 31: (1, 192), 32: (1, 192), 33: (1, 192), 34: (1, 192), 35: (1, 192), 19: (1, 192), 36: (1, 192)},
  367: {18: (1, 194), 21: (1, 194), 22: (1, 194), 7: (1, 194), 5: (1, 194), 23: (1, 194), 24: (1, 194), 13: (1, 194), 16: (1, 194), 3: (1, 194), 4: (1, 194), 9: (1, 194), 25: (1, 194), 26: (1, 194), 27: (1, 194), 28: (1, 194), 29: (1, 194), 30: (1, 194), 31: (1, 194), 32: (1, 194), 33: (1, 194), 34: (1, 194), 35: (1, 194), 19: (1, 194), 36: (1, 194)},
  368: {4: (0, 418)},
  369: {18: (1, 204), 21: (1, 204), 22: (1, 204), 7: (1, 204), 5: (1, 204), 23: (1, 204), 24: (1, 204), 13: (1, 204), 16: (1, 204), 3: (1, 204), 4: (1, 204), 9: (1, 204), 25: (1, 204), 26: (1, 204), 27: (1, 204), 28: (1, 204), 29: (1, 204), 30: (1, 204), 31: (1, 204), 32: (1, 204), 33: (1, 204), 34: (1, 204), 35: (1, 204), 19: (1, 204), 36: (1, 204)},
  370: {4: (0, 239), 16: (0, 175), 14: (0, 176), 0: (0, 241), 18: (0, 178), 5: (0, 419), 80: (0, 243), 9: (0, 180), 105: (0, 420), 91: (0, 421), 7: (0, 8), 3: (0, 181), 81: (0, 183), 82: (0, 184)},
  371: {24: (1, 70), 34: (1, 70), 21: (1, 70), 22: (1, 70), 25: (1, 70), 26: (1, 70), 29: (1, 70), 9: (1, 70)},
  372: {4: (0, 239), 16: (0, 175), 14: (0, 176), 0: (0, 241), 18: (0, 178), 80: (0, 243), 9: (0, 180), 7: (0, 8), 3: (0, 181), 105: (0, 422), 91: (0, 423), 81: (0, 183), 82: (0, 184)},
  373: {29: (0, 424)},
  374: {29: (1, 267), 25: (1, 267)},
  375: {24: (1, 168), 34: (1, 168), 21: (1, 168), 22: (1, 168), 25: (1, 168), 26: (1, 168), 29: (1, 168), 9: (1, 168)},
  376: {24: (1, 173), 34: (1, 173), 21: (1, 173), 22: (1, 173), 25: (1, 173), 26: (1, 173), 29: (1, 173), 9: (1, 173)},
  377: {24: (1, 153), 34: (1, 153), 21: (1, 153), 22: (1, 153), 25: (1, 153), 26: (1, 153), 29: (1, 153), 9: (1, 153), 5: (0, 35), 40: (0, 37), 41: (0, 38)},
  378: {24: (1, 165), 34: (1, 165), 21: (1, 165), 22: (1, 165), 25: (1, 165), 26: (1, 165), 29: (1, 165), 9: (1, 165)},
  379: {24: (1, 162), 34: (1, 162), 21: (1, 162), 22: (1, 162), 25: (1, 162), 26: (1, 162), 29: (1, 162), 9: (1, 162)},
  380: {24: (1, 161), 34: (1, 161), 21: (1, 161), 22: (1, 161), 25: (1, 161), 26: (1, 161), 29: (1, 161), 9: (1, 161)},
  381: {24: (1, 152), 34: (1, 152), 21: (1, 152), 22: (1, 152), 25: (1, 152), 26: (1, 152), 29: (1, 152), 9: (1, 152)},
  382: {24: (1, 172), 34: (1, 172), 21: (1, 172), 22: (1, 172), 25: (1, 172), 26: (1, 172), 29: (1, 172), 9: (1, 172)},
  383: {24: (1, 164), 34: (1, 164), 21: (0, 336), 22: (1, 164), 25: (1, 164), 26: (1, 164), 29: (1, 164), 9: (1, 164)},
  384: {24: (1, 154), 34: (1, 154), 21: (1, 154), 22: (1, 154), 25: (1, 154), 26: (1, 154), 29: (1, 154), 9: (1, 154)},
  385: {24: (1, 163), 34: (1, 163), 21: (1, 163), 22: (1, 163), 25: (1, 163), 26: (1, 163), 29: (1, 163), 9: (1, 163)},
  386: {24: (1, 175), 34: (1, 175), 21: (1, 175), 22: (1, 175), 25: (1, 175), 26: (1, 175), 29: (1, 175), 9: (1, 175)},
  387: {24: (1, 171), 34: (1, 171), 21: (1, 171), 22: (1, 171), 25: (1, 171), 26: (1, 171), 29: (1, 171), 9: (1, 171)},
  388: {24: (1, 166), 34: (1, 166), 21: (1, 166), 22: (1, 166), 25: (1, 166), 26: (1, 166), 29: (1, 166), 9: (1, 166)},
  389: {24: (1, 81), 34: (1, 81), 21: (1, 81), 22: (1, 81), 25: (1, 81), 26: (1, 81), 29: (1, 81), 9: (1, 81)},
  390: {25: (0, 425), 29: (0, 426)},
  391: {93: (0, 262), 4: (0, 331), 3: (0, 255), 92: (0, 332), 7: (0, 260), 101: (0, 427), 105: (0, 428), 16: (0, 258), 94: (0, 264), 95: (0, 334), 65: (0, 259), 5: (0, 429), 14: (0, 265), 18: (0, 267), 96: (0, 268), 9: (0, 269)},
  392: {24: (1, 77), 34: (1, 77), 21: (1, 77), 22: (1, 77), 25: (1, 77), 26: (1, 77), 29: (1, 77), 9: (1, 77)},
  393: {24: (1, 208), 34: (1, 208), 21: (1, 208), 22: (1, 208), 25: (1, 208), 26: (1, 208), 29: (1, 208), 9: (1, 208)},
  394: {24: (1, 176), 34: (1, 176), 21: (1, 176), 22: (1, 176), 25: (1, 176), 26: (1, 176), 29: (1, 176), 9: (1, 176)},
  395: {93: (0, 262), 4: (0, 257), 3: (0, 255), 92: (0, 430), 7: (0, 260), 16: (0, 258), 94: (0, 264), 65: (0, 259), 14: (0, 265), 95: (0, 266), 18: (0, 267), 96: (0, 268), 9: (0, 269), 5: (0, 431)},
  396: {93: (0, 262), 4: (0, 257), 3: (0, 255), 92: (0, 432), 7: (0, 260), 16: (0, 258), 94: (0, 264), 65: (0, 259), 14: (0, 265), 95: (0, 266), 5: (0, 433), 18: (0, 267), 96: (0, 268), 9: (0, 269)},
  397: {24: (1, 179), 34: (1, 179), 21: (1, 179), 22: (1, 179), 25: (1, 179), 26: (1, 179), 29: (1, 179), 9: (1, 179)},
  398: {26: (0, 434), 9: (0, 26), 24: (0, 325), 34: (0, 326), 37: (0, 328), 21: (0, 329), 22: (0, 29)},
  399: {93: (0, 262), 4: (0, 257), 3: (0, 255), 92: (0, 435), 7: (0, 260), 16: (0, 258), 94: (0, 264), 65: (0, 259), 14: (0, 265), 95: (0, 266), 18: (0, 267), 96: (0, 268), 9: (0, 269)},
  400: {9: (0, 26), 24: (0, 325), 34: (0, 326), 26: (0, 436), 37: (0, 328), 21: (0, 329), 22: (0, 29)},
  401: {93: (0, 262), 4: (0, 257), 3: (0, 255), 92: (0, 437), 7: (0, 260), 16: (0, 258), 94: (0, 264), 65: (0, 259), 14: (0, 265), 95: (0, 266), 18: (0, 267), 96: (0, 268), 9: (0, 269)},
  402: {24: (1, 169), 34: (1, 169), 21: (1, 169), 22: (1, 169), 25: (1, 169), 26: (1, 169), 29: (1, 169), 9: (1, 169)},
  403: {24: (1, 170), 34: (1, 170), 21: (1, 170), 22: (1, 170), 25: (1, 170), 26: (1, 170), 29: (1, 170), 9: (1, 170)},
  404: {102: (0, 438), 5: (0, 439)},
  405: {70: (0, 124), 46: (0, 127), 72: (0, 408), 102: (0, 440)},
  406: {18: (1, 49), 7: (1, 49), 30: (1, 49), 31: (1, 49), 5: (1, 49), 32: (1, 49), 23: (1, 49), 13: (1, 49), 19: (1, 49), 16: (1, 49), 3: (1, 49), 36: (1, 49), 4: (1, 49), 9: (1, 49)},
  407: {18: (1, 50), 7: (1, 50), 30: (1, 50), 31: (1, 50), 5: (1, 50), 32: (1, 50), 23: (1, 50), 13: (1, 50), 19: (1, 50), 16: (1, 50), 3: (1, 50), 36: (1, 50), 4: (1, 50), 9: (1, 50)},
  408: {5: (1, 255), 102: (1, 255)},
  409: {18: (1, 48), 7: (1, 48), 30: (1, 48), 31: (1, 48), 5: (1, 48), 32: (1, 48), 23: (1, 48), 13: (1, 48), 19: (1, 48), 16: (1, 48), 3: (1, 48), 36: (1, 48), 4: (1, 48), 9: (1, 48)},
  410: {72: (0, 441), 70: (0, 124), 102: (0, 442), 46: (0, 127)},
  411: {4: (0, 5), 0: (0, 1), 2: (0, 3), 104: (0, 443), 14: (0, 15), 16: (0, 17), 17: (0, 18), 7: (0, 137), 9: (0, 10), 18: (0, 19), 3: (0, 60), 15: (0, 353), 74: (0, 354), 20: (0, 21)},
  412: {4: (0, 5), 0: (0, 1), 2: (0, 3), 14: (0, 15), 104: (0, 444), 16: (0, 17), 17: (0, 18), 7: (0, 137), 9: (0, 10), 18: (0, 19), 3: (0, 60), 15: (0, 353), 74: (0, 354), 20: (0, 21)},
  413: {29: (1, 258), 25: (1, 258)},
  414: {18: (1, 207), 21: (1, 207), 22: (1, 207), 7: (1, 207), 5: (1, 207), 23: (1, 207), 24: (1, 207), 13: (1, 207), 16: (1, 207), 3: (1, 207), 4: (1, 207), 9: (1, 207), 25: (1, 207), 26: (1, 207), 27: (1, 207), 28: (1, 207), 29: (1, 207), 30: (1, 207), 31: (1, 207), 32: (1, 207), 33: (1, 207), 34: (1, 207), 35: (1, 207), 19: (1, 207), 36: (1, 207)},
  415: {4: (0, 445)},
  416: {18: (1, 193), 21: (1, 193), 22: (1, 193), 7: (1, 193), 5: (1, 193), 23: (1, 193), 24: (1, 193), 13: (1, 193), 16: (1, 193), 3: (1, 193), 4: (1, 193), 9: (1, 193), 25: (1, 193), 26: (1, 193), 27: (1, 193), 28: (1, 193), 29: (1, 193), 30: (1, 193), 31: (1, 193), 32: (1, 193), 33: (1, 193), 34: (1, 193), 35: (1, 193), 19: (1, 193), 36: (1, 193)},
  417: {18: (1, 197), 21: (1, 197), 22: (1, 197), 7: (1, 197), 5: (1, 197), 23: (1, 197), 24: (1, 197), 13: (1, 197), 16: (1, 197), 3: (1, 197), 4: (1, 197), 9: (1, 197), 25: (1, 197), 26: (1, 197), 27: (1, 197), 28: (1, 197), 29: (1, 197), 30: (1, 197), 31: (1, 197), 32: (1, 197), 33: (1, 197), 34: (1, 197), 35: (1, 197), 19: (1, 197), 36: (1, 197)},
  418: {18: (1, 203), 21: (1, 203), 22: (1, 203), 7: (1, 203), 5: (1, 203), 23: (1, 203), 24: (1, 203), 13: (1, 203), 16: (1, 203), 3: (1, 203), 4: (1, 203), 9: (1, 203), 25: (1, 203), 26: (1, 203), 27: (1, 203), 28: (1, 203), 29: (1, 203), 30: (1, 203), 31: (1, 203), 32: (1, 203), 33: (1, 203), 34: (1, 203), 35: (1, 203), 19: (1, 203), 36: (1, 203)},
  419: {4: (0, 239), 16: (0, 175), 91: (0, 446), 14: (0, 176), 0: (0, 241), 18: (0, 178), 105: (0, 447), 80: (0, 243), 9: (0, 180), 7: (0, 8), 3: (0, 181), 81: (0, 183), 82: (0, 184)},
  420: {29: (0, 448)},
  421: {29: (1, 265), 25: (1, 265)},
  422: {29: (0, 449)},
  423: {29: (1, 266), 25: (1, 266)},
  424: {24: (1, 75), 34: (1, 75), 21: (1, 75), 22: (1, 75), 25: (1, 75), 26: (1, 75), 29: (1, 75), 9: (1, 75)},
  425: {93: (0, 262), 4: (0, 331), 3: (0, 255), 92: (0, 332), 7: (0, 260), 16: (0, 258), 5: (0, 450), 94: (0, 264), 95: (0, 334), 65: (0, 259), 14: (0, 265), 101: (0, 451), 105: (0, 452), 18: (0, 267), 96: (0, 268), 9: (0, 269)},
  426: {24: (1, 78), 34: (1, 78), 21: (1, 78), 22: (1, 78), 25: (1, 78), 26: (1, 78), 29: (1, 78), 9: (1, 78)},
  427: {29: (1, 271), 25: (1, 271)},
  428: {29: (0, 453)},
  429: {93: (0, 262), 4: (0, 331), 3: (0, 255), 92: (0, 332), 7: (0, 260), 101: (0, 454), 16: (0, 258), 94: (0, 264), 95: (0, 334), 65: (0, 259), 105: (0, 455), 14: (0, 265), 18: (0, 267), 96: (0, 268), 9: (0, 269)},
  430: {9: (0, 26), 24: (0, 325), 34: (0, 326), 26: (0, 456), 37: (0, 328), 21: (0, 329), 22: (0, 29)},
  431: {93: (0, 262), 4: (0, 257), 3: (0, 255), 92: (0, 457), 7: (0, 260), 16: (0, 258), 94: (0, 264), 65: (0, 259), 14: (0, 265), 95: (0, 266), 18: (0, 267), 96: (0, 268), 9: (0, 269)},
  432: {9: (0, 26), 24: (0, 325), 34: (0, 326), 37: (0, 328), 21: (0, 329), 22: (0, 29), 26: (0, 458)},
  433: {93: (0, 262), 4: (0, 257), 3: (0, 255), 92: (0, 459), 7: (0, 260), 16: (0, 258), 94: (0, 264), 65: (0, 259), 14: (0, 265), 95: (0, 266), 18: (0, 267), 96: (0, 268), 9: (0, 269)},
  434: {18: (1, 60), 7: (1, 60), 30: (1, 60), 31: (1, 60), 5: (1, 60), 32: (1, 60), 23: (1, 60), 13: (1, 60), 19: (1, 60), 16: (1, 60), 3: (1, 60), 102: (1, 60), 36: (1, 60), 4: (1, 60), 9: (1, 60)},
  435: {9: (0, 26), 24: (0, 325), 34: (0, 326), 22: (0, 29), 37: (0, 328), 21: (0, 329), 26: (0, 460)},
  436: {18: (1, 57), 7: (1, 57), 30: (1, 57), 31: (1, 57), 5: (1, 57), 32: (1, 57), 23: (1, 57), 13: (1, 57), 19: (1, 57), 16: (1, 57), 3: (1, 57), 102: (1, 57), 36: (1, 57), 4: (1, 57), 9: (1, 57)},
  437: {9: (0, 26), 24: (0, 325), 34: (0, 326), 22: (0, 29), 37: (0, 328), 21: (0, 329), 26: (0, 461)},
  438: {18: (1, 46), 7: (1, 46), 30: (1, 46), 31: (1, 46), 5: (1, 46), 32: (1, 46), 23: (1, 46), 13: (1, 46), 19: (1, 46), 16: (1, 46), 3: (1, 46), 36: (1, 46), 4: (1, 46), 9: (1, 46)},
  439: {72: (0, 441), 70: (0, 124), 102: (0, 462), 46: (0, 127)},
  440: {18: (1, 47), 7: (1, 47), 30: (1, 47), 31: (1, 47), 5: (1, 47), 32: (1, 47), 23: (1, 47), 13: (1, 47), 19: (1, 47), 16: (1, 47), 3: (1, 47), 36: (1, 47), 4: (1, 47), 9: (1, 47)},
  441: {5: (1, 256), 102: (1, 256)},
  442: {18: (1, 52), 7: (1, 52), 30: (1, 52), 31: (1, 52), 5: (1, 52), 32: (1, 52), 23: (1, 52), 13: (1, 52), 19: (1, 52), 16: (1, 52), 3: (1, 52), 36: (1, 52), 4: (1, 52), 9: (1, 52)},
  443: {33: (0, 463)},
  444: {35: (0, 464)},
  445: {18: (1, 189), 21: (1, 189), 22: (1, 189), 7: (1, 189), 5: (1, 189), 23: (1, 189), 24: (1, 189), 13: (1, 189), 16: (1, 189), 3: (1, 189), 4: (1, 189), 9: (1, 189), 25: (1, 189), 26: (1, 189), 27: (1, 189), 28: (1, 189), 29: (1, 189), 30: (1, 189), 31: (1, 189), 32: (1, 189), 33: (1, 189), 34: (1, 189), 35: (1, 189), 19: (1, 189), 36: (1, 189)},
  446: {29: (1, 268), 25: (1, 268)},
  447: {29: (0, 465)},
  448: {24: (1, 73), 34: (1, 73), 21: (1, 73), 22: (1, 73), 25: (1, 73), 26: (1, 73), 29: (1, 73), 9: (1, 73)},
  449: {24: (1, 76), 34: (1, 76), 21: (1, 76), 22: (1, 76), 25: (1, 76), 26: (1, 76), 29: (1, 76), 9: (1, 76)},
  450: {93: (0, 262), 4: (0, 331), 3: (0, 255), 92: (0, 332), 7: (0, 260), 16: (0, 258), 94: (0, 264), 95: (0, 334), 65: (0, 259), 14: (0, 265), 105: (0, 466), 101: (0, 467), 18: (0, 267), 96: (0, 268), 9: (0, 269)},
  451: {29: (1, 270), 25: (1, 270)},
  452: {29: (0, 468)},
  453: {24: (1, 82), 34: (1, 82), 21: (1, 82), 22: (1, 82), 25: (1, 82), 26: (1, 82), 29: (1, 82), 9: (1, 82)},
  454: {29: (1, 269), 25: (1, 269)},
  455: {29: (0, 469)},
  456: {24: (1, 180), 34: (1, 180), 21: (1, 180), 22: (1, 180), 25: (1, 180), 26: (1, 180), 29: (1, 180), 9: (1, 180)},
  457: {9: (0, 26), 24: (0, 325), 34: (0, 326), 37: (0, 328), 21: (0, 329), 22: (0, 29), 26: (0, 470)},
  458: {24: (1, 181), 34: (1, 181), 21: (1, 181), 22: (1, 181), 25: (1, 181), 26: (1, 181), 29: (1, 181), 9: (1, 181)},
  459: {9: (0, 26), 24: (0, 325), 34: (0, 326), 26: (0, 471), 37: (0, 328), 21: (0, 329), 22: (0, 29)},
  460: {18: (1, 61), 7: (1, 61), 30: (1, 61), 31: (1, 61), 5: (1, 61), 32: (1, 61), 23: (1, 61), 13: (1, 61), 19: (1, 61), 16: (1, 61), 3: (1, 61), 102: (1, 61), 36: (1, 61), 4: (1, 61), 9: (1, 61)},
  461: {18: (1, 55), 7: (1, 55), 30: (1, 55), 31: (1, 55), 5: (1, 55), 32: (1, 55), 23: (1, 55), 13: (1, 55), 19: (1, 55), 16: (1, 55), 3: (1, 55), 102: (1, 55), 36: (1, 55), 4: (1, 55), 9: (1, 55)},
  462: {18: (1, 53), 7: (1, 53), 30: (1, 53), 31: (1, 53), 5: (1, 53), 32: (1, 53), 23: (1, 53), 13: (1, 53), 19: (1, 53), 16: (1, 53), 3: (1, 53), 36: (1, 53), 4: (1, 53), 9: (1, 53)},
  463: {58: (0, 472), 28: (0, 68), 25: (0, 69)},
  464: {4: (0, 5), 0: (0, 1), 104: (0, 473), 2: (0, 3), 14: (0, 15), 16: (0, 17), 17: (0, 18), 7: (0, 137), 9: (0, 10), 18: (0, 19), 3: (0, 60), 15: (0, 353), 74: (0, 354), 20: (0, 21)},
  465: {24: (1, 72), 34: (1, 72), 21: (1, 72), 22: (1, 72), 25: (1, 72), 26: (1, 72), 29: (1, 72), 9: (1, 72)},
  466: {29: (0, 474)},
  467: {29: (1, 272), 25: (1, 272)},
  468: {24: (1, 79), 34: (1, 79), 21: (1, 79), 22: (1, 79), 25: (1, 79), 26: (1, 79), 29: (1, 79), 9: (1, 79)},
  469: {24: (1, 80), 34: (1, 80), 21: (1, 80), 22: (1, 80), 25: (1, 80), 26: (1, 80), 29: (1, 80), 9: (1, 80)},
  470: {24: (1, 177), 34: (1, 177), 21: (1, 177), 22: (1, 177), 25: (1, 177), 26: (1, 177), 29: (1, 177), 9: (1, 177)},
  471: {24: (1, 178), 34: (1, 178), 21: (1, 178), 22: (1, 178), 25: (1, 178), 26: (1, 178), 29: (1, 178), 9: (1, 178)},
  472: {7: (0, 8), 4: (0, 475), 0: (0, 476)},
  473: {33: (0, 477)},
  474: {24: (1, 83), 34: (1, 83), 21: (1, 83), 22: (1, 83), 25: (1, 83), 26: (1, 83), 29: (1, 83), 9: (1, 83)},
  475: {18: (1, 12), 7: (1, 12), 30: (1, 12), 31: (1, 12), 5: (1, 12), 23: (1, 12), 32: (1, 12), 13: (1, 12), 19: (1, 12), 16: (1, 12), 3: (1, 12), 36: (1, 12), 4: (1, 12), 9: (1, 12)},
  476: {18: (1, 14), 7: (1, 14), 30: (1, 14), 31: (1, 14), 5: (1, 14), 23: (1, 14), 32: (1, 14), 13: (1, 14), 19: (1, 14), 16: (1, 14), 3: (1, 14), 36: (1, 14), 4: (1, 14), 9: (1, 14)},
  477: {58: (0, 478), 28: (0, 68), 25: (0, 69)},
  478: {7: (0, 8), 4: (0, 479), 0: (0, 480)},
  479: {18: (1, 13), 7: (1, 13), 30: (1, 13), 31: (1, 13), 5: (1, 13), 23: (1, 13), 32: (1, 13), 13: (1, 13), 19: (1, 13), 16: (1, 13), 3: (1, 13), 36: (1, 13), 4: (1, 13), 9: (1, 13)},
  480: {18: (1, 15), 7: (1, 15), 30: (1, 15), 31: (1, 15), 5: (1, 15), 23: (1, 15), 32: (1, 15), 13: (1, 15), 19: (1, 15), 16: (1, 15), 3: (1, 15), 36: (1, 15), 4: (1, 15), 9: (1, 15)},
}
TOKEN_TYPES = (
{0: 'reference',
 1: '__anon_plus_0',
 2: '_tr_expr_no_int',
 3: 'NAME',
 4: 'STATE',
 5: '_WS',
 6: 'comment',
 7: 'LSQB',
 8: 'rulestring_tr',
 9: '_NEGATE_LIVE',
 10: 'line',
 11: 'table',
 12: 'transition',
 13: '__ANON_15',
 14: 'range',
 15: '_tr_expr',
 16: '_VAR_OPEN',
 17: 'tr_var',
 18: '_NEGATE_ALL',
 19: 'BANG',
 20: 'tr_operation',
 21: '_MULT',
 22: '_SUBT',
 23: '_NL',
 24: '_LROT',
 25: 'COMMA',
 26: 'RSQB',
 27: '_PERMUTE',
 28: 'SEMICOLON',
 29: '_VAR_CLOSE',
 30: '_HOIST_ARROW',
 31: '$END',
 32: '__ANON_14',
 33: '_HENSEL_CLOSE',
 34: '_RROT',
 35: '_HENSEL_SEP',
 36: '_NORMAL_ARROW',
 37: '_subt',
 38: 'EQUAL',
 39: 'COLON',
 40: 'PLUS',
 41: '__ANON_2',
 42: '_digit_bind',
 43: '__ANON_11',
 44: '__ANON_5',
 45: '__ANON_12',
 46: 'COMPASS_DIR',
 47: '__ANON_7',
 48: '__ANON_4',
 49: '__ANON_6',
 50: '__ANON_3',
 51: '__ANON_10',
 52: '__ANON_8',
 53: '__ANON_9',
 54: '_aux',
 55: 'normal_aux',
 56: 'hoist_aux',
 57: 'end_bs',
 58: '_sep',
 59: '__anon_plus_1',
 60: '_expr_no_int',
 61: 'var',
 62: 'operation',
 63: '_tr_expr_no_rec',
 64: 'INT',
 65: 'LEAVE_ALONE',
 66: '_tr_expr_norec_int',
 67: '_expr',
 68: '__ANON_0',
 69: '_auxlist',
 70: 'cdir_delay',
 71: 'symmetried_aux',
 72: 'auxiliary',
 73: 'SYMMETRY_NAME',
 74: 'inline_binding',
 75: '_HENSEL_OPEN',
 76: 'crange',
 77: 'tr_state',
 78: 'prefix',
 79: '__anon_star_5',
 80: '_ref_expr_no_int',
 81: 'ref_operation',
 82: 'ref_var',
 83: '__anon_star_2',
 84: 'LPAR',
 85: '_aux_group',
 86: 'hensel_rulestring',
 87: '__ANON_13',
 88: '_expr_no_rec',
 89: '_expr_norec_int',
 90: '__anon_star_4',
 91: '_ref_expr',
 92: '_aux_expr_no_int',
 93: 'leave_alone_mult',
 94: 'aux_operation',
 95: 'aux_reference',
 96: 'aux_var',
 97: '__ANON_1',
 98: '_ref_expr_no_rec',
 99: '__anon_star_6',
 100: '_ref_expr_norec_int',
 101: '_aux_expr',
 102: 'RPAR',
 103: '__anon_star_3',
 104: '_rs_expr',
 105: 'EXTEND_LAST',
 106: '_aux_expr_norec_int',
 107: '_aux_expr_no_rec',
 108: '__anon_star_7'}
)
parse_table.states = {s: {TOKEN_TYPES[t]: (a, RULES[x] if a is Reduce else x) for t, (a, x) in acts.items()}
                      for s, acts in STATES.items()}
parse_table.start_state = 0
parse_table.end_state = 64
class Lark_StandAlone:
  def __init__(self, transformer=None, postlex=None, *, tbl):
     callback = parse_tree_builder.create_callback(transformer=transformer)
     callbacks = {rule: getattr(callback, rule.cb_name or rule.origin, None) for rule in RULES.values()}
     self.parser = _Parser(parse_table, callbacks)
     self.postlex = postlex
     self._tbl = tbl
     self._con_lexer = ContextualLexer()
  def lex(self, stream, tbl):
    return self._con_lexer.lex(stream, tbl)
  def parse(self, stream):
     tokens = self.lex(stream, self._tbl)
     sps = self._con_lexer.set_parser_state
     if self.postlex: tokens = self.postlex.process(tokens)
     return self.parser.parse(tokens, sps)
