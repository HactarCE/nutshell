# The file was automatically generated by Lark v0.6.4
# # # # # # # # # # # # # # # # #
# MODIFIED by the "Nutshell" tool's author to report additional
# parse info and to fix bugs (rule.alias = internal_callback_name,
# wrapper_chain being a consumed filter()) arising when used more
# than once in the same run.
# # # # # # # # # # # # # # # # #
#
#
#   Lark Stand-alone Generator Tool
# ----------------------------------
# Generates a stand-alone LALR(1) parser with a standard lexer
#
# Git:    https://github.com/erezsh/lark
# Author: Erez Shinan (erezshin@gmail.com)
#
#
#    >>> LICENSE
#
#    This tool and its generated code use a separate license from Lark.
#
#    It is licensed under GPLv2 or above.
#
#    If you wish to purchase a commercial license for this tool and its
#    generated code, contact me via email.
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    See <http://www.gnu.org/licenses/>.
#
#

class LarkError(Exception):
    pass

class GrammarError(LarkError):
    pass

class ParseError(LarkError):
    pass

class LexError(LarkError):
    pass

class UnexpectedInput(LarkError):
    pos_in_stream = None

    def get_context(self, text, span=40):
        pos = self.pos_in_stream
        start = max(pos - span, 0)
        end = pos + span
        before = text[start:pos].rsplit('\n', 1)[-1]
        after = text[pos:end].split('\n', 1)[0]
        return before + after + '\n' + ' ' * len(before) + '^\n'

    def match_examples(self, parse_fn, examples):
        """ Given a parser instance and a dictionary mapping some label with
            some malformed syntax examples, it'll return the label for the
            example that bests matches the current error.
        """
        assert self.state is not None, "Not supported for this exception"

        candidate = None
        for label, example in examples.items():
            assert not isinstance(example, STRING_TYPE)

            for malformed in example:
                try:
                    parse_fn(malformed)
                except UnexpectedInput as ut:
                    if ut.state == self.state:
                        try:
                            if ut.token == self.token:  # Try exact match first
                                return label
                        except AttributeError:
                            pass
                        if not candidate:
                            candidate = label

        return candidate


class UnexpectedCharacters(LexError, UnexpectedInput):
    def __init__(self, seq, lex_pos, line, column, allowed=None, considered_tokens=None, state=None):
        message = "No terminal defined for '%s' at line %d col %d" % (seq[lex_pos], line, column)

        self.line = line
        self.column = column
        self.allowed = allowed
        self.considered_tokens = considered_tokens
        self.pos_in_stream = lex_pos
        self.state = state

        message += '\n\n' + self.get_context(seq)
        if allowed:
            message += '\nExpecting: %s\n' % allowed

        super(UnexpectedCharacters, self).__init__(message)



class UnexpectedToken(ParseError, UnexpectedInput):
    def __init__(self, token, expected, considered_rules=None, state=None):
        self.token = token
        self.expected = expected     # XXX str shouldn't necessary
        self.line = getattr(token, 'line', '?')
        self.column = getattr(token, 'column', '?')
        self.considered_rules = considered_rules
        self.state = state
        self.pos_in_stream = getattr(token, 'pos_in_stream', None)

        message = ("Unexpected token %r at line %s, column %s.\n"
                   "Expected one of: \n\t* %s\n"
                   % (token, self.line, self.column, '\n\t* '.join(self.expected)))

        super(UnexpectedToken, self).__init__(message)


try:
    STRING_TYPE = basestring
except NameError:   # Python 3
    STRING_TYPE = str


import types
from functools import wraps, partial
from contextlib import contextmanager

Str = type(u'')

def smart_decorator(f, create_decorator):
    if isinstance(f, types.FunctionType):
        return wraps(f)(create_decorator(f, True))

    elif isinstance(f, (type, types.BuiltinFunctionType)):
        return wraps(f)(create_decorator(f, False))

    elif isinstance(f, types.MethodType):
        return wraps(f)(create_decorator(f.__func__, True))

    elif isinstance(f, partial):
        # wraps does not work for partials in 2.7: https://bugs.python.org/issue3445
        return create_decorator(f.__func__, True)

    else:
        return create_decorator(f.__func__.__call__, True)



class Meta:
    pass

class Tree(object):
    def __init__(self, data, children, meta=None):
        self.data = data
        self.children = children
        self._meta = meta

    @property
    def meta(self):
        if self._meta is None:
            self._meta = Meta()
        return self._meta

    def __repr__(self):
        return 'Tree(%s, %s)' % (self.data, self.children)

    def _pretty_label(self):
        return self.data

    def _pretty(self, level, indent_str):
        if len(self.children) == 1 and not isinstance(self.children[0], Tree):
            return [ indent_str*level, self._pretty_label(), '\t', '%s' % (self.children[0],), '\n']

        l = [ indent_str*level, self._pretty_label(), '\n' ]
        for n in self.children:
            if isinstance(n, Tree):
                l += n._pretty(level+1, indent_str)
            else:
                l += [ indent_str*(level+1), '%s' % (n,), '\n' ]

        return l

    def pretty(self, indent_str='  '):
        return ''.join(self._pretty(0, indent_str))
    def __eq__(self, other):
        try:
            return self.data == other.data and self.children == other.children
        except AttributeError:
            return False

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self):
        return hash((self.data, tuple(self.children)))

from inspect import getmembers, getmro

class Discard(Exception):
    pass

# Transformers

class Transformer:
    """Visits the tree recursively, starting with the leaves and finally the root (bottom-up)

    Calls its methods (provided by user via inheritance) according to tree.data
    The returned value replaces the old one in the structure.

    Can be used to implement map or reduce.
    """

    def _call_userfunc(self, tree, new_children=None):
        # Assumes tree is already transformed
        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            if getattr(f, 'meta', False):
                return f(children, tree.meta)
            elif getattr(f, 'inline', False):
                return f(*children)
            elif getattr(f, 'whole_tree', False):
                if new_children is not None:
                    raise NotImplementedError("Doesn't work with the base Transformer class")
                return f(tree)
            else:
                return f(children)

    def _transform_children(self, children):
        for c in children:
            try:
                yield self._transform_tree(c) if isinstance(c, Tree) else c
            except Discard:
                pass

    def _transform_tree(self, tree):
        children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree, children)

    def transform(self, tree):
        return self._transform_tree(tree)

    def __mul__(self, other):
        return TransformerChain(self, other)

    def __default__(self, data, children, meta):
        "Default operation on tree (for override)"
        return Tree(data, children, meta)

    @classmethod
    def _apply_decorator(cls, decorator, **kwargs):
        mro = getmro(cls)
        assert mro[0] is cls
        libmembers = {name for _cls in mro[1:] for name, _ in getmembers(_cls)}
        for name, value in getmembers(cls):
            if name.startswith('_') or name in libmembers:
                continue

            setattr(cls, name, decorator(value, **kwargs))
        return cls


class InlineTransformer(Transformer):   # XXX Deprecated
    def _call_userfunc(self, tree, new_children=None):
        # Assumes tree is already transformed
        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            return f(*children)


class TransformerChain(object):
    def __init__(self, *transformers):
        self.transformers = transformers

    def transform(self, tree):
        for t in self.transformers:
            tree = t.transform(tree)
        return tree

    def __mul__(self, other):
        return TransformerChain(*self.transformers + (other,))


class Transformer_InPlace(Transformer):
    "Non-recursive. Changes the tree in-place instead of returning new instances"
    def _transform_tree(self, tree):           # Cancel recursion
        return self._call_userfunc(tree)

    def transform(self, tree):
        for subtree in tree.iter_subtrees():
            subtree.children = list(self._transform_children(subtree.children))

        return self._transform_tree(tree)


class Transformer_InPlaceRecursive(Transformer):
    "Recursive. Changes the tree in-place instead of returning new instances"
    def _transform_tree(self, tree):
        tree.children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree)



# Visitors

class VisitorBase:
    def _call_userfunc(self, tree):
        return getattr(self, tree.data, self.__default__)(tree)

    def __default__(self, tree):
        "Default operation on tree (for override)"
        return tree


class Visitor(VisitorBase):
    """Bottom-up visitor, non-recursive

    Visits the tree, starting with the leaves and finally the root (bottom-up)
    Calls its methods (provided by user via inheritance) according to tree.data
    """


    def visit(self, tree):
        for subtree in tree.iter_subtrees():
            self._call_userfunc(subtree)
        return tree

class Visitor_Recursive(VisitorBase):
    """Bottom-up visitor, recursive

    Visits the tree, starting with the leaves and finally the root (bottom-up)
    Calls its methods (provided by user via inheritance) according to tree.data
    """

    def visit(self, tree):
        for child in tree.children:
            if isinstance(child, Tree):
                self.visit(child)

        f = getattr(self, tree.data, self.__default__)
        f(tree)
        return tree



def visit_children_decor(func):
    "See Interpreter"
    @wraps(func)
    def inner(cls, tree):
        values = cls.visit_children(tree)
        return func(cls, values)
    return inner


class Interpreter:
    """Top-down visitor, recursive

    Visits the tree, starting with the root and finally the leaves (top-down)
    Calls its methods (provided by user via inheritance) according to tree.data

    Unlike Transformer and Visitor, the Interpreter doesn't automatically visit its sub-branches.
    The user has to explicitly call visit_children, or use the @visit_children_decor
    """
    def visit(self, tree):
        return getattr(self, tree.data)(tree)

    def visit_children(self, tree):
        return [self.visit(child) if isinstance(child, Tree) else child
                for child in tree.children]

    def __getattr__(self, name):
        return self.__default__

    def __default__(self, tree):
        return self.visit_children(tree)




# Decorators

def _apply_decorator(obj, decorator, **kwargs):
    try:
        _apply = obj._apply_decorator
    except AttributeError:
        return decorator(obj, **kwargs)
    else:
        return _apply(decorator, **kwargs)



def _inline_args__func(func):
    @wraps(func)
    def create_decorator(_f, with_self):
        if with_self:
            def f(self, children):
                return _f(self, *children)
        else:
            def f(self, children):
                return _f(*children)
        return f

    return smart_decorator(func, create_decorator)


def inline_args(obj):   # XXX Deprecated
    return _apply_decorator(obj, _inline_args__func)



def _visitor_args_func_dec(func, inline=False, meta=False, whole_tree=False):
    assert [whole_tree, meta, inline].count(True) <= 1
    def create_decorator(_f, with_self):
        if with_self:
            def f(self, *args, **kwargs):
                return _f(self, *args, **kwargs)
        else:
            def f(self, *args, **kwargs):
                return _f(*args, **kwargs)
        return f

    f = smart_decorator(func, create_decorator)
    f.inline = inline
    f.meta = meta
    f.whole_tree = whole_tree
    return f

def v_args(inline=False, meta=False, tree=False):
    "A convenience decorator factory, for modifying the behavior of user-supplied visitor methods"
    if [tree, meta, inline].count(True) > 1:
        raise ValueError("Visitor functions can either accept tree, or meta, or be inlined. These cannot be combined.")
    def _visitor_args_dec(obj):
        return _apply_decorator(obj, _visitor_args_func_dec, inline=inline, meta=meta, whole_tree=tree)
    return _visitor_args_dec



class Indenter:
    def __init__(self):
        self.paren_level = 0
        self.indent_level = [0]

    def handle_NL(self, token):
        if self.paren_level > 0:
            return

        yield token

        indent_str = token.rsplit('\n', 1)[1] # Tabs and spaces
        indent = indent_str.count(' ') + indent_str.count('\t') * self.tab_len

        if indent > self.indent_level[-1]:
            self.indent_level.append(indent)
            yield Token.new_borrow_pos(self.INDENT_type, indent_str, token)
        else:
            while indent < self.indent_level[-1]:
                self.indent_level.pop()
                yield Token.new_borrow_pos(self.DEDENT_type, indent_str, token)

            assert indent == self.indent_level[-1], '%s != %s' % (indent, self.indent_level[-1])

    def process(self, stream):
        for token in stream:
            if token.type == self.NL_type:
                for t in self.handle_NL(token):
                    yield t
            else:
                yield token

            if token.type in self.OPEN_PAREN_types:
                self.paren_level += 1
            elif token.type in self.CLOSE_PAREN_types:
                self.paren_level -= 1
                assert self.paren_level >= 0

        while len(self.indent_level) > 1:
            self.indent_level.pop()
            yield Token(self.DEDENT_type, '')

        assert self.indent_level == [0], self.indent_level

    # XXX Hack for ContextualLexer. Maybe there's a more elegant solution?
    @property
    def always_accept(self):
        return (self.NL_type,)


class Token(Str):
    __slots__ = ('type', 'pos_in_stream', 'value', 'line', 'column', 'end_line', 'end_column')

    def __new__(cls, type_, value, pos_in_stream=None, line=None, column=None, *, tbl=None):
        self = super(Token, cls).__new__(cls, value)
        if tbl is not None and type_ == 'STATE' and int(value) >= tbl.n_states:
            tbl.n_states = 1 + int(value)
        self.type = type_
        self.pos_in_stream = pos_in_stream
        self.value = value
        self.line = line
        self.column = column
        self.end_line = None
        self.end_column = None
        return self

    @classmethod
    def new_borrow_pos(cls, type_, value, borrow_t):
        return cls(type_, value, borrow_t.pos_in_stream, line=borrow_t.line, column=borrow_t.column)

    def __reduce__(self):
        return (self.__class__, (self.type, self.value, self.pos_in_stream, self.line, self.column, ))

    def __repr__(self):
        return 'Token(%s, %r)' % (self.type, self.value)

    def __deepcopy__(self, memo):
        return Token(self.type, self.value, self.pos_in_stream, self.line, self.column)

    def __eq__(self, other):
        if isinstance(other, Token) and self.type != other.type:
            return False

        return Str.__eq__(self, other)

    __hash__ = Str.__hash__


class LineCounter:
    def __init__(self):
        self.newline_char = '\n'
        self.char_pos = 0
        self.line = 1
        self.column = 1
        self.line_start_pos = 0

    def feed(self, token, test_newline=True):
        """Consume a token and calculate the new line & column.

        As an optional optimization, set test_newline=False is token doesn't contain a newline.
        """
        if test_newline:
            newlines = token.count(self.newline_char)
            if newlines:
                self.line += newlines
                self.line_start_pos = self.char_pos + token.rindex(self.newline_char) + 1

        self.char_pos += len(token)
        self.column = self.char_pos - self.line_start_pos + 1

class _Lex:
    "Built to serve both Lexer and ContextualLexer"
    def __init__(self, lexer, state=None):
        self.lexer = lexer
        self.state = state

    def lex(self, stream, newline_types, ignore_types, tbl):
        newline_types = frozenset(newline_types)
        ignore_types = frozenset(ignore_types)
        line_ctr = LineCounter()

        while line_ctr.char_pos < len(stream):
            lexer = self.lexer
            for mre, type_from_index in lexer.mres:
                m = mre.match(stream, line_ctr.char_pos)
                if not m:
                    continue

                t = None
                value = m.group(0)
                type_ = type_from_index[m.lastindex]
                if type_ not in ignore_types:
                    t = Token(type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column, tbl=tbl)
                    if t.type in lexer.callback:
                        t = lexer.callback[t.type](t)
                    yield t
                else:
                    if type_ in lexer.callback:
                        t = Token(type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column, tbl=tbl)
                        lexer.callback[type_](t)

                line_ctr.feed(value, type_ in newline_types)
                if t:
                    t.end_line = line_ctr.line
                    t.end_column = line_ctr.column

                break
            else:
                raise UnexpectedCharacters(stream, line_ctr.char_pos, line_ctr.line, line_ctr.column, state=self.state)


class UnlessCallback:
    def __init__(self, mres):
        self.mres = mres

    def __call__(self, t):
        for mre, type_from_index in self.mres:
            m = mre.match(t.value)
            if m:
                t.type = type_from_index[m.lastindex]
                break
        return t


from functools import partial, wraps


class ExpandSingleChild:
    def __init__(self, node_builder):
        self.node_builder = node_builder

    def __call__(self, children):
        if len(children) == 1:
            return children[0]
        else:
            return self.node_builder(children)


class PropagatePositions:
    def __init__(self, node_builder):
        self.node_builder = node_builder

    def __call__(self, children):
        res = self.node_builder(children)

        if isinstance(res, Tree):
            res.meta.empty = True

            for c in children:
                if isinstance(c, Tree) and c.children and not c.meta.empty:
                    res.meta.line = c.meta.line
                    res.meta.column = c.meta.column
                    res.meta.start_pos = c.meta.start_pos
                    res.meta.empty = False
                    break
                elif isinstance(c, Token):
                    res.meta.line = c.line
                    res.meta.column = c.column
                    res.meta.start_pos = c.pos_in_stream
                    res.meta.empty = False
                    break

            for c in reversed(children):
                if isinstance(c, Tree) and c.children and not c.meta.empty:
                    res.meta.end_line = c.meta.end_line
                    res.meta.end_column = c.meta.end_column
                    res.meta.end_pos = c.meta.end_pos
                    res.meta.empty = False
                    break
                elif isinstance(c, Token):
                    res.meta.end_line = c.end_line
                    res.meta.end_column = c.end_column
                    res.meta.end_pos = c.pos_in_stream + len(c.value)
                    res.meta.empty = False
                    break

        return res


class ChildFilter:
    def __init__(self, to_include, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include

    def __call__(self, children):
        filtered = []
        for i, to_expand in self.to_include:
            if to_expand:
                filtered += children[i].children
            else:
                filtered.append(children[i])

        return self.node_builder(filtered)

class ChildFilterLALR(ChildFilter):
    "Optimized childfilter for LALR (assumes no duplication in parse tree, so it's safe to change it)"

    def __call__(self, children):
        filtered = []
        for i, to_expand in self.to_include:
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:   # Optimize for left-recursion
                    filtered = children[i].children
            else:
                filtered.append(children[i])

        return self.node_builder(filtered)

def _should_expand(sym):
    return not sym.is_term and sym.name.startswith('_')

def maybe_create_child_filter(expansion, keep_all_tokens, ambiguous):
    to_include = [(i, _should_expand(sym)) for i, sym in enumerate(expansion)
                  if keep_all_tokens or not (sym.is_term and sym.filter_out)]

    if len(to_include) < len(expansion) or any(to_expand for i, to_expand in to_include):
        return partial(ChildFilter if ambiguous else ChildFilterLALR, to_include)


class Callback(object):
    pass


def ptb_inline_args(func):
    @wraps(func)
    def f(children):
        return func(*children)
    return f



class ParseTreeBuilder:
    def __init__(self, rules, tree_class, propagate_positions=True, keep_all_tokens=False, ambiguous=False):
        self.tree_class = tree_class
        self.propagate_positions = propagate_positions
        self.always_keep_all_tokens = keep_all_tokens
        self.ambiguous = ambiguous

        self.rule_builders = list(self._init_builders(rules))

        self.user_aliases = {}

    def _init_builders(self, rules):
        for rule in rules:
            options = rule.options
            keep_all_tokens = self.always_keep_all_tokens or (options.keep_all_tokens if options else False)
            expand_single_child = options.expand1 if options else False

            wrapper_chain = list(filter(None, [
                (expand_single_child and not rule.alias) and ExpandSingleChild,
                maybe_create_child_filter(rule.expansion, keep_all_tokens, self.ambiguous),
                self.propagate_positions and PropagatePositions,
            ]))

            yield rule, wrapper_chain


    def create_callback(self, transformer=None):
        callback = Callback()

        i = 0
        for rule, wrapper_chain in self.rule_builders:
            internal_callback_name = '_cb%d_%s' % (i, rule.origin)
            i += 1

            user_callback_name = rule.alias or rule.origin.name
            try:
                f = getattr(transformer, user_callback_name)
                assert not getattr(f, 'meta', False), "Meta args not supported for internal transformer"
                # XXX InlineTransformer is deprecated!
                if getattr(f, 'inline', False) or isinstance(transformer, InlineTransformer):
                    f = ptb_inline_args(f)
            except AttributeError:
                f = partial(self.tree_class, user_callback_name)

            self.user_aliases[rule] = rule.alias
            rule.cb_name = internal_callback_name

            for w in wrapper_chain:
                f = w(f)

            if hasattr(callback, internal_callback_name):
                raise GrammarError("Rule '%s' already exists" % (rule,))
            setattr(callback, internal_callback_name, f)

        return callback



class _Parser:
    def __init__(self, parse_table, callbacks):
        self.states = parse_table.states
        self.start_state = parse_table.start_state
        self.end_state = parse_table.end_state
        self.callbacks = callbacks

    def parse(self, seq, set_state=None):
        token = None
        stream = iter(seq)
        states = self.states

        state_stack = [self.start_state]
        value_stack = []

        if set_state: set_state(self.start_state)

        def get_action(token):
            state = state_stack[-1]
            try:
                return states[state][token.type]
            except KeyError:
                expected = [s for s in states[state].keys() if s.isupper()]
                raise UnexpectedToken(token, expected, state=state)

        def reduce(rule):
            size = len(rule.expansion)
            if size:
                s = value_stack[-size:]
                del state_stack[-size:]
                del value_stack[-size:]
            else:
                s = []

            value = self.callbacks[rule](s)

            _action, new_state = states[state_stack[-1]][rule.origin.name]
            assert _action is Shift
            state_stack.append(new_state)
            value_stack.append(value)

        # Main LALR-parser loop
        for token in stream:
            while True:
                action, arg = get_action(token)
                assert arg != self.end_state

                if action is Shift:
                    state_stack.append(arg)
                    value_stack.append(token)
                    if set_state: set_state(arg)
                    break # next token
                else:
                    reduce(arg)

        token = Token.new_borrow_pos('$END', '', token) if token else Token('$END', '', 0, 1, 1)
        while True:
            _action, arg = get_action(token)
            if _action is Shift:
                assert arg == self.end_state
                val ,= value_stack
                return val
            else:
                reduce(arg)


class Symbol(object):
    is_term = NotImplemented

    def __init__(self, name):
        self.name = name

    def __eq__(self, other):
        assert isinstance(other, Symbol), other
        return self.is_term == other.is_term and self.name == other.name

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self):
        return hash(self.name)

    def __repr__(self):
        return '%s(%r)' % (type(self).__name__, self.name)

    fullrepr = property(__repr__)

class Terminal(Symbol):
    is_term = True

    def __init__(self, name, filter_out=False):
        self.name = name
        self.filter_out = filter_out

    @property
    def fullrepr(self):
        return '%s(%r, %r)' % (type(self).__name__, self.name, self.filter_out)


class NonTerminal(Symbol):
    is_term = False

class Rule(object):
    """
        origin : a symbol
        expansion : a list of symbols
    """
    def __init__(self, origin, expansion, alias=None, options=None):
        self.origin = origin
        self.expansion = expansion
        self.alias = alias
        self.cb_name = None
        self.options = options

    def __str__(self):
        return '<%s : %s>' % (self.origin, ' '.join(map(str,self.expansion)))

    def __repr__(self):
        return 'Rule(%r, %r, %r, %r)' % (self.origin, self.expansion, self.alias, self.options)


class RuleOptions:
    def __init__(self, keep_all_tokens=False, expand1=False, priority=None):
        self.keep_all_tokens = keep_all_tokens
        self.expand1 = expand1
        self.priority = priority

    def __repr__(self):
        return 'RuleOptions(%r, %r, %r)' % (
            self.keep_all_tokens,
            self.expand1,
            self.priority,
        )

Shift = 0
Reduce = 1
import re
class LexerRegexps: pass
NEWLINE_TYPES = ['_NL', 'NEWLINE', '__ANON_2', '__ANON_3']
IGNORE_TYPES = []
LEXERS = {}
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: '__ANON_6',
   5: '_NEGATE_ALL',
   6: '_VAR_OPEN',
   7: 'BANG',
   8: 'LSQB',
   9: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[0] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<__ANON_4>\\.\\.)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<PLUS>\\+)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_5',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_6',
   16: '_NEGATE_ALL',
   17: '__ANON_4',
   18: '_VAR_CLOSE',
   19: '_VAR_OPEN',
   20: 'BANG',
   21: 'COMMA',
   22: 'LSQB',
   23: 'PLUS',
   24: 'RSQB',
   25: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[1] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<__ANON_5>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '__ANON_5',
   3: '_WS',
   4: '_NL',
   5: 'STATE',
   6: '__ANON_6',
   7: '_NEGATE_ALL',
   8: '_VAR_OPEN',
   9: 'BANG',
   10: 'LSQB',
   11: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[2] = (lexer_regexps)
MRES = (
[('(?P<COMMA>\\,)|(?P<SEMICOLON>\\;)', {1: 'COMMA', 2: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[3] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: '__ANON_6',
   5: '_NEGATE_ALL',
   6: '_VAR_OPEN',
   7: 'BANG',
   8: 'LSQB',
   9: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[4] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COLON>\\:)|(?P<COMMA>\\,)|(?P<EQUAL>\\=)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_5',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_6',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COLON',
   21: 'COMMA',
   22: 'EQUAL',
   23: 'LSQB',
   24: 'RSQB',
   25: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[5] = (lexer_regexps)
MRES = (
[('(?P<INT>[0123456789]+)|(?P<COMPASS_DIR>NE|SE|SW|NW|N|E|S|W|FG|BG)',
  {1: 'INT', 2: 'COMPASS_DIR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[6] = (lexer_regexps)
MRES = (
[]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[7] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: '__ANON_6',
   4: '_NEGATE_ALL',
   5: '_VAR_OPEN',
   6: 'BANG',
   7: 'LSQB',
   8: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[8] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_5>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_5',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_6',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[9] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_5>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_5',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_6',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[10] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_5',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_6',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[11] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME', 2: 'STATE', 3: '_NEGATE_ALL', 4: '_VAR_OPEN', 5: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[12] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_5',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_6',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[13] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: '_NL',
   4: 'STATE',
   5: '__ANON_6',
   6: '_NEGATE_ALL',
   7: '_VAR_OPEN',
   8: 'BANG',
   9: 'LSQB',
   10: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[14] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: '_NL',
   4: 'STATE',
   5: '__ANON_6',
   6: '_NEGATE_ALL',
   7: '_VAR_OPEN',
   8: 'BANG',
   9: 'LSQB',
   10: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[15] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: '_NEGATE_ALL',
   4: '_VAR_OPEN',
   5: 'LSQB',
   6: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[16] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_5',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_6',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[17] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: '_NEGATE_ALL',
   4: '_VAR_OPEN',
   5: 'LSQB',
   6: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[18] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: '_NEGATE_ALL',
   4: '_VAR_OPEN',
   5: 'LSQB',
   6: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[19] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_5',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_6',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[20] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_5',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_6',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[21] = (lexer_regexps)
MRES = (
[('(?P<INT>[0123456789]+)|(?P<_WS>(?:(?:\\ |\t))+)', {1: 'INT', 2: '_WS'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[22] = (lexer_regexps)
MRES = (
[('(?P<__ANON_4>\\.\\.)|(?P<PLUS>\\+)', {1: '__ANON_4', 2: 'PLUS'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[23] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<INT>[0123456789]+)|(?P<STATE>\\d+)|(?P<_VAR_OPEN>[({])',
  {1: 'NAME', 2: 'INT', 3: 'STATE', 4: '_VAR_OPEN'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[24] = (lexer_regexps)
MRES = (
[('(?P<_WS>(?:(?:\\ |\t))+)|(?P<STATE>\\d+)', {1: '_WS', 2: 'STATE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[25] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: '_NL',
   4: 'STATE',
   5: '__ANON_6',
   6: '_NEGATE_ALL',
   7: '_VAR_OPEN',
   8: 'BANG',
   9: 'LSQB',
   10: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[26] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: '__ANON_6',
   5: '_NEGATE_ALL',
   6: '_VAR_OPEN',
   7: 'BANG',
   8: 'LSQB',
   9: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[27] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: '_NL',
   4: 'STATE',
   5: '__ANON_6',
   6: '_NEGATE_ALL',
   7: '_VAR_OPEN',
   8: 'BANG',
   9: 'LSQB',
   10: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[28] = (lexer_regexps)
MRES = (
[('(?P<COMMA>\\,)|(?P<SEMICOLON>\\;)', {1: 'COMMA', 2: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[29] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HENSEL_OPEN>(?:(?:(?:\\ '
  '|\t))+)?\\<(?:(?:(?:\\ |\t))+)?)|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<STATE>\\d+)|(?P<COMPASS_DIR>NE|SE|SW|NW|N|E|S|W|FG|BG)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HENSEL_OPEN',
   3: '_WS',
   4: 'STATE',
   5: 'COMPASS_DIR',
   6: '_NEGATE_ALL',
   7: '_VAR_OPEN',
   8: 'LSQB',
   9: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[30] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HENSEL_OPEN>(?:(?:(?:\\ '
  '|\t))+)?\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<STATE>\\d+)|(?P<COMPASS_DIR>NE|SE|SW|NW|N|E|S|W|FG|BG)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HENSEL_OPEN',
   3: 'STATE',
   4: 'COMPASS_DIR',
   5: '_NEGATE_ALL',
   6: '_VAR_OPEN',
   7: 'LSQB',
   8: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[31] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HENSEL_OPEN>(?:(?:(?:\\ '
  '|\t))+)?\\<(?:(?:(?:\\ |\t))+)?)|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<STATE>\\d+)|(?P<COMPASS_DIR>NE|SE|SW|NW|N|E|S|W|FG|BG)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HENSEL_OPEN',
   3: '_WS',
   4: 'STATE',
   5: 'COMPASS_DIR',
   6: '_NEGATE_ALL',
   7: '_VAR_OPEN',
   8: 'LSQB',
   9: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[32] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: '__ANON_6',
   4: '_NEGATE_ALL',
   5: '_VAR_OPEN',
   6: 'BANG',
   7: 'LSQB',
   8: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[33] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<__ANON_5>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '__ANON_5',
   3: '_WS',
   4: '_NL',
   5: 'STATE',
   6: '__ANON_6',
   7: '_NEGATE_ALL',
   8: '_VAR_OPEN',
   9: 'BANG',
   10: 'LSQB',
   11: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[34] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: '_NL',
   4: 'STATE',
   5: '__ANON_6',
   6: '_NEGATE_ALL',
   7: '_VAR_OPEN',
   8: 'BANG',
   9: 'LSQB',
   10: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[35] = (lexer_regexps)
MRES = (
[('(?P<_WS>(?:(?:\\ |\t))+)|(?P<__ANON_0>.+)', {1: '_WS', 2: '__ANON_0'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[36] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: '_NEGATE_ALL',
   5: '_VAR_OPEN',
   6: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[37] = (lexer_regexps)
MRES = (
[('(?P<EQUAL>\\=)', {1: 'EQUAL'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[38] = (lexer_regexps)
MRES = (
[('(?P<COLON>\\:)|(?P<RSQB>\\])', {1: 'COLON', 2: 'RSQB'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[39] = (lexer_regexps)
MRES = (
[('(?P<COLON>\\:)|(?P<RSQB>\\])', {1: 'COLON', 2: 'RSQB'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[40] = (lexer_regexps)
MRES = (
[]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[41] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<__ANON_5>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '__ANON_5',
   3: '_WS',
   4: '_NL',
   5: 'STATE',
   6: '__ANON_6',
   7: '_NEGATE_ALL',
   8: '_VAR_OPEN',
   9: 'BANG',
   10: 'LSQB',
   11: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[42] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: '_NL',
   4: 'STATE',
   5: '__ANON_6',
   6: '_NEGATE_ALL',
   7: '_VAR_OPEN',
   8: 'BANG',
   9: 'LSQB',
   10: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[43] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_5>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '__ANON_5',
   4: '_WS',
   5: '_NL',
   6: 'STATE',
   7: '__ANON_6',
   8: '_NEGATE_ALL',
   9: '_VAR_OPEN',
   10: 'BANG',
   11: 'LSQB',
   12: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[44] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_5>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_NORMAL_ARROW',
   3: '__ANON_5',
   4: '_WS',
   5: '_NL',
   6: 'STATE',
   7: '__ANON_6',
   8: '_NEGATE_ALL',
   9: '_VAR_OPEN',
   10: 'BANG',
   11: 'LSQB',
   12: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[45] = (lexer_regexps)
MRES = (
[('(?P<SYMMETRY_NAME>(?<![\\w\\.])(?!(?:[NS][EW]?|[EW])(?![\\w\\.]))[\\w\\.]+)|(?P<COMPASS_DIR>NE|SE|SW|NW|N|E|S|W|FG|BG)',
  {1: 'SYMMETRY_NAME', 2: 'COMPASS_DIR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[46] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<__ANON_5>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '__ANON_5',
   3: '_WS',
   4: '_NL',
   5: 'STATE',
   6: '__ANON_6',
   7: '_NEGATE_ALL',
   8: '_VAR_OPEN',
   9: 'BANG',
   10: 'LSQB',
   11: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[47] = (lexer_regexps)
MRES = (
[('(?P<SYMMETRY_NAME>(?<![\\w\\.])(?!(?:[NS][EW]?|[EW])(?![\\w\\.]))[\\w\\.]+)|(?P<COMPASS_DIR>NE|SE|SW|NW|N|E|S|W|FG|BG)',
  {1: 'SYMMETRY_NAME', 2: 'COMPASS_DIR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[48] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<__ANON_5>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '__ANON_5',
   3: '_WS',
   4: '_NL',
   5: 'STATE',
   6: '__ANON_6',
   7: '_NEGATE_ALL',
   8: '_VAR_OPEN',
   9: 'BANG',
   10: 'LSQB',
   11: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[49] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<INT>[0123456789]+)|(?P<STATE>\\d+)|(?P<_VAR_OPEN>[({])',
  {1: 'NAME', 2: 'INT', 3: 'STATE', 4: '_VAR_OPEN'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[50] = (lexer_regexps)
MRES = (
[('(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t))+)?)|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<__ANON_4>\\.\\.)|(?P<PLUS>\\+)',
  {1: '_MULT', 2: '_WS', 3: '__ANON_4', 4: 'PLUS'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[51] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_LROT>(?:(?:(?:\\ '
  '|\t))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t'
  '))+)?\\*(?:(?:(?:\\ |\t))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ '
  '|\t))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)',
  {1: 'NAME',
   2: '_LROT',
   3: '_RROT',
   4: '_MULT',
   5: '_SUBT',
   6: '__ANON_5',
   7: '_WS',
   8: '_NL',
   9: 'STATE',
   10: '__ANON_6',
   11: '_NEGATE_ALL',
   12: '_VAR_CLOSE',
   13: '_VAR_OPEN',
   14: 'BANG',
   15: 'COMMA',
   16: 'LSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[52] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME', 2: 'STATE', 3: '_NEGATE_ALL', 4: '_VAR_OPEN', 5: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[53] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_LROT>(?:(?:(?:\\ '
  '|\t))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t'
  '))+)?\\*(?:(?:(?:\\ |\t))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ '
  '|\t))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)',
  {1: 'NAME',
   2: '_LROT',
   3: '_RROT',
   4: '_MULT',
   5: '_SUBT',
   6: '__ANON_5',
   7: '_WS',
   8: '_NL',
   9: 'STATE',
   10: '__ANON_6',
   11: '_NEGATE_ALL',
   12: '_VAR_OPEN',
   13: 'BANG',
   14: 'LSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[54] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME', 2: 'STATE', 3: '_NEGATE_ALL', 4: '_VAR_OPEN', 5: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[55] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_LROT>(?:(?:(?:\\ '
  '|\t))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t'
  '))+)?\\*(?:(?:(?:\\ |\t))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ '
  '|\t))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)',
  {1: 'NAME',
   2: '_LROT',
   3: '_RROT',
   4: '_MULT',
   5: '_SUBT',
   6: '__ANON_5',
   7: '_WS',
   8: '_NL',
   9: 'STATE',
   10: '__ANON_6',
   11: '_NEGATE_ALL',
   12: '_VAR_CLOSE',
   13: '_VAR_OPEN',
   14: 'BANG',
   15: 'COMMA',
   16: 'LSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[56] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_LROT>(?:(?:(?:\\ '
  '|\t))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t'
  '))+)?\\*(?:(?:(?:\\ |\t))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ '
  '|\t))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)',
  {1: 'NAME',
   2: '_LROT',
   3: '_RROT',
   4: '_MULT',
   5: '_SUBT',
   6: '__ANON_5',
   7: '_WS',
   8: '_NL',
   9: 'STATE',
   10: '__ANON_6',
   11: '_NEGATE_ALL',
   12: '_VAR_CLOSE',
   13: '_VAR_OPEN',
   14: 'BANG',
   15: 'COMMA',
   16: 'LSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[57] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME', 2: 'STATE', 3: '_NEGATE_ALL', 4: '_VAR_OPEN', 5: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[58] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_LROT>(?:(?:(?:\\ '
  '|\t))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t'
  '))+)?\\*(?:(?:(?:\\ |\t))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ '
  '|\t))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)',
  {1: 'NAME',
   2: '_LROT',
   3: '_RROT',
   4: '_MULT',
   5: '_SUBT',
   6: '__ANON_5',
   7: '_WS',
   8: '_NL',
   9: 'STATE',
   10: '__ANON_6',
   11: '_NEGATE_ALL',
   12: '_VAR_CLOSE',
   13: '_VAR_OPEN',
   14: 'BANG',
   15: 'COMMA',
   16: 'LSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[59] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<_VAR_OPEN>[({])|(?P<LEAVE_ALONE>_)|(?P<LSQB>\\[)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: '_VAR_OPEN',
   5: 'LEAVE_ALONE',
   6: 'LSQB'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[60] = (lexer_regexps)
MRES = (
[('(?P<INT>[0123456789]+)', {1: 'INT'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[61] = (lexer_regexps)
MRES = (
[('(?P<INT>[0123456789]+)', {1: 'INT'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[62] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)',
  {1: 'NAME', 2: 'STATE', 3: '_VAR_OPEN', 4: 'LSQB'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[63] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_VAR_OPEN>[({])|(?P<LEAVE_ALONE>_)|(?P<LSQB>\\[)',
  {1: 'NAME', 2: 'STATE', 3: '_VAR_OPEN', 4: 'LEAVE_ALONE', 5: 'LSQB'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[64] = (lexer_regexps)
MRES = (
[('(?P<INT>[0123456789]+)', {1: 'INT'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[65] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: '__ANON_6',
   5: '_NEGATE_ALL',
   6: '_VAR_OPEN',
   7: 'BANG',
   8: 'LSQB',
   9: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[66] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_5',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_6',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[67] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)', {1: '_VAR_CLOSE', 2: 'COMMA'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[68] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_5',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_6',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[69] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_5',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_6',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[70] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_5',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_6',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[71] = (lexer_regexps)
MRES = (
[('(?P<_WS>(?:(?:\\ |\t))+)|(?P<__ANON_4>\\.\\.)', {1: '_WS', 2: '__ANON_4'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[72] = (lexer_regexps)
MRES = (
[('(?P<INT>[0123456789]+)', {1: 'INT'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[73] = (lexer_regexps)
MRES = (
[('(?P<INT>[0123456789]+)|(?P<_WS>(?:(?:\\ |\t))+)', {1: 'INT', 2: '_WS'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[74] = (lexer_regexps)
MRES = (
[('(?P<_WS>(?:(?:\\ |\t))+)|(?P<STATE>\\d+)', {1: '_WS', 2: 'STATE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[75] = (lexer_regexps)
MRES = (
[('(?P<_WS>(?:(?:\\ |\t))+)|(?P<__ANON_4>\\.\\.)|(?P<PLUS>\\+)',
  {1: '_WS', 2: '__ANON_4', 3: 'PLUS'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[76] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_5',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_6',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[77] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_5',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_6',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[78] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_5',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_6',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[79] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_5',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_6',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[80] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_5',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_6',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[81] = (lexer_regexps)
MRES = (
[('(?P<STATE>\\d+)', {1: 'STATE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[82] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_5',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_6',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[83] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: '__ANON_6',
   5: '_NEGATE_ALL',
   6: '_VAR_OPEN',
   7: 'BANG',
   8: 'LSQB',
   9: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[84] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<COMPASS_DIR>NE|SE|SW|NW|N|E|S|W|FG|BG)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: 'COMPASS_DIR',
   4: '_NEGATE_ALL',
   5: '_VAR_OPEN',
   6: 'LSQB',
   7: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[85] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HENSEL_OPEN>(?:(?:(?:\\ '
  '|\t))+)?\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<STATE>\\d+)|(?P<COMPASS_DIR>NE|SE|SW|NW|N|E|S|W|FG|BG)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HENSEL_OPEN',
   3: 'STATE',
   4: 'COMPASS_DIR',
   5: '_NEGATE_ALL',
   6: '_VAR_OPEN',
   7: 'LSQB',
   8: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[86] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<INT>[0123456789]+)|(?P<STATE>\\d+)|(?P<COMPASS_DIR>NE|SE|SW|NW|N|E|S|W|FG|BG)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'INT',
   3: 'STATE',
   4: 'COMPASS_DIR',
   5: '_NEGATE_ALL',
   6: '_VAR_OPEN',
   7: 'LSQB',
   8: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[87] = (lexer_regexps)
MRES = (
[('(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<COMMA>\\,)|(?P<SEMICOLON>\\;)',
  {1: '_PERMUTE', 2: 'COMMA', 3: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[88] = (lexer_regexps)
MRES = (
[('(?P<COMMA>\\,)|(?P<SEMICOLON>\\;)', {1: 'COMMA', 2: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[89] = (lexer_regexps)
MRES = (
[('(?P<_WS>(?:(?:\\ |\t))+)|(?P<__ANON_4>\\.\\.)', {1: '_WS', 2: '__ANON_4'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[90] = (lexer_regexps)
MRES = (
[('(?P<__ANON_1>\\w+)', {1: '__ANON_1'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[91] = (lexer_regexps)
MRES = (
[('(?P<_WS>(?:(?:\\ |\t))+)', {1: '_WS'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[92] = (lexer_regexps)
MRES = (
[('(?P<COMMA>\\,)|(?P<SEMICOLON>\\;)', {1: 'COMMA', 2: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[93] = (lexer_regexps)
MRES = (
[('(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<COMMA>\\,)|(?P<SEMICOLON>\\;)',
  {1: '_PERMUTE', 2: 'COMMA', 3: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[94] = (lexer_regexps)
MRES = (
[('(?P<_WS>(?:(?:\\ |\t))+)', {1: '_WS'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[95] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HENSEL_OPEN>(?:(?:(?:\\ '
  '|\t))+)?\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<STATE>\\d+)|(?P<COMPASS_DIR>NE|SE|SW|NW|N|E|S|W|FG|BG)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HENSEL_OPEN',
   3: 'STATE',
   4: 'COMPASS_DIR',
   5: '_NEGATE_ALL',
   6: '_VAR_OPEN',
   7: 'LSQB',
   8: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[96] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<__ANON_5>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '__ANON_5',
   3: '_WS',
   4: '_NL',
   5: 'STATE',
   6: '__ANON_6',
   7: '_NEGATE_ALL',
   8: '_VAR_OPEN',
   9: 'BANG',
   10: 'LSQB',
   11: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[97] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: '_NL',
   4: 'STATE',
   5: '__ANON_6',
   6: '_NEGATE_ALL',
   7: '_VAR_OPEN',
   8: 'BANG',
   9: 'LSQB',
   10: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[98] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: '__ANON_6',
   5: '_NEGATE_ALL',
   6: '_VAR_OPEN',
   7: 'BANG',
   8: 'LSQB',
   9: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[99] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: '_NL',
   4: 'STATE',
   5: '__ANON_6',
   6: '_NEGATE_ALL',
   7: '_VAR_OPEN',
   8: 'BANG',
   9: 'LSQB',
   10: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[100] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: '__ANON_6',
   5: '_NEGATE_ALL',
   6: '_VAR_OPEN',
   7: 'BANG',
   8: 'LSQB',
   9: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[101] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<__ANON_5>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '__ANON_5',
   3: '_WS',
   4: '_NL',
   5: 'STATE',
   6: '__ANON_6',
   7: '_NEGATE_ALL',
   8: '_VAR_OPEN',
   9: 'BANG',
   10: 'LSQB',
   11: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[102] = (lexer_regexps)
MRES = (
[('(?P<__ANON_0>.+)', {1: '__ANON_0'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[103] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_LROT>(?:(?:(?:\\ '
  '|\t))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t'
  '))+)?\\*(?:(?:(?:\\ |\t))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ '
  '|\t))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<__ANON_4>\\.\\.)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<PLUS>\\+)',
  {1: 'NAME',
   2: '_LROT',
   3: '_RROT',
   4: '_MULT',
   5: '_SUBT',
   6: '__ANON_5',
   7: '_WS',
   8: '_NL',
   9: 'STATE',
   10: '__ANON_6',
   11: '_NEGATE_ALL',
   12: '__ANON_4',
   13: '_VAR_CLOSE',
   14: '_VAR_OPEN',
   15: 'BANG',
   16: 'COMMA',
   17: 'LSQB',
   18: 'PLUS'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[104] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<__ANON_5>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '__ANON_5',
   3: '_WS',
   4: '_NL',
   5: 'STATE',
   6: '__ANON_6',
   7: '_NEGATE_ALL',
   8: '_VAR_OPEN',
   9: 'BANG',
   10: 'LSQB',
   11: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[105] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME', 2: 'STATE', 3: '_NEGATE_ALL', 4: '_VAR_OPEN', 5: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[106] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_LROT>(?:(?:(?:\\ '
  '|\t))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t'
  '))+)?\\*(?:(?:(?:\\ |\t))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ '
  '|\t))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)',
  {1: 'NAME',
   2: '_LROT',
   3: '_RROT',
   4: '_MULT',
   5: '_SUBT',
   6: '__ANON_5',
   7: '_WS',
   8: '_NL',
   9: 'STATE',
   10: '__ANON_6',
   11: '_NEGATE_ALL',
   12: '_VAR_CLOSE',
   13: '_VAR_OPEN',
   14: 'BANG',
   15: 'COMMA',
   16: 'LSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[107] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: '_NEGATE_ALL',
   5: '_VAR_OPEN',
   6: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[108] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: '_NEGATE_ALL',
   5: '_VAR_OPEN',
   6: 'LSQB',
   7: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[109] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_5',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_6',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[110] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: '_NEGATE_ALL',
   5: '_VAR_OPEN',
   6: 'LSQB',
   7: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[111] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_5',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_6',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[112] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: '__ANON_6',
   5: '_NEGATE_ALL',
   6: '_VAR_OPEN',
   7: 'BANG',
   8: 'LSQB',
   9: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[113] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: '_NL',
   4: 'STATE',
   5: '__ANON_6',
   6: '_NEGATE_ALL',
   7: '_VAR_OPEN',
   8: 'BANG',
   9: 'LSQB',
   10: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[114] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: '__ANON_6',
   5: '_NEGATE_ALL',
   6: '_VAR_OPEN',
   7: 'BANG',
   8: 'LSQB',
   9: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[115] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<__ANON_5>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '__ANON_5',
   3: '_WS',
   4: '_NL',
   5: 'STATE',
   6: '__ANON_6',
   7: '_NEGATE_ALL',
   8: '_VAR_OPEN',
   9: 'BANG',
   10: 'LSQB',
   11: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[116] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<__ANON_5>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '__ANON_5',
   3: '_WS',
   4: '_NL',
   5: 'STATE',
   6: '__ANON_6',
   7: '_NEGATE_ALL',
   8: '_VAR_OPEN',
   9: 'BANG',
   10: 'LSQB',
   11: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[117] = (lexer_regexps)
MRES = (
[('(?P<COLON>\\:)|(?P<LSQB>\\[)', {1: 'COLON', 2: 'LSQB'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[118] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_5>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_5',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_6',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[119] = (lexer_regexps)
MRES = (
[('(?P<COLON>\\:)|(?P<LSQB>\\[)|(?P<PLUS>\\+)',
  {1: 'COLON', 2: 'LSQB', 3: 'PLUS'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[120] = (lexer_regexps)
MRES = (
[('(?P<BANG>\\!)|(?P<LPAR>\\()', {1: 'BANG', 2: 'LPAR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[121] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_5>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_5',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_6',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[122] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_5>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '__ANON_5',
   4: '_WS',
   5: '_NL',
   6: 'STATE',
   7: '__ANON_6',
   8: '_NEGATE_ALL',
   9: '_VAR_OPEN',
   10: 'BANG',
   11: 'LSQB',
   12: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[123] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_5>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_NORMAL_ARROW',
   3: '__ANON_5',
   4: '_WS',
   5: '_NL',
   6: 'STATE',
   7: '__ANON_6',
   8: '_NEGATE_ALL',
   9: '_VAR_OPEN',
   10: 'BANG',
   11: 'LSQB',
   12: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[124] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_5',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_6',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[125] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_5',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_6',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[126] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<INT>[0123456789]+)|(?P<STATE>\\d+)|(?P<_VAR_OPEN>[({])',
  {1: 'NAME', 2: 'INT', 3: 'STATE', 4: '_VAR_OPEN'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[127] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_LROT>(?:(?:(?:\\ '
  '|\t))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t'
  '))+)?\\*(?:(?:(?:\\ |\t))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ '
  '|\t))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)',
  {1: 'NAME',
   2: '_LROT',
   3: '_RROT',
   4: '_MULT',
   5: '_SUBT',
   6: '__ANON_5',
   7: '_WS',
   8: '_NL',
   9: 'STATE',
   10: '__ANON_6',
   11: '_NEGATE_ALL',
   12: '_VAR_CLOSE',
   13: '_VAR_OPEN',
   14: 'BANG',
   15: 'COMMA',
   16: 'LSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[128] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)', {1: '_VAR_CLOSE', 2: 'COMMA'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[129] = (lexer_regexps)
MRES = (
[('(?P<INT>[0123456789]+)', {1: 'INT'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[130] = (lexer_regexps)
MRES = (
[('(?P<INT>[0123456789]+)', {1: 'INT'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[131] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_VAR_OPEN>[({])',
  {1: 'NAME', 2: 'STATE', 3: '_VAR_OPEN'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[132] = (lexer_regexps)
MRES = (
[('(?P<INT>[0123456789]+)', {1: 'INT'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[133] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_LROT>(?:(?:(?:\\ '
  '|\t))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t'
  '))+)?\\*(?:(?:(?:\\ |\t))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ '
  '|\t))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)',
  {1: 'NAME',
   2: '_LROT',
   3: '_RROT',
   4: '_MULT',
   5: '_SUBT',
   6: '__ANON_5',
   7: '_WS',
   8: '_NL',
   9: 'STATE',
   10: '__ANON_6',
   11: '_NEGATE_ALL',
   12: '_VAR_CLOSE',
   13: '_VAR_OPEN',
   14: 'BANG',
   15: 'COMMA',
   16: 'LSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[134] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_LROT>(?:(?:(?:\\ '
  '|\t))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t'
  '))+)?\\*(?:(?:(?:\\ |\t))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ '
  '|\t))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)',
  {1: 'NAME',
   2: '_LROT',
   3: '_RROT',
   4: '_MULT',
   5: '_SUBT',
   6: '__ANON_5',
   7: '_WS',
   8: '_NL',
   9: 'STATE',
   10: '__ANON_6',
   11: '_NEGATE_ALL',
   12: '_VAR_CLOSE',
   13: '_VAR_OPEN',
   14: 'BANG',
   15: 'COMMA',
   16: 'LSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[135] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_VAR_OPEN>[({])|(?P<LEAVE_ALONE>_)|(?P<LSQB>\\[)',
  {1: 'NAME', 2: 'STATE', 3: '_VAR_OPEN', 4: 'LEAVE_ALONE', 5: 'LSQB'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[136] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_5',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_6',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[137] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_5',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_6',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[138] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<__ANON_4>\\.\\.)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<PLUS>\\+)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_5',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_6',
   16: '_NEGATE_ALL',
   17: '__ANON_4',
   18: '_VAR_CLOSE',
   19: '_VAR_OPEN',
   20: 'BANG',
   21: 'COMMA',
   22: 'LSQB',
   23: 'PLUS',
   24: 'RSQB',
   25: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[139] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_5',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_6',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[140] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_5',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_6',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[141] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_5',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_6',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[142] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_5',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_6',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[143] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_5',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_6',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[144] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: '_NEGATE_ALL',
   5: '_VAR_OPEN',
   6: 'LSQB',
   7: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[145] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)', {1: '_VAR_CLOSE', 2: 'COMMA'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[146] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_5',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_6',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[147] = (lexer_regexps)
MRES = (
[('(?P<__ANON_4>\\.\\.)', {1: '__ANON_4'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[148] = (lexer_regexps)
MRES = (
[('(?P<_WS>(?:(?:\\ |\t))+)|(?P<STATE>\\d+)', {1: '_WS', 2: 'STATE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[149] = (lexer_regexps)
MRES = (
[('(?P<_WS>(?:(?:\\ |\t))+)|(?P<__ANON_4>\\.\\.)', {1: '_WS', 2: '__ANON_4'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[150] = (lexer_regexps)
MRES = (
[('(?P<_WS>(?:(?:\\ |\t))+)|(?P<__ANON_4>\\.\\.)', {1: '_WS', 2: '__ANON_4'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[151] = (lexer_regexps)
MRES = (
[('(?P<INT>[0123456789]+)', {1: 'INT'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[152] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_5',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_6',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[153] = (lexer_regexps)
MRES = (
[('(?P<STATE>\\d+)', {1: 'STATE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[154] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_5',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_6',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[155] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t'
  '))+)?\\~(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_5>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<SEMICOLON>\\;)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '_PERMUTE',
   5: '__ANON_5',
   6: '_WS',
   7: '_NL',
   8: 'STATE',
   9: '__ANON_6',
   10: '_NEGATE_ALL',
   11: '_VAR_OPEN',
   12: 'BANG',
   13: 'COMMA',
   14: 'LSQB',
   15: 'SEMICOLON',
   16: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[156] = (lexer_regexps)
MRES = (
[('(?P<COMMA>\\,)|(?P<SEMICOLON>\\;)', {1: 'COMMA', 2: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[157] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t))+)?)|(?P<RSQB>\\])',
  {1: '_LROT', 2: '_RROT', 3: '_MULT', 4: '_SUBT', 5: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[158] = (lexer_regexps)
MRES = (
[('(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t))+)?)|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<__ANON_4>\\.\\.)|(?P<PLUS>\\+)',
  {1: '_MULT', 2: '_WS', 3: '__ANON_4', 4: 'PLUS'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[159] = (lexer_regexps)
MRES = (
[('(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t))+)?)', {1: '_MULT'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[160] = (lexer_regexps)
MRES = (
[('(?P<__ANON_3>[^,;]+)', {1: '__ANON_3'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[161] = (lexer_regexps)
MRES = (
[('(?P<COMPASS_DIR>NE|SE|SW|NW|N|E|S|W|FG|BG)', {1: 'COMPASS_DIR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[162] = (lexer_regexps)
MRES = (
[('(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t))+)?\\/(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_WS>(?:(?:\\ |\t))+)',
  {1: '_HENSEL_SEP', 2: '_WS'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[163] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: '_NEGATE_ALL',
   4: '_VAR_OPEN',
   5: 'LSQB',
   6: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[164] = (lexer_regexps)
MRES = (
[('(?P<STATE>\\d+)|(?P<LSQB>\\[)', {1: 'STATE', 2: 'LSQB'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[165] = (lexer_regexps)
MRES = (
[('(?P<__ANON_3>[^,;]+)', {1: '__ANON_3'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[166] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: '_NEGATE_ALL',
   4: '_VAR_OPEN',
   5: 'LSQB',
   6: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[167] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: '_NL',
   4: 'STATE',
   5: '__ANON_6',
   6: '_NEGATE_ALL',
   7: '_VAR_OPEN',
   8: 'BANG',
   9: 'LSQB',
   10: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[168] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: '__ANON_6',
   5: '_NEGATE_ALL',
   6: '_VAR_OPEN',
   7: 'BANG',
   8: 'LSQB',
   9: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[169] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: '__ANON_6',
   5: '_NEGATE_ALL',
   6: '_VAR_OPEN',
   7: 'BANG',
   8: 'LSQB',
   9: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[170] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: '__ANON_6',
   5: '_NEGATE_ALL',
   6: '_VAR_OPEN',
   7: 'BANG',
   8: 'LSQB',
   9: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[171] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<__ANON_5>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '__ANON_5',
   3: '_WS',
   4: '_NL',
   5: 'STATE',
   6: '__ANON_6',
   7: '_NEGATE_ALL',
   8: '_VAR_OPEN',
   9: 'BANG',
   10: 'LSQB',
   11: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[172] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<__ANON_5>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '__ANON_5',
   3: '_WS',
   4: '_NL',
   5: 'STATE',
   6: '__ANON_6',
   7: '_NEGATE_ALL',
   8: '_VAR_OPEN',
   9: 'BANG',
   10: 'LSQB',
   11: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[173] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<__ANON_5>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '__ANON_5',
   3: '_WS',
   4: '_NL',
   5: 'STATE',
   6: '__ANON_6',
   7: '_NEGATE_ALL',
   8: '_VAR_OPEN',
   9: 'BANG',
   10: 'LSQB',
   11: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[174] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME', 2: 'STATE', 3: '_NEGATE_ALL', 4: '_VAR_OPEN', 5: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[175] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: '_NEGATE_ALL',
   4: '_VAR_OPEN',
   5: 'LSQB',
   6: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[176] = (lexer_regexps)
MRES = (
[('(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t))+)?)|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<__ANON_4>\\.\\.)|(?P<PLUS>\\+)',
  {1: '_MULT', 2: '_WS', 3: '__ANON_4', 4: 'PLUS'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[177] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t))+)?)|(?P<RSQB>\\])',
  {1: '_LROT', 2: '_RROT', 3: '_MULT', 4: '_SUBT', 5: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[178] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[179] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: '_NEGATE_ALL',
   4: '_VAR_OPEN',
   5: 'LSQB',
   6: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[180] = (lexer_regexps)
MRES = (
[('(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t))+)?)', {1: '_MULT'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[181] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[182] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: '_NEGATE_ALL',
   4: '_VAR_OPEN',
   5: 'LSQB',
   6: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[183] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[184] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: '_NEGATE_ALL',
   4: '_VAR_OPEN',
   5: 'LSQB',
   6: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[185] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[186] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t))+)?)|(?P<RSQB>\\])',
  {1: '_LROT', 2: '_RROT', 3: '_MULT', 4: '_SUBT', 5: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[187] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: '_NEGATE_ALL',
   4: '_VAR_OPEN',
   5: 'LSQB',
   6: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[188] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: '__ANON_6',
   5: '_NEGATE_ALL',
   6: '_VAR_OPEN',
   7: 'BANG',
   8: 'LSQB',
   9: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[189] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<INT>[0123456789]+)|(?P<STATE>\\d+)|(?P<COMPASS_DIR>NE|SE|SW|NW|N|E|S|W|FG|BG)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LEAVE_ALONE>_)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'INT',
   3: 'STATE',
   4: 'COMPASS_DIR',
   5: '_NEGATE_ALL',
   6: '_VAR_OPEN',
   7: 'LEAVE_ALONE',
   8: 'LSQB',
   9: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[190] = (lexer_regexps)
MRES = (
[('(?P<STATE>\\d+)', {1: 'STATE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[191] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_5>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_5',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_6',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[192] = (lexer_regexps)
MRES = (
[('(?P<SYMMETRY_NAME>(?<![\\w\\.])(?!(?:[NS][EW]?|[EW])(?![\\w\\.]))[\\w\\.]+)|(?P<COMPASS_DIR>NE|SE|SW|NW|N|E|S|W|FG|BG)',
  {1: 'SYMMETRY_NAME', 2: 'COMPASS_DIR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[193] = (lexer_regexps)
MRES = (
[('(?P<INT>[0123456789]+)', {1: 'INT'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[194] = (lexer_regexps)
MRES = (
[('(?P<_WS>(?:(?:\\ |\t))+)|(?P<COMPASS_DIR>NE|SE|SW|NW|N|E|S|W|FG|BG)',
  {1: '_WS', 2: 'COMPASS_DIR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[195] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_5>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_5',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_6',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[196] = (lexer_regexps)
MRES = (
[('(?P<LPAR>\\()', {1: 'LPAR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[197] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_5>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_5',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_6',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[198] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_LROT>(?:(?:(?:\\ '
  '|\t))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t'
  '))+)?\\*(?:(?:(?:\\ |\t))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ '
  '|\t))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)',
  {1: 'NAME',
   2: '_LROT',
   3: '_RROT',
   4: '_MULT',
   5: '_SUBT',
   6: '__ANON_5',
   7: '_WS',
   8: '_NL',
   9: 'STATE',
   10: '__ANON_6',
   11: '_NEGATE_ALL',
   12: '_VAR_CLOSE',
   13: '_VAR_OPEN',
   14: 'BANG',
   15: 'COMMA',
   16: 'LSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[199] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_LROT>(?:(?:(?:\\ '
  '|\t))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t'
  '))+)?\\*(?:(?:(?:\\ |\t))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ '
  '|\t))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)',
  {1: 'NAME',
   2: '_LROT',
   3: '_RROT',
   4: '_MULT',
   5: '_SUBT',
   6: '__ANON_5',
   7: '_WS',
   8: '_NL',
   9: 'STATE',
   10: '__ANON_6',
   11: '_NEGATE_ALL',
   12: '_VAR_CLOSE',
   13: '_VAR_OPEN',
   14: 'BANG',
   15: 'COMMA',
   16: 'LSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[200] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_LROT>(?:(?:(?:\\ '
  '|\t))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t'
  '))+)?\\*(?:(?:(?:\\ |\t))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ '
  '|\t))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)',
  {1: 'NAME',
   2: '_LROT',
   3: '_RROT',
   4: '_MULT',
   5: '_SUBT',
   6: '__ANON_5',
   7: '_WS',
   8: '_NL',
   9: 'STATE',
   10: '__ANON_6',
   11: '_NEGATE_ALL',
   12: '_VAR_CLOSE',
   13: '_VAR_OPEN',
   14: 'BANG',
   15: 'COMMA',
   16: 'LSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[201] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_LROT>(?:(?:(?:\\ '
  '|\t))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t'
  '))+)?\\*(?:(?:(?:\\ |\t))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ '
  '|\t))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)',
  {1: 'NAME',
   2: '_LROT',
   3: '_RROT',
   4: '_MULT',
   5: '_SUBT',
   6: '__ANON_5',
   7: '_WS',
   8: '_NL',
   9: 'STATE',
   10: '__ANON_6',
   11: '_NEGATE_ALL',
   12: '_VAR_CLOSE',
   13: '_VAR_OPEN',
   14: 'BANG',
   15: 'COMMA',
   16: 'LSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[202] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_LROT>(?:(?:(?:\\ '
  '|\t))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t'
  '))+)?\\*(?:(?:(?:\\ |\t))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ '
  '|\t))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)',
  {1: 'NAME',
   2: '_LROT',
   3: '_RROT',
   4: '_MULT',
   5: '_SUBT',
   6: '__ANON_5',
   7: '_WS',
   8: '_NL',
   9: 'STATE',
   10: '__ANON_6',
   11: '_NEGATE_ALL',
   12: '_VAR_CLOSE',
   13: '_VAR_OPEN',
   14: 'BANG',
   15: 'COMMA',
   16: 'LSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[203] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_LROT>(?:(?:(?:\\ '
  '|\t))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t'
  '))+)?\\*(?:(?:(?:\\ |\t))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ '
  '|\t))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)',
  {1: 'NAME',
   2: '_LROT',
   3: '_RROT',
   4: '_MULT',
   5: '_SUBT',
   6: '__ANON_5',
   7: '_WS',
   8: '_NL',
   9: 'STATE',
   10: '__ANON_6',
   11: '_NEGATE_ALL',
   12: '_VAR_CLOSE',
   13: '_VAR_OPEN',
   14: 'BANG',
   15: 'COMMA',
   16: 'LSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[204] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_LROT>(?:(?:(?:\\ '
  '|\t))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t'
  '))+)?\\*(?:(?:(?:\\ |\t))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ '
  '|\t))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)',
  {1: 'NAME',
   2: '_LROT',
   3: '_RROT',
   4: '_MULT',
   5: '_SUBT',
   6: '__ANON_5',
   7: '_WS',
   8: '_NL',
   9: 'STATE',
   10: '__ANON_6',
   11: '_NEGATE_ALL',
   12: '_VAR_CLOSE',
   13: '_VAR_OPEN',
   14: 'BANG',
   15: 'COMMA',
   16: 'LSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[205] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)', {1: '_VAR_CLOSE', 2: 'COMMA'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[206] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: '_NEGATE_ALL',
   5: '_VAR_OPEN',
   6: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[207] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_LROT>(?:(?:(?:\\ '
  '|\t))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t'
  '))+)?\\*(?:(?:(?:\\ |\t))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ '
  '|\t))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)',
  {1: 'NAME',
   2: '_LROT',
   3: '_RROT',
   4: '_MULT',
   5: '_SUBT',
   6: '__ANON_5',
   7: '_WS',
   8: '_NL',
   9: 'STATE',
   10: '__ANON_6',
   11: '_NEGATE_ALL',
   12: '_VAR_CLOSE',
   13: '_VAR_OPEN',
   14: 'BANG',
   15: 'COMMA',
   16: 'LSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[208] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_LROT>(?:(?:(?:\\ '
  '|\t))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t'
  '))+)?\\*(?:(?:(?:\\ |\t))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ '
  '|\t))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)',
  {1: 'NAME',
   2: '_LROT',
   3: '_RROT',
   4: '_MULT',
   5: '_SUBT',
   6: '__ANON_5',
   7: '_WS',
   8: '_NL',
   9: 'STATE',
   10: '__ANON_6',
   11: '_NEGATE_ALL',
   12: '_VAR_CLOSE',
   13: '_VAR_OPEN',
   14: 'BANG',
   15: 'COMMA',
   16: 'LSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[209] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_LROT>(?:(?:(?:\\ '
  '|\t))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t'
  '))+)?\\*(?:(?:(?:\\ |\t))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ '
  '|\t))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<__ANON_4>\\.\\.)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<PLUS>\\+)',
  {1: 'NAME',
   2: '_LROT',
   3: '_RROT',
   4: '_MULT',
   5: '_SUBT',
   6: '__ANON_5',
   7: '_WS',
   8: '_NL',
   9: 'STATE',
   10: '__ANON_6',
   11: '_NEGATE_ALL',
   12: '__ANON_4',
   13: '_VAR_CLOSE',
   14: '_VAR_OPEN',
   15: 'BANG',
   16: 'COMMA',
   17: 'LSQB',
   18: 'PLUS'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[210] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_LROT>(?:(?:(?:\\ '
  '|\t))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t'
  '))+)?\\*(?:(?:(?:\\ |\t))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ '
  '|\t))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)',
  {1: 'NAME',
   2: '_LROT',
   3: '_RROT',
   4: '_MULT',
   5: '_SUBT',
   6: '__ANON_5',
   7: '_WS',
   8: '_NL',
   9: 'STATE',
   10: '__ANON_6',
   11: '_NEGATE_ALL',
   12: '_VAR_CLOSE',
   13: '_VAR_OPEN',
   14: 'BANG',
   15: 'COMMA',
   16: 'LSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[211] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_LROT>(?:(?:(?:\\ '
  '|\t))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t'
  '))+)?\\*(?:(?:(?:\\ |\t))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ '
  '|\t))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)',
  {1: 'NAME',
   2: '_LROT',
   3: '_RROT',
   4: '_MULT',
   5: '_SUBT',
   6: '__ANON_5',
   7: '_WS',
   8: '_NL',
   9: 'STATE',
   10: '__ANON_6',
   11: '_NEGATE_ALL',
   12: '_VAR_CLOSE',
   13: '_VAR_OPEN',
   14: 'BANG',
   15: 'COMMA',
   16: 'LSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[212] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_LROT>(?:(?:(?:\\ '
  '|\t))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t'
  '))+)?\\*(?:(?:(?:\\ |\t))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ '
  '|\t))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)',
  {1: 'NAME',
   2: '_LROT',
   3: '_RROT',
   4: '_MULT',
   5: '_SUBT',
   6: '__ANON_5',
   7: '_WS',
   8: '_NL',
   9: 'STATE',
   10: '__ANON_6',
   11: '_NEGATE_ALL',
   12: '_VAR_CLOSE',
   13: '_VAR_OPEN',
   14: 'BANG',
   15: 'COMMA',
   16: 'LSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[213] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: '_NEGATE_ALL',
   4: '_VAR_OPEN',
   5: 'LSQB',
   6: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[214] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)', {1: '_VAR_CLOSE', 2: 'COMMA'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[215] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: '_NEGATE_ALL',
   5: '_VAR_OPEN',
   6: 'LSQB',
   7: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[216] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_5',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_6',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[217] = (lexer_regexps)
MRES = (
[('(?P<_WS>(?:(?:\\ |\t))+)|(?P<STATE>\\d+)', {1: '_WS', 2: 'STATE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[218] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_5',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_6',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[219] = (lexer_regexps)
MRES = (
[('(?P<STATE>\\d+)', {1: 'STATE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[220] = (lexer_regexps)
MRES = (
[('(?P<_WS>(?:(?:\\ |\t))+)|(?P<STATE>\\d+)', {1: '_WS', 2: 'STATE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[221] = (lexer_regexps)
MRES = (
[('(?P<__ANON_4>\\.\\.)', {1: '__ANON_4'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[222] = (lexer_regexps)
MRES = (
[('(?P<__ANON_4>\\.\\.)', {1: '__ANON_4'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[223] = (lexer_regexps)
MRES = (
[('(?P<_WS>(?:(?:\\ |\t))+)|(?P<STATE>\\d+)', {1: '_WS', 2: 'STATE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[224] = (lexer_regexps)
MRES = (
[('(?P<_WS>(?:(?:\\ |\t))+)|(?P<__ANON_4>\\.\\.)', {1: '_WS', 2: '__ANON_4'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[225] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_5',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_6',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[226] = (lexer_regexps)
MRES = (
[('(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t))+)?\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t))+)?\\/(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<COMMA>\\,)|(?P<SEMICOLON>\\;)',
  {1: '_HENSEL_CLOSE',
   2: '_HENSEL_SEP',
   3: '_PERMUTE',
   4: 'COMMA',
   5: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[227] = (lexer_regexps)
MRES = (
[('(?P<COMMA>\\,)|(?P<SEMICOLON>\\;)', {1: 'COMMA', 2: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[228] = (lexer_regexps)
MRES = (
[('(?P<_WS>(?:(?:\\ |\t))+)', {1: '_WS'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[229] = (lexer_regexps)
MRES = (
[('(?P<__ANON_2>[^\\s\\/]+)', {1: '__ANON_2'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[230] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: '_NEGATE_ALL',
   4: '_VAR_OPEN',
   5: 'LSQB',
   6: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[231] = (lexer_regexps)
MRES = (
[('(?P<COMMA>\\,)|(?P<SEMICOLON>\\;)', {1: 'COMMA', 2: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[232] = (lexer_regexps)
MRES = (
[('(?P<COMMA>\\,)|(?P<SEMICOLON>\\;)', {1: 'COMMA', 2: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[233] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_5>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_5',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_6',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[234] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_5>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_5',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_6',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[235] = (lexer_regexps)
MRES = (
[('(?P<COMMA>\\,)|(?P<SEMICOLON>\\;)', {1: 'COMMA', 2: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[236] = (lexer_regexps)
MRES = (
[('(?P<COMMA>\\,)|(?P<SEMICOLON>\\;)', {1: 'COMMA', 2: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[237] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: '__ANON_6',
   5: '_NEGATE_ALL',
   6: '_VAR_OPEN',
   7: 'BANG',
   8: 'LSQB',
   9: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[238] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<__ANON_5>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '__ANON_5',
   3: '_WS',
   4: '_NL',
   5: 'STATE',
   6: '__ANON_6',
   7: '_NEGATE_ALL',
   8: '_VAR_OPEN',
   9: 'BANG',
   10: 'LSQB',
   11: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[239] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<__ANON_4>\\.\\.)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<PLUS>\\+)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_WS',
   6: '__ANON_4',
   7: '_VAR_CLOSE',
   8: 'COMMA',
   9: 'PLUS',
   10: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[240] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[241] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[242] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[243] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<INT>[0123456789]+)|(?P<STATE>\\d+)|(?P<_VAR_OPEN>[({])',
  {1: 'NAME', 2: 'INT', 3: 'STATE', 4: '_VAR_OPEN'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[244] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_5',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_6',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[245] = (lexer_regexps)
MRES = (
[('(?P<INT>[0123456789]+)', {1: 'INT'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[246] = (lexer_regexps)
MRES = (
[('(?P<INT>[0123456789]+)', {1: 'INT'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[247] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)',
  {1: 'NAME', 2: 'STATE', 3: '_VAR_OPEN', 4: 'LSQB'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[248] = (lexer_regexps)
MRES = (
[('(?P<INT>[0123456789]+)', {1: 'INT'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[249] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t))+)?)|(?P<RSQB>\\])',
  {1: '_LROT', 2: '_RROT', 3: '_MULT', 4: '_SUBT', 5: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[250] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<INT>[0123456789]+)|(?P<STATE>\\d+)|(?P<_VAR_OPEN>[({])',
  {1: 'NAME', 2: 'INT', 3: 'STATE', 4: '_VAR_OPEN'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[251] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[252] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)', {1: '_VAR_CLOSE', 2: 'COMMA'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[253] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[254] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_5',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_6',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[255] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t))+)?)|(?P<RSQB>\\])',
  {1: '_LROT', 2: '_RROT', 3: '_MULT', 4: '_SUBT', 5: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[256] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[257] = (lexer_regexps)
MRES = (
[('(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t))+)?)|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<__ANON_4>\\.\\.)|(?P<PLUS>\\+)',
  {1: '_MULT', 2: '_WS', 3: '__ANON_4', 4: 'PLUS'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[258] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LEAVE_ALONE>_)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: '_NEGATE_ALL',
   4: '_VAR_OPEN',
   5: 'LEAVE_ALONE',
   6: 'LSQB',
   7: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[259] = (lexer_regexps)
MRES = (
[('(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t))+)?)', {1: '_MULT'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[260] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[261] = (lexer_regexps)
MRES = (
[('(?P<INT>[0123456789]+)|(?P<COMPASS_DIR>NE|SE|SW|NW|N|E|S|W|FG|BG)',
  {1: 'INT', 2: 'COMPASS_DIR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[262] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t))+)?)|(?P<RSQB>\\])',
  {1: '_LROT', 2: '_RROT', 3: '_MULT', 4: '_SUBT', 5: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[263] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LEAVE_ALONE>_)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: '_NEGATE_ALL',
   4: '_VAR_OPEN',
   5: 'LEAVE_ALONE',
   6: 'LSQB',
   7: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[264] = (lexer_regexps)
MRES = (
[('(?P<COLON>\\:)|(?P<RSQB>\\])', {1: 'COLON', 2: 'RSQB'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[265] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[266] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[267] = (lexer_regexps)
MRES = (
[('(?P<COLON>\\:)|(?P<RSQB>\\])', {1: 'COLON', 2: 'RSQB'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[268] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[269] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[270] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LEAVE_ALONE>_)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: '_NEGATE_ALL',
   4: '_VAR_OPEN',
   5: 'LEAVE_ALONE',
   6: 'LSQB',
   7: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[271] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_5>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<RPAR>\\))|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_5',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_6',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: 'RPAR',
   14: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[272] = (lexer_regexps)
MRES = (
[('(?P<SYMMETRY_NAME>(?<![\\w\\.])(?!(?:[NS][EW]?|[EW])(?![\\w\\.]))[\\w\\.]+)|(?P<COMPASS_DIR>NE|SE|SW|NW|N|E|S|W|FG|BG)',
  {1: 'SYMMETRY_NAME', 2: 'COMPASS_DIR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[273] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_5>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_5',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_6',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[274] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_5>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_5',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_6',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[275] = (lexer_regexps)
MRES = (
[('(?P<COLON>\\:)|(?P<LSQB>\\[)', {1: 'COLON', 2: 'LSQB'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[276] = (lexer_regexps)
MRES = (
[('(?P<_WS>(?:(?:\\ |\t))+)|(?P<RPAR>\\))', {1: '_WS', 2: 'RPAR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[277] = (lexer_regexps)
MRES = (
[('(?P<COMPASS_DIR>NE|SE|SW|NW|N|E|S|W|FG|BG)', {1: 'COMPASS_DIR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[278] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_5>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_5',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_6',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[279] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: '_NEGATE_ALL',
   5: '_VAR_OPEN',
   6: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[280] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_LROT>(?:(?:(?:\\ '
  '|\t))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t'
  '))+)?\\*(?:(?:(?:\\ |\t))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ '
  '|\t))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)',
  {1: 'NAME',
   2: '_LROT',
   3: '_RROT',
   4: '_MULT',
   5: '_SUBT',
   6: '__ANON_5',
   7: '_WS',
   8: '_NL',
   9: 'STATE',
   10: '__ANON_6',
   11: '_NEGATE_ALL',
   12: '_VAR_CLOSE',
   13: '_VAR_OPEN',
   14: 'BANG',
   15: 'COMMA',
   16: 'LSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[281] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME', 2: 'STATE', 3: '_NEGATE_ALL', 4: '_VAR_OPEN', 5: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[282] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)', {1: '_VAR_CLOSE', 2: 'COMMA'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[283] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)', {1: '_VAR_CLOSE', 2: 'COMMA'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[284] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: '_NEGATE_ALL',
   4: '_VAR_OPEN',
   5: 'LSQB',
   6: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[285] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)', {1: '_VAR_CLOSE', 2: 'COMMA'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[286] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_5',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_6',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[287] = (lexer_regexps)
MRES = (
[('(?P<STATE>\\d+)', {1: 'STATE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[288] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_5',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_6',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[289] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_5',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_6',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[290] = (lexer_regexps)
MRES = (
[('(?P<STATE>\\d+)', {1: 'STATE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[291] = (lexer_regexps)
MRES = (
[('(?P<_WS>(?:(?:\\ |\t))+)|(?P<STATE>\\d+)', {1: '_WS', 2: 'STATE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[292] = (lexer_regexps)
MRES = (
[('(?P<_WS>(?:(?:\\ |\t))+)|(?P<STATE>\\d+)', {1: '_WS', 2: 'STATE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[293] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_5',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_6',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[294] = (lexer_regexps)
MRES = (
[('(?P<STATE>\\d+)', {1: 'STATE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[295] = (lexer_regexps)
MRES = (
[('(?P<__ANON_4>\\.\\.)', {1: '__ANON_4'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[296] = (lexer_regexps)
MRES = (
[('(?P<_WS>(?:(?:\\ |\t))+)|(?P<STATE>\\d+)', {1: '_WS', 2: 'STATE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[297] = (lexer_regexps)
MRES = (
[('(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t))+)?\\/(?:(?:(?:\\ |\t))+)?)',
  {1: '_HENSEL_SEP'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[298] = (lexer_regexps)
MRES = (
[('(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t))+)?\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t))+)?\\/(?:(?:(?:\\ |\t))+)?)',
  {1: '_HENSEL_CLOSE', 2: '_HENSEL_SEP'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[299] = (lexer_regexps)
MRES = (
[('(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t))+)?\\/(?:(?:(?:\\ |\t))+)?)',
  {1: '_HENSEL_SEP'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[300] = (lexer_regexps)
MRES = (
[('(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t))+)?\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t))+)?\\/(?:(?:(?:\\ |\t))+)?)',
  {1: '_HENSEL_CLOSE', 2: '_HENSEL_SEP'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[301] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[302] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[303] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[304] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[305] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[306] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[307] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[308] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<__ANON_4>\\.\\.)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<PLUS>\\+)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_WS',
   6: '__ANON_4',
   7: '_VAR_CLOSE',
   8: 'COMMA',
   9: 'PLUS',
   10: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[309] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[310] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[311] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[312] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[313] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_5',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_6',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[314] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[315] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[316] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[317] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<EXTEND_LAST>\\.\\.\\.)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: 'EXTEND_LAST',
   5: '_NEGATE_ALL',
   6: '_VAR_OPEN',
   7: 'LSQB',
   8: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[318] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)', {1: '_VAR_CLOSE', 2: 'COMMA'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[319] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[320] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_5',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_6',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[321] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<INT>[0123456789]+)|(?P<STATE>\\d+)|(?P<_VAR_OPEN>[({])|(?P<LEAVE_ALONE>_)',
  {1: 'NAME', 2: 'INT', 3: 'STATE', 4: '_VAR_OPEN', 5: 'LEAVE_ALONE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[322] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)', {1: '_VAR_CLOSE', 2: 'COMMA'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[323] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<__ANON_4>\\.\\.)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<PLUS>\\+)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_WS',
   6: '__ANON_4',
   7: '_VAR_CLOSE',
   8: 'COMMA',
   9: 'PLUS',
   10: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[324] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[325] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[326] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[327] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<INT>[0123456789]+)|(?P<STATE>\\d+)|(?P<_VAR_OPEN>[({])|(?P<LEAVE_ALONE>_)',
  {1: 'NAME', 2: 'INT', 3: 'STATE', 4: '_VAR_OPEN', 5: 'LEAVE_ALONE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[328] = (lexer_regexps)
MRES = (
[('(?P<COLON>\\:)|(?P<RSQB>\\])', {1: 'COLON', 2: 'RSQB'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[329] = (lexer_regexps)
MRES = (
[('(?P<COLON>\\:)|(?P<RSQB>\\])', {1: 'COLON', 2: 'RSQB'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[330] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_VAR_OPEN>[({])|(?P<LEAVE_ALONE>_)|(?P<LSQB>\\[)',
  {1: 'NAME', 2: 'STATE', 3: '_VAR_OPEN', 4: 'LEAVE_ALONE', 5: 'LSQB'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[331] = (lexer_regexps)
MRES = (
[('(?P<INT>[0123456789]+)', {1: 'INT'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[332] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_5>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<RPAR>\\))|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_5',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_6',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: 'RPAR',
   14: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[333] = (lexer_regexps)
MRES = (
[('(?P<INT>[0123456789]+)', {1: 'INT'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[334] = (lexer_regexps)
MRES = (
[('(?P<INT>[0123456789]+)', {1: 'INT'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[335] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[336] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LEAVE_ALONE>_)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: '_NEGATE_ALL',
   5: '_VAR_OPEN',
   6: 'LEAVE_ALONE',
   7: 'LSQB',
   8: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[337] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_5>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<RPAR>\\))|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_5',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_6',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: 'RPAR',
   14: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[338] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LEAVE_ALONE>_)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: '_NEGATE_ALL',
   5: '_VAR_OPEN',
   6: 'LEAVE_ALONE',
   7: 'LSQB',
   8: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[339] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_5>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<RPAR>\\))|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_5',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_6',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: 'RPAR',
   14: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[340] = (lexer_regexps)
MRES = (
[('(?P<INT>[0123456789]+)', {1: 'INT'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[341] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[342] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_5>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_5',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_6',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[343] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_5>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_5',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_6',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[344] = (lexer_regexps)
MRES = (
[('(?P<COMPASS_DIR>NE|SE|SW|NW|N|E|S|W|FG|BG)|(?P<RPAR>\\))',
  {1: 'COMPASS_DIR', 2: 'RPAR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[345] = (lexer_regexps)
MRES = (
[('(?P<_WS>(?:(?:\\ |\t))+)|(?P<RPAR>\\))', {1: '_WS', 2: 'RPAR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[346] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_5>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_5',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_6',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[347] = (lexer_regexps)
MRES = (
[('(?P<_WS>(?:(?:\\ |\t))+)|(?P<RPAR>\\))', {1: '_WS', 2: 'RPAR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[348] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)', {1: '_VAR_CLOSE', 2: 'COMMA'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[349] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME', 2: 'STATE', 3: '_NEGATE_ALL', 4: '_VAR_OPEN', 5: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[350] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)', {1: '_VAR_CLOSE', 2: 'COMMA'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[351] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)', {1: '_VAR_CLOSE', 2: 'COMMA'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[352] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_5',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_6',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[353] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_5',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_6',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[354] = (lexer_regexps)
MRES = (
[('(?P<STATE>\\d+)', {1: 'STATE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[355] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_5',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_6',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[356] = (lexer_regexps)
MRES = (
[('(?P<STATE>\\d+)', {1: 'STATE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[357] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_5',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_6',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[358] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_5',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_6',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[359] = (lexer_regexps)
MRES = (
[('(?P<_WS>(?:(?:\\ |\t))+)|(?P<STATE>\\d+)', {1: '_WS', 2: 'STATE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[360] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_5',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_6',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[361] = (lexer_regexps)
MRES = (
[('(?P<STATE>\\d+)', {1: 'STATE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[362] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: '_NEGATE_ALL',
   4: '_VAR_OPEN',
   5: 'LSQB',
   6: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[363] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: '_NEGATE_ALL',
   4: '_VAR_OPEN',
   5: 'LSQB',
   6: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[364] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<EXTEND_LAST>\\.\\.\\.)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: 'EXTEND_LAST',
   4: '_NEGATE_ALL',
   5: '_VAR_OPEN',
   6: 'LSQB',
   7: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[365] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)', {1: '_VAR_CLOSE', 2: 'COMMA'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[366] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])', {1: '_VAR_CLOSE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[367] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[368] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<EXTEND_LAST>\\.\\.\\.)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: 'EXTEND_LAST',
   5: '_NEGATE_ALL',
   6: '_VAR_OPEN',
   7: 'LSQB',
   8: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[369] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[370] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[371] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[372] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[373] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[374] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[375] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[376] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)', {1: '_VAR_CLOSE', 2: 'COMMA'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[377] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<EXTEND_LAST>\\.\\.\\.)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LEAVE_ALONE>_)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: 'EXTEND_LAST',
   5: '_NEGATE_ALL',
   6: '_VAR_OPEN',
   7: 'LEAVE_ALONE',
   8: 'LSQB',
   9: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[378] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[379] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[380] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[381] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[382] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[383] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LEAVE_ALONE>_)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: '_NEGATE_ALL',
   5: '_VAR_OPEN',
   6: 'LEAVE_ALONE',
   7: 'LSQB',
   8: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[384] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LEAVE_ALONE>_)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: '_NEGATE_ALL',
   5: '_VAR_OPEN',
   6: 'LEAVE_ALONE',
   7: 'LSQB',
   8: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[385] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[386] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<__ANON_4>\\.\\.)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<PLUS>\\+)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_WS',
   6: '__ANON_4',
   7: '_VAR_CLOSE',
   8: 'COMMA',
   9: 'PLUS',
   10: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[387] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[388] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[389] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[390] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[391] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[392] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[393] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t))+)?)|(?P<RSQB>\\])',
  {1: '_LROT', 2: '_RROT', 3: '_MULT', 4: '_SUBT', 5: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[394] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LEAVE_ALONE>_)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: '_NEGATE_ALL',
   4: '_VAR_OPEN',
   5: 'LEAVE_ALONE',
   6: 'LSQB',
   7: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[395] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t))+)?)|(?P<RSQB>\\])',
  {1: '_LROT', 2: '_RROT', 3: '_MULT', 4: '_SUBT', 5: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[396] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LEAVE_ALONE>_)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: '_NEGATE_ALL',
   4: '_VAR_OPEN',
   5: 'LEAVE_ALONE',
   6: 'LSQB',
   7: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[397] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[398] = (lexer_regexps)
MRES = (
[('(?P<_WS>(?:(?:\\ |\t))+)|(?P<RPAR>\\))', {1: '_WS', 2: 'RPAR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[399] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_5>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_5',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_6',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[400] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_5>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_5',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_6',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[401] = (lexer_regexps)
MRES = (
[('(?P<COMPASS_DIR>NE|SE|SW|NW|N|E|S|W|FG|BG)|(?P<RPAR>\\))',
  {1: 'COMPASS_DIR', 2: 'RPAR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[402] = (lexer_regexps)
MRES = (
[('(?P<_WS>(?:(?:\\ |\t))+)|(?P<RPAR>\\))', {1: '_WS', 2: 'RPAR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[403] = (lexer_regexps)
MRES = (
[('(?P<COMPASS_DIR>NE|SE|SW|NW|N|E|S|W|FG|BG)|(?P<RPAR>\\))',
  {1: 'COMPASS_DIR', 2: 'RPAR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[404] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_5>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_5',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_6',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[405] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)', {1: '_VAR_CLOSE', 2: 'COMMA'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[406] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_5',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_6',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[407] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_5',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_6',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[408] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_5',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_6',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[409] = (lexer_regexps)
MRES = (
[('(?P<STATE>\\d+)', {1: 'STATE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[410] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_5',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_6',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[411] = (lexer_regexps)
MRES = (
[('(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t))+)?\\/(?:(?:(?:\\ |\t))+)?)',
  {1: '_HENSEL_SEP'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[412] = (lexer_regexps)
MRES = (
[('(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t))+)?\\>(?:(?:(?:\\ |\t))+)?)',
  {1: '_HENSEL_CLOSE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[413] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])', {1: '_VAR_CLOSE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[414] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)', {1: '_VAR_CLOSE', 2: 'COMMA'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[415] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[416] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<EXTEND_LAST>\\.\\.\\.)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: 'EXTEND_LAST',
   4: '_NEGATE_ALL',
   5: '_VAR_OPEN',
   6: 'LSQB',
   7: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[417] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])', {1: '_VAR_CLOSE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[418] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)', {1: '_VAR_CLOSE', 2: 'COMMA'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[419] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_WS>(?:(?:\\ '
  '|\t'
  '))+)|(?P<STATE>\\d+)|(?P<EXTEND_LAST>\\.\\.\\.)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LEAVE_ALONE>_)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_WS',
   3: 'STATE',
   4: 'EXTEND_LAST',
   5: '_NEGATE_ALL',
   6: '_VAR_OPEN',
   7: 'LEAVE_ALONE',
   8: 'LSQB',
   9: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[420] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[421] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)', {1: '_VAR_CLOSE', 2: 'COMMA'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[422] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<EXTEND_LAST>\\.\\.\\.)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LEAVE_ALONE>_)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: 'EXTEND_LAST',
   4: '_NEGATE_ALL',
   5: '_VAR_OPEN',
   6: 'LEAVE_ALONE',
   7: 'LSQB',
   8: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[423] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])', {1: '_VAR_CLOSE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[424] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t))+)?)|(?P<RSQB>\\])',
  {1: '_LROT', 2: '_RROT', 3: '_MULT', 4: '_SUBT', 5: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[425] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LEAVE_ALONE>_)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: '_NEGATE_ALL',
   4: '_VAR_OPEN',
   5: 'LEAVE_ALONE',
   6: 'LSQB',
   7: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[426] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t))+)?)|(?P<RSQB>\\])',
  {1: '_LROT', 2: '_RROT', 3: '_MULT', 4: '_SUBT', 5: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[427] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LEAVE_ALONE>_)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: '_NEGATE_ALL',
   4: '_VAR_OPEN',
   5: 'LEAVE_ALONE',
   6: 'LSQB',
   7: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[428] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_5>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<RPAR>\\))|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_5',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_6',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: 'RPAR',
   14: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[429] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t))+)?)|(?P<RSQB>\\])',
  {1: '_LROT', 2: '_RROT', 3: '_MULT', 4: '_SUBT', 5: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[430] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_5>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<RPAR>\\))|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_5',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_6',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: 'RPAR',
   14: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[431] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t))+)?)|(?P<RSQB>\\])',
  {1: '_LROT', 2: '_RROT', 3: '_MULT', 4: '_SUBT', 5: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[432] = (lexer_regexps)
MRES = (
[('(?P<_WS>(?:(?:\\ |\t))+)|(?P<RPAR>\\))', {1: '_WS', 2: 'RPAR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[433] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_5>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_5',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_6',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[434] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_5>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_5',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_6',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[435] = (lexer_regexps)
MRES = (
[('(?P<COMPASS_DIR>NE|SE|SW|NW|N|E|S|W|FG|BG)|(?P<RPAR>\\))',
  {1: 'COMPASS_DIR', 2: 'RPAR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[436] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_5>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_5',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_6',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[437] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_LROT>(?:(?:(?:\\ |\t'
  '))+)?\\<\\<(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t'
  '))+)?\\>\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t'
  '))+)?\\>(?:(?:(?:\\ |\t))+)?)|(?P<_HENSEL_SEP>(?:(?:(?:\\ |\t'
  '))+)?\\/(?:(?:(?:\\ |\t))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ '
  '|\t))+)?)|(?P<_PERMUTE>(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<__ANON_5>(?m:[ \t]+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t'
  '))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<COMMA>\\,)|(?P<LSQB>\\[)|(?P<RSQB>\\])|(?P<SEMICOLON>\\;)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_LROT',
   4: '_NORMAL_ARROW',
   5: '_RROT',
   6: '_HENSEL_CLOSE',
   7: '_HENSEL_SEP',
   8: '_MULT',
   9: '_PERMUTE',
   10: '_SUBT',
   11: '__ANON_5',
   12: '_WS',
   13: '_NL',
   14: 'STATE',
   15: '__ANON_6',
   16: '_NEGATE_ALL',
   17: '_VAR_CLOSE',
   18: '_VAR_OPEN',
   19: 'BANG',
   20: 'COMMA',
   21: 'LSQB',
   22: 'RSQB',
   23: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[438] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: '_NEGATE_ALL',
   4: '_VAR_OPEN',
   5: 'LSQB',
   6: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[439] = (lexer_regexps)
MRES = (
[('(?P<COMMA>\\,)|(?P<SEMICOLON>\\;)', {1: 'COMMA', 2: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[440] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[441] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])', {1: '_VAR_CLOSE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[442] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)', {1: '_VAR_CLOSE', 2: 'COMMA'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[443] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[444] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<STATE>\\d+)|(?P<EXTEND_LAST>\\.\\.\\.)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<LEAVE_ALONE>_)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: 'STATE',
   3: 'EXTEND_LAST',
   4: '_NEGATE_ALL',
   5: '_VAR_OPEN',
   6: 'LEAVE_ALONE',
   7: 'LSQB',
   8: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[445] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)', {1: '_VAR_CLOSE', 2: 'COMMA'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[446] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])', {1: '_VAR_CLOSE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[447] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)', {1: '_VAR_CLOSE', 2: 'COMMA'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[448] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])', {1: '_VAR_CLOSE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[449] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[450] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[451] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t))+)?)|(?P<RSQB>\\])',
  {1: '_LROT', 2: '_RROT', 3: '_MULT', 4: '_SUBT', 5: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[452] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[453] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t))+)?)|(?P<RSQB>\\])',
  {1: '_LROT', 2: '_RROT', 3: '_MULT', 4: '_SUBT', 5: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[454] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_5>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<RPAR>\\))|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_5',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_6',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: 'RPAR',
   14: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[455] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_5>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<RPAR>\\))|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_5',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_6',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: 'RPAR',
   14: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[456] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*)|(?P<_HOIST_ARROW>(?:(?:(?:\\ '
  '|\t))+)?\\=\\>(?:(?:(?:\\ |\t))+)?)|(?P<_NORMAL_ARROW>(?:(?:(?:\\ |\t'
  '))+)?\\-\\>(?:(?:(?:\\ |\t))+)?)|(?P<__ANON_5>(?m:[ \t'
  ']+(?:#.*)?$))|(?P<_WS>(?:(?:\\ |\t))+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<STATE>\\d+)|(?P<__ANON_6>#.*)|(?P<_NEGATE_ALL>\\-\\-)|(?P<_VAR_OPEN>[({])|(?P<BANG>\\!)|(?P<LSQB>\\[)|(?P<_NEGATE_LIVE>\\-)',
  {1: 'NAME',
   2: '_HOIST_ARROW',
   3: '_NORMAL_ARROW',
   4: '__ANON_5',
   5: '_WS',
   6: '_NL',
   7: 'STATE',
   8: '__ANON_6',
   9: '_NEGATE_ALL',
   10: '_VAR_OPEN',
   11: 'BANG',
   12: 'LSQB',
   13: '_NEGATE_LIVE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[457] = (lexer_regexps)
MRES = (
[('(?P<_HENSEL_CLOSE>(?:(?:(?:\\ |\t))+)?\\>(?:(?:(?:\\ |\t))+)?)',
  {1: '_HENSEL_CLOSE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[458] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[459] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])', {1: '_VAR_CLOSE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[460] = (lexer_regexps)
MRES = (
[('(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)', {1: '_VAR_CLOSE', 2: 'COMMA'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[461] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[462] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[463] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[464] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[465] = (lexer_regexps)
MRES = (
[('(?P<COMMA>\\,)|(?P<SEMICOLON>\\;)', {1: 'COMMA', 2: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[466] = (lexer_regexps)
MRES = (
[('(?P<_LROT>(?:(?:(?:\\ |\t))+)?\\<\\<(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_RROT>(?:(?:(?:\\ |\t))+)?\\>\\>(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_MULT>(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_SUBT>(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t'
  '))+)?)|(?P<_VAR_CLOSE>[)}])|(?P<COMMA>\\,)|(?P<RSQB>\\])',
  {1: '_LROT',
   2: '_RROT',
   3: '_MULT',
   4: '_SUBT',
   5: '_VAR_CLOSE',
   6: 'COMMA',
   7: 'RSQB'})]
)
LEXER_CALLBACK = (
{'_SUBT': [('(?P<_NEGATE_LIVE>\\-$)', {1: '_NEGATE_LIVE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[467] = (lexer_regexps)
class ContextualLexer:
    def __init__(self):
        self.lexers = LEXERS
        self.set_parser_state(None)
    def set_parser_state(self, state):
        self.parser_state = state
    def lex(self, stream, tbl):
        newline_types = NEWLINE_TYPES
        ignore_types = IGNORE_TYPES
        lexers = LEXERS
        l = _Lex(lexers[self.parser_state], self.parser_state)
        for x in l.lex(stream, newline_types, ignore_types, tbl):
            yield x
            l.lexer = lexers[self.parser_state]
            l.state = self.parser_state
RULES = {
  0: Rule(NonTerminal('table'), [NonTerminal('__anon_plus_0')], None, RuleOptions(False, False, None)),
  1: Rule(NonTerminal('line'), [NonTerminal('transition')], 'transition', RuleOptions(False, False, None)),
  2: Rule(NonTerminal('line'), [Terminal('BANG', True), NonTerminal('_expr_no_int')], 'print_var', RuleOptions(False, False, None)),
  3: Rule(NonTerminal('line'), [Terminal('NAME', False), Terminal('COLON', True), Terminal('__ANON_0', False)], 'directive', RuleOptions(False, False, None)),
  4: Rule(NonTerminal('line'), [NonTerminal('rulestring_tr')], 'rulestring_transition', RuleOptions(False, False, None)),
  5: Rule(NonTerminal('line'), [NonTerminal('transition'), NonTerminal('_aux')], 'transition', RuleOptions(False, False, None)),
  6: Rule(NonTerminal('line'), [Terminal('NAME', False), Terminal('_WS', True), Terminal('EQUAL', True), NonTerminal('_expr')], 'var_decl', RuleOptions(False, False, None)),
  7: Rule(NonTerminal('line'), [Terminal('NAME', False), Terminal('_WS', True), Terminal('EQUAL', True), Terminal('_WS', True), NonTerminal('_expr')], 'var_decl', RuleOptions(False, False, None)),
  8: Rule(NonTerminal('line'), [Terminal('NAME', False), Terminal('EQUAL', True), NonTerminal('_expr')], 'var_decl', RuleOptions(False, False, None)),
  9: Rule(NonTerminal('line'), [NonTerminal('rulestring_tr'), NonTerminal('_aux')], 'rulestring_transition', RuleOptions(False, False, None)),
  10: Rule(NonTerminal('line'), [Terminal('NAME', False), Terminal('COLON', True), Terminal('_WS', True), Terminal('__ANON_0', False)], 'directive', RuleOptions(False, False, None)),
  11: Rule(NonTerminal('line'), [Terminal('NAME', False), Terminal('EQUAL', True), Terminal('_WS', True), NonTerminal('_expr')], 'var_decl', RuleOptions(False, False, None)),
  12: Rule(NonTerminal('rulestring_tr'), [NonTerminal('_tr_expr'), NonTerminal('_sep'), NonTerminal('rulestring_napkin'), NonTerminal('_sep'), NonTerminal('reference')], None, RuleOptions(False, False, None)),
  13: Rule(NonTerminal('rulestring_tr'), [NonTerminal('_tr_expr'), NonTerminal('_sep'), NonTerminal('rulestring_napkin'), NonTerminal('_sep'), Terminal('STATE', False)], None, RuleOptions(False, False, None)),
  14: Rule(NonTerminal('rulestring_napkin'), [Terminal('_HENSEL_OPEN', True), Terminal('__ANON_1', False), Terminal('_WS', True), Terminal('__ANON_2', False), Terminal('_HENSEL_SEP', True), NonTerminal('_rs_expr'), Terminal('_HENSEL_SEP', True), NonTerminal('_rs_expr'), Terminal('_HENSEL_CLOSE', True)], 'modified_rulestring_napkin', RuleOptions(False, False, None)),
  15: Rule(NonTerminal('rulestring_napkin'), [Terminal('_HENSEL_OPEN', True), Terminal('__ANON_1', False), Terminal('_HENSEL_SEP', True), NonTerminal('_rs_expr'), Terminal('_HENSEL_SEP', True), NonTerminal('_rs_expr'), Terminal('_HENSEL_CLOSE', True)], 'rulestring_napkin', RuleOptions(False, False, None)),
  16: Rule(NonTerminal('_rs_expr'), [NonTerminal('_tr_expr')], None, RuleOptions(False, False, None)),
  17: Rule(NonTerminal('_rs_expr'), [NonTerminal('inline_binding')], None, RuleOptions(False, False, None)),
  18: Rule(NonTerminal('transition'), [NonTerminal('_tr_expr'), NonTerminal('__anon_plus_1'), NonTerminal('_sep'), NonTerminal('_tr_expr')], 'main', RuleOptions(False, False, None)),
  19: Rule(NonTerminal('tr_state'), [NonTerminal('_tr_expr')], None, RuleOptions(False, False, None)),
  20: Rule(NonTerminal('tr_state'), [NonTerminal('inline_binding')], 'permute_shorthand', RuleOptions(False, False, None)),
  21: Rule(NonTerminal('tr_state'), [NonTerminal('crange'), Terminal('_WS', True), NonTerminal('_tr_expr')], None, RuleOptions(False, False, None)),
  22: Rule(NonTerminal('tr_state'), [NonTerminal('prefix'), Terminal('_WS', True), NonTerminal('_tr_expr')], None, RuleOptions(False, False, None)),
  23: Rule(NonTerminal('tr_state'), [NonTerminal('inline_binding'), Terminal('_PERMUTE', True), Terminal('__ANON_3', False)], 'permute_shorthand', RuleOptions(False, False, None)),
  24: Rule(NonTerminal('tr_state'), [NonTerminal('_tr_expr'), Terminal('_PERMUTE', True), Terminal('__ANON_3', False)], 'permute_shorthand', RuleOptions(False, False, None)),
  25: Rule(NonTerminal('tr_state'), [NonTerminal('crange'), Terminal('_WS', True), NonTerminal('inline_binding')], None, RuleOptions(False, False, None)),
  26: Rule(NonTerminal('inline_binding'), [Terminal('LSQB', True), NonTerminal('_tr_expr_no_int'), Terminal('RSQB', True)], None, RuleOptions(False, False, None)),
  27: Rule(NonTerminal('prefix'), [NonTerminal('crange')], None, RuleOptions(False, False, None)),
  28: Rule(NonTerminal('prefix'), [Terminal('COMPASS_DIR', False)], 'cdir', RuleOptions(False, False, None)),
  29: Rule(NonTerminal('crange'), [Terminal('COMPASS_DIR', False), Terminal('__ANON_4', True), Terminal('COMPASS_DIR', False)], None, RuleOptions(False, False, None)),
  30: Rule(NonTerminal('_sep'), [Terminal('SEMICOLON', True), Terminal('_WS', True)], None, RuleOptions(False, False, None)),
  31: Rule(NonTerminal('_sep'), [Terminal('COMMA', True), Terminal('_WS', True)], None, RuleOptions(False, False, None)),
  32: Rule(NonTerminal('_sep'), [Terminal('SEMICOLON', True)], None, RuleOptions(False, False, None)),
  33: Rule(NonTerminal('_sep'), [Terminal('COMMA', True)], None, RuleOptions(False, False, None)),
  34: Rule(NonTerminal('_aux'), [NonTerminal('normal_aux'), NonTerminal('hoist_aux')], None, RuleOptions(False, False, None)),
  35: Rule(NonTerminal('_aux'), [NonTerminal('hoist_aux'), NonTerminal('normal_aux')], None, RuleOptions(False, False, None)),
  36: Rule(NonTerminal('_aux'), [NonTerminal('normal_aux')], None, RuleOptions(False, False, None)),
  37: Rule(NonTerminal('_aux'), [NonTerminal('hoist_aux')], None, RuleOptions(False, False, None)),
  38: Rule(NonTerminal('normal_aux'), [Terminal('_NORMAL_ARROW', True), NonTerminal('_auxlist')], None, RuleOptions(False, False, None)),
  39: Rule(NonTerminal('hoist_aux'), [Terminal('_HOIST_ARROW', True), NonTerminal('_auxlist')], None, RuleOptions(False, False, None)),
  40: Rule(NonTerminal('_auxlist'), [NonTerminal('auxiliary')], None, RuleOptions(False, False, None)),
  41: Rule(NonTerminal('_auxlist'), [NonTerminal('symmetried_aux')], None, RuleOptions(False, False, None)),
  42: Rule(NonTerminal('_auxlist'), [NonTerminal('auxiliary'), NonTerminal('__anon_star_2')], None, RuleOptions(False, False, None)),
  43: Rule(NonTerminal('_auxlist'), [NonTerminal('symmetried_aux'), NonTerminal('__anon_star_2')], None, RuleOptions(False, False, None)),
  44: Rule(NonTerminal('symmetried_aux'), [Terminal('SYMMETRY_NAME', False), Terminal('BANG', True), NonTerminal('_aux_group')], 'stationary_symmetried_aux', RuleOptions(False, False, None)),
  45: Rule(NonTerminal('symmetried_aux'), [Terminal('SYMMETRY_NAME', False), NonTerminal('_aux_group')], None, RuleOptions(False, False, None)),
  46: Rule(NonTerminal('_aux_group'), [Terminal('LPAR', True), Terminal('_WS', True), NonTerminal('auxiliary'), NonTerminal('__anon_star_3'), Terminal('_WS', True), Terminal('RPAR', True)], None, RuleOptions(False, False, None)),
  47: Rule(NonTerminal('_aux_group'), [Terminal('LPAR', True), Terminal('_WS', True), NonTerminal('auxiliary'), Terminal('RPAR', True)], None, RuleOptions(False, False, None)),
  48: Rule(NonTerminal('_aux_group'), [Terminal('LPAR', True), NonTerminal('auxiliary'), Terminal('_WS', True), Terminal('RPAR', True)], None, RuleOptions(False, False, None)),
  49: Rule(NonTerminal('_aux_group'), [Terminal('LPAR', True), NonTerminal('auxiliary'), NonTerminal('__anon_star_3'), Terminal('_WS', True), Terminal('RPAR', True)], None, RuleOptions(False, False, None)),
  50: Rule(NonTerminal('_aux_group'), [Terminal('LPAR', True), NonTerminal('auxiliary'), NonTerminal('__anon_star_3'), Terminal('RPAR', True)], None, RuleOptions(False, False, None)),
  51: Rule(NonTerminal('_aux_group'), [Terminal('LPAR', True), NonTerminal('auxiliary'), Terminal('RPAR', True)], None, RuleOptions(False, False, None)),
  52: Rule(NonTerminal('_aux_group'), [Terminal('LPAR', True), Terminal('_WS', True), NonTerminal('auxiliary'), NonTerminal('__anon_star_3'), Terminal('RPAR', True)], None, RuleOptions(False, False, None)),
  53: Rule(NonTerminal('_aux_group'), [Terminal('LPAR', True), Terminal('_WS', True), NonTerminal('auxiliary'), Terminal('_WS', True), Terminal('RPAR', True)], None, RuleOptions(False, False, None)),
  54: Rule(NonTerminal('auxiliary'), [NonTerminal('cdir_delay'), Terminal('LSQB', True), NonTerminal('_aux_expr_no_int'), Terminal('RSQB', True)], 'aux_map_self', RuleOptions(False, False, None)),
  55: Rule(NonTerminal('auxiliary'), [NonTerminal('cdir_delay'), Terminal('COLON', True), Terminal('STATE', False)], 'aux_bare', RuleOptions(False, False, None)),
  56: Rule(NonTerminal('auxiliary'), [NonTerminal('cdir_delay'), Terminal('LSQB', True), Terminal('INT', False), Terminal('COLON', True), NonTerminal('_aux_expr_no_int'), Terminal('RSQB', True)], 'aux_map_other', RuleOptions(False, False, None)),
  57: Rule(NonTerminal('auxiliary'), [NonTerminal('cdir_delay'), Terminal('LSQB', True), Terminal('COMPASS_DIR', False), Terminal('RSQB', True)], 'aux_bind_self', RuleOptions(False, False, None)),
  58: Rule(NonTerminal('auxiliary'), [NonTerminal('cdir_delay'), Terminal('LSQB', True), Terminal('COMPASS_DIR', False), Terminal('COLON', True), Terminal('_WS', True), NonTerminal('_aux_expr_no_int'), Terminal('RSQB', True)], 'aux_map_other', RuleOptions(False, False, None)),
  59: Rule(NonTerminal('auxiliary'), [NonTerminal('cdir_delay'), Terminal('LSQB', True), Terminal('COMPASS_DIR', False), Terminal('COLON', True), NonTerminal('_aux_expr_no_int'), Terminal('RSQB', True)], 'aux_map_other', RuleOptions(False, False, None)),
  60: Rule(NonTerminal('auxiliary'), [NonTerminal('cdir_delay'), Terminal('LSQB', True), Terminal('INT', False), Terminal('RSQB', True)], 'aux_bind_self', RuleOptions(False, False, None)),
  61: Rule(NonTerminal('auxiliary'), [NonTerminal('cdir_delay'), Terminal('LSQB', True), Terminal('INT', False), Terminal('COLON', True), Terminal('_WS', True), NonTerminal('_aux_expr_no_int'), Terminal('RSQB', True)], 'aux_map_other', RuleOptions(False, False, None)),
  62: Rule(NonTerminal('cdir_delay'), [Terminal('COMPASS_DIR', False)], None, RuleOptions(False, False, None)),
  63: Rule(NonTerminal('cdir_delay'), [Terminal('COMPASS_DIR', False), Terminal('PLUS', True), Terminal('INT', False)], None, RuleOptions(False, False, None)),
  64: Rule(NonTerminal('var'), [Terminal('_VAR_OPEN', True), NonTerminal('range'), Terminal('_VAR_CLOSE', True)], 'noref_var', RuleOptions(False, False, None)),
  65: Rule(NonTerminal('var'), [Terminal('_VAR_OPEN', True), NonTerminal('_expr'), NonTerminal('__anon_star_4'), Terminal('_VAR_CLOSE', True)], 'noref_var', RuleOptions(False, False, None)),
  66: Rule(NonTerminal('var'), [Terminal('_VAR_OPEN', True), NonTerminal('_expr'), Terminal('_VAR_CLOSE', True)], 'noref_var', RuleOptions(False, False, None)),
  67: Rule(NonTerminal('tr_var'), [Terminal('_VAR_OPEN', True), NonTerminal('_tr_expr'), NonTerminal('__anon_star_5'), Terminal('_VAR_CLOSE', True)], 'var', RuleOptions(False, False, None)),
  68: Rule(NonTerminal('tr_var'), [Terminal('_VAR_OPEN', True), NonTerminal('range'), Terminal('_VAR_CLOSE', True)], 'var', RuleOptions(False, False, None)),
  69: Rule(NonTerminal('tr_var'), [Terminal('_VAR_OPEN', True), NonTerminal('_tr_expr'), Terminal('_VAR_CLOSE', True)], 'var', RuleOptions(False, False, None)),
  70: Rule(NonTerminal('ref_var'), [Terminal('_VAR_OPEN', True), NonTerminal('_ref_expr'), NonTerminal('__anon_star_6'), Terminal('COMMA', True), Terminal('_WS', True), Terminal('EXTEND_LAST', False), Terminal('_VAR_CLOSE', True)], 'var', RuleOptions(False, False, None)),
  71: Rule(NonTerminal('ref_var'), [Terminal('_VAR_OPEN', True), NonTerminal('_ref_expr'), NonTerminal('__anon_star_6'), Terminal('COMMA', True), Terminal('EXTEND_LAST', False), Terminal('_VAR_CLOSE', True)], 'var', RuleOptions(False, False, None)),
  72: Rule(NonTerminal('ref_var'), [Terminal('_VAR_OPEN', True), NonTerminal('range'), Terminal('_VAR_CLOSE', True)], 'var', RuleOptions(False, False, None)),
  73: Rule(NonTerminal('ref_var'), [Terminal('_VAR_OPEN', True), NonTerminal('_ref_expr'), Terminal('COMMA', True), Terminal('EXTEND_LAST', False), Terminal('_VAR_CLOSE', True)], 'var', RuleOptions(False, False, None)),
  74: Rule(NonTerminal('ref_var'), [Terminal('_VAR_OPEN', True), NonTerminal('_ref_expr'), Terminal('COMMA', True), Terminal('_WS', True), Terminal('EXTEND_LAST', False), Terminal('_VAR_CLOSE', True)], 'var', RuleOptions(False, False, None)),
  75: Rule(NonTerminal('ref_var'), [Terminal('_VAR_OPEN', True), NonTerminal('_ref_expr'), Terminal('_VAR_CLOSE', True)], 'var', RuleOptions(False, False, None)),
  76: Rule(NonTerminal('ref_var'), [Terminal('_VAR_OPEN', True), NonTerminal('_ref_expr'), NonTerminal('__anon_star_6'), Terminal('_VAR_CLOSE', True)], 'var', RuleOptions(False, False, None)),
  77: Rule(NonTerminal('aux_var'), [Terminal('_VAR_OPEN', True), NonTerminal('range'), Terminal('_VAR_CLOSE', True)], 'var', RuleOptions(False, False, None)),
  78: Rule(NonTerminal('aux_var'), [Terminal('_VAR_OPEN', True), NonTerminal('_aux_expr'), NonTerminal('__anon_star_7'), Terminal('COMMA', True), Terminal('EXTEND_LAST', False), Terminal('_VAR_CLOSE', True)], 'var', RuleOptions(False, False, None)),
  79: Rule(NonTerminal('aux_var'), [Terminal('_VAR_OPEN', True), NonTerminal('_aux_expr'), NonTerminal('__anon_star_7'), Terminal('COMMA', True), Terminal('_WS', True), Terminal('EXTEND_LAST', False), Terminal('_VAR_CLOSE', True)], 'var', RuleOptions(False, False, None)),
  80: Rule(NonTerminal('aux_var'), [Terminal('_VAR_OPEN', True), NonTerminal('_aux_expr'), Terminal('_VAR_CLOSE', True)], 'var', RuleOptions(False, False, None)),
  81: Rule(NonTerminal('aux_var'), [Terminal('_VAR_OPEN', True), NonTerminal('_aux_expr'), Terminal('COMMA', True), Terminal('EXTEND_LAST', False), Terminal('_VAR_CLOSE', True)], 'var', RuleOptions(False, False, None)),
  82: Rule(NonTerminal('aux_var'), [Terminal('_VAR_OPEN', True), NonTerminal('_aux_expr'), NonTerminal('__anon_star_7'), Terminal('_VAR_CLOSE', True)], 'var', RuleOptions(False, False, None)),
  83: Rule(NonTerminal('aux_var'), [Terminal('_VAR_OPEN', True), NonTerminal('_aux_expr'), Terminal('COMMA', True), Terminal('_WS', True), Terminal('EXTEND_LAST', False), Terminal('_VAR_CLOSE', True)], 'var', RuleOptions(False, False, None)),
  84: Rule(NonTerminal('_expr'), [Terminal('STATE', False)], None, RuleOptions(False, False, None)),
  85: Rule(NonTerminal('_expr'), [NonTerminal('_expr_no_int')], None, RuleOptions(False, False, None)),
  86: Rule(NonTerminal('_expr_norec_int'), [NonTerminal('_expr_no_rec')], None, RuleOptions(False, False, None)),
  87: Rule(NonTerminal('_expr_norec_int'), [Terminal('STATE', False)], None, RuleOptions(False, False, None)),
  88: Rule(NonTerminal('_expr_no_int'), [NonTerminal('operation')], None, RuleOptions(False, False, None)),
  89: Rule(NonTerminal('_expr_no_int'), [Terminal('NAME', False)], None, RuleOptions(False, False, None)),
  90: Rule(NonTerminal('_expr_no_int'), [NonTerminal('var')], None, RuleOptions(False, False, None)),
  91: Rule(NonTerminal('_expr_no_int'), [NonTerminal('range')], None, RuleOptions(False, False, None)),
  92: Rule(NonTerminal('_expr_no_rec'), [Terminal('NAME', False)], None, RuleOptions(False, False, None)),
  93: Rule(NonTerminal('_expr_no_rec'), [NonTerminal('var')], None, RuleOptions(False, False, None)),
  94: Rule(NonTerminal('_expr_no_rec'), [NonTerminal('range')], None, RuleOptions(False, False, None)),
  95: Rule(NonTerminal('operation'), [Terminal('_NEGATE_LIVE', True), NonTerminal('_expr')], 'noref_live_except', RuleOptions(False, False, None)),
  96: Rule(NonTerminal('operation'), [NonTerminal('_expr_no_int'), Terminal('_LROT', True), Terminal('INT', False)], 'noref_rot_left', RuleOptions(False, False, None)),
  97: Rule(NonTerminal('operation'), [NonTerminal('_expr_no_int'), Terminal('_RROT', True), Terminal('INT', False)], 'noref_rot_right', RuleOptions(False, False, None)),
  98: Rule(NonTerminal('operation'), [Terminal('STATE', False), Terminal('_MULT', True), NonTerminal('_expr_no_rec')], 'noref_int_to_var_length', RuleOptions(False, False, None)),
  99: Rule(NonTerminal('operation'), [NonTerminal('_expr_no_int'), NonTerminal('_subt'), NonTerminal('_expr_norec_int')], 'noref_subt', RuleOptions(False, False, None)),
  100: Rule(NonTerminal('operation'), [NonTerminal('_expr_no_int'), Terminal('_MULT', True), Terminal('INT', False)], 'noref_repeat_var', RuleOptions(False, False, None)),
  101: Rule(NonTerminal('operation'), [Terminal('_NEGATE_ALL', True), NonTerminal('_expr')], 'noref_all_except', RuleOptions(False, False, None)),
  102: Rule(NonTerminal('operation'), [Terminal('STATE', False), Terminal('_MULT', True), Terminal('INT', False)], 'noref_repeat_int', RuleOptions(False, False, None)),
  103: Rule(NonTerminal('_tr_expr'), [NonTerminal('_tr_expr_no_int')], None, RuleOptions(False, False, None)),
  104: Rule(NonTerminal('_tr_expr'), [NonTerminal('reference')], None, RuleOptions(False, False, None)),
  105: Rule(NonTerminal('_tr_expr'), [Terminal('STATE', False)], None, RuleOptions(False, False, None)),
  106: Rule(NonTerminal('_tr_expr_norec_int'), [NonTerminal('_tr_expr_no_rec')], None, RuleOptions(False, False, None)),
  107: Rule(NonTerminal('_tr_expr_norec_int'), [NonTerminal('reference')], None, RuleOptions(False, False, None)),
  108: Rule(NonTerminal('_tr_expr_norec_int'), [Terminal('STATE', False)], None, RuleOptions(False, False, None)),
  109: Rule(NonTerminal('_tr_expr_no_int'), [NonTerminal('tr_var')], None, RuleOptions(False, False, None)),
  110: Rule(NonTerminal('_tr_expr_no_int'), [Terminal('NAME', False)], None, RuleOptions(False, False, None)),
  111: Rule(NonTerminal('_tr_expr_no_int'), [NonTerminal('tr_operation')], None, RuleOptions(False, False, None)),
  112: Rule(NonTerminal('_tr_expr_no_int'), [NonTerminal('range')], None, RuleOptions(False, False, None)),
  113: Rule(NonTerminal('_tr_expr_no_rec'), [NonTerminal('tr_var')], None, RuleOptions(False, False, None)),
  114: Rule(NonTerminal('_tr_expr_no_rec'), [Terminal('NAME', False)], None, RuleOptions(False, False, None)),
  115: Rule(NonTerminal('_tr_expr_no_rec'), [NonTerminal('range')], None, RuleOptions(False, False, None)),
  116: Rule(NonTerminal('tr_operation'), [Terminal('_NEGATE_LIVE', True), NonTerminal('_tr_expr')], 'live_except', RuleOptions(False, False, None)),
  117: Rule(NonTerminal('tr_operation'), [Terminal('STATE', False), Terminal('_MULT', True), Terminal('INT', False)], 'repeat_int', RuleOptions(False, False, None)),
  118: Rule(NonTerminal('tr_operation'), [NonTerminal('_tr_expr_no_int'), Terminal('_MULT', True), Terminal('INT', False)], 'repeat_var', RuleOptions(False, False, None)),
  119: Rule(NonTerminal('tr_operation'), [Terminal('_NEGATE_ALL', True), NonTerminal('_tr_expr')], 'all_except', RuleOptions(False, False, None)),
  120: Rule(NonTerminal('tr_operation'), [NonTerminal('reference'), Terminal('_MULT', True), Terminal('INT', False)], 'repeat_int', RuleOptions(False, False, None)),
  121: Rule(NonTerminal('tr_operation'), [NonTerminal('_tr_expr_no_int'), NonTerminal('_subt'), NonTerminal('_tr_expr_norec_int')], 'subt', RuleOptions(False, False, None)),
  122: Rule(NonTerminal('tr_operation'), [NonTerminal('_tr_expr_no_int'), Terminal('_RROT', True), Terminal('INT', False)], 'rot_right', RuleOptions(False, False, None)),
  123: Rule(NonTerminal('tr_operation'), [NonTerminal('_tr_expr_no_int'), Terminal('_LROT', True), Terminal('INT', False)], 'rot_left', RuleOptions(False, False, None)),
  124: Rule(NonTerminal('tr_operation'), [NonTerminal('reference'), Terminal('_MULT', True), NonTerminal('_tr_expr_no_rec')], 'int_to_var_length', RuleOptions(False, False, None)),
  125: Rule(NonTerminal('tr_operation'), [Terminal('STATE', False), Terminal('_MULT', True), NonTerminal('_tr_expr_no_rec')], 'int_to_var_length', RuleOptions(False, False, None)),
  126: Rule(NonTerminal('_ref_expr'), [NonTerminal('_ref_expr_no_int')], None, RuleOptions(False, False, None)),
  127: Rule(NonTerminal('_ref_expr'), [NonTerminal('reference')], None, RuleOptions(False, False, None)),
  128: Rule(NonTerminal('_ref_expr'), [Terminal('STATE', False)], None, RuleOptions(False, False, None)),
  129: Rule(NonTerminal('_ref_expr_norec_int'), [NonTerminal('reference')], None, RuleOptions(False, False, None)),
  130: Rule(NonTerminal('_ref_expr_norec_int'), [Terminal('STATE', False)], None, RuleOptions(False, False, None)),
  131: Rule(NonTerminal('_ref_expr_norec_int'), [NonTerminal('_ref_expr_no_rec')], None, RuleOptions(False, False, None)),
  132: Rule(NonTerminal('_ref_expr_no_int'), [NonTerminal('range')], None, RuleOptions(False, False, None)),
  133: Rule(NonTerminal('_ref_expr_no_int'), [Terminal('NAME', False)], None, RuleOptions(False, False, None)),
  134: Rule(NonTerminal('_ref_expr_no_int'), [NonTerminal('ref_var')], None, RuleOptions(False, False, None)),
  135: Rule(NonTerminal('_ref_expr_no_int'), [NonTerminal('ref_operation')], None, RuleOptions(False, False, None)),
  136: Rule(NonTerminal('_ref_expr_no_rec'), [Terminal('NAME', False)], None, RuleOptions(False, False, None)),
  137: Rule(NonTerminal('_ref_expr_no_rec'), [NonTerminal('ref_var')], None, RuleOptions(False, False, None)),
  138: Rule(NonTerminal('_ref_expr_no_rec'), [NonTerminal('range')], None, RuleOptions(False, False, None)),
  139: Rule(NonTerminal('ref_operation'), [Terminal('STATE', False), Terminal('_MULT', True), NonTerminal('_ref_expr_no_rec')], 'int_to_var_length', RuleOptions(False, False, None)),
  140: Rule(NonTerminal('ref_operation'), [Terminal('_NEGATE_ALL', True), NonTerminal('_ref_expr')], 'all_except', RuleOptions(False, False, None)),
  141: Rule(NonTerminal('ref_operation'), [NonTerminal('reference'), Terminal('_MULT', True), NonTerminal('_ref_expr_no_rec')], 'int_to_var_length', RuleOptions(False, False, None)),
  142: Rule(NonTerminal('ref_operation'), [NonTerminal('_ref_expr_no_int'), Terminal('_RROT', True), Terminal('INT', False)], 'rot_right', RuleOptions(False, False, None)),
  143: Rule(NonTerminal('ref_operation'), [NonTerminal('_ref_expr_no_int'), Terminal('_MULT', True), Terminal('INT', False)], 'repeat_var', RuleOptions(False, False, None)),
  144: Rule(NonTerminal('ref_operation'), [Terminal('STATE', False), Terminal('_MULT', True), Terminal('INT', False)], 'repeat_int', RuleOptions(False, False, None)),
  145: Rule(NonTerminal('ref_operation'), [NonTerminal('_ref_expr_no_int'), NonTerminal('_subt'), NonTerminal('_ref_expr_norec_int')], 'subt', RuleOptions(False, False, None)),
  146: Rule(NonTerminal('ref_operation'), [NonTerminal('reference'), Terminal('_MULT', True), Terminal('INT', False)], 'repeat_int', RuleOptions(False, False, None)),
  147: Rule(NonTerminal('ref_operation'), [NonTerminal('_ref_expr_no_int'), Terminal('_LROT', True), Terminal('INT', False)], 'rot_left', RuleOptions(False, False, None)),
  148: Rule(NonTerminal('ref_operation'), [Terminal('_NEGATE_LIVE', True), NonTerminal('_ref_expr')], 'live_except', RuleOptions(False, False, None)),
  149: Rule(NonTerminal('_aux_expr'), [NonTerminal('_aux_expr_no_int')], None, RuleOptions(False, False, None)),
  150: Rule(NonTerminal('_aux_expr'), [Terminal('STATE', False)], None, RuleOptions(False, False, None)),
  151: Rule(NonTerminal('_aux_expr'), [NonTerminal('aux_reference')], None, RuleOptions(False, False, None)),
  152: Rule(NonTerminal('_aux_expr_norec_int'), [NonTerminal('_aux_expr_no_rec')], None, RuleOptions(False, False, None)),
  153: Rule(NonTerminal('_aux_expr_norec_int'), [Terminal('STATE', False)], None, RuleOptions(False, False, None)),
  154: Rule(NonTerminal('_aux_expr_norec_int'), [NonTerminal('aux_reference')], None, RuleOptions(False, False, None)),
  155: Rule(NonTerminal('_aux_expr_no_int'), [NonTerminal('aux_var')], None, RuleOptions(False, False, None)),
  156: Rule(NonTerminal('_aux_expr_no_int'), [Terminal('LEAVE_ALONE', False)], None, RuleOptions(False, False, None)),
  157: Rule(NonTerminal('_aux_expr_no_int'), [Terminal('NAME', False)], None, RuleOptions(False, False, None)),
  158: Rule(NonTerminal('_aux_expr_no_int'), [NonTerminal('aux_operation')], None, RuleOptions(False, False, None)),
  159: Rule(NonTerminal('_aux_expr_no_int'), [NonTerminal('leave_alone_mult')], None, RuleOptions(False, False, None)),
  160: Rule(NonTerminal('_aux_expr_no_int'), [NonTerminal('range')], None, RuleOptions(False, False, None)),
  161: Rule(NonTerminal('_aux_expr_no_rec'), [NonTerminal('aux_var')], None, RuleOptions(False, False, None)),
  162: Rule(NonTerminal('_aux_expr_no_rec'), [Terminal('LEAVE_ALONE', False)], None, RuleOptions(False, False, None)),
  163: Rule(NonTerminal('_aux_expr_no_rec'), [Terminal('NAME', False)], None, RuleOptions(False, False, None)),
  164: Rule(NonTerminal('_aux_expr_no_rec'), [NonTerminal('leave_alone_mult')], None, RuleOptions(False, False, None)),
  165: Rule(NonTerminal('_aux_expr_no_rec'), [NonTerminal('range')], None, RuleOptions(False, False, None)),
  166: Rule(NonTerminal('aux_operation'), [NonTerminal('aux_reference'), Terminal('_MULT', True), NonTerminal('_aux_expr_no_rec')], 'int_to_var_length', RuleOptions(False, False, None)),
  167: Rule(NonTerminal('aux_operation'), [Terminal('_NEGATE_LIVE', True), NonTerminal('_aux_expr')], 'live_except', RuleOptions(False, False, None)),
  168: Rule(NonTerminal('aux_operation'), [Terminal('STATE', False), Terminal('_MULT', True), NonTerminal('_aux_expr_no_rec')], 'int_to_var_length', RuleOptions(False, False, None)),
  169: Rule(NonTerminal('aux_operation'), [Terminal('STATE', False), Terminal('_MULT', True), Terminal('INT', False)], 'repeat_int', RuleOptions(False, False, None)),
  170: Rule(NonTerminal('aux_operation'), [NonTerminal('_aux_expr_no_int'), Terminal('_LROT', True), Terminal('INT', False)], 'rot_left', RuleOptions(False, False, None)),
  171: Rule(NonTerminal('aux_operation'), [NonTerminal('_aux_expr_no_int'), Terminal('_MULT', True), Terminal('INT', False)], 'repeat_var', RuleOptions(False, False, None)),
  172: Rule(NonTerminal('aux_operation'), [NonTerminal('_aux_expr_no_int'), NonTerminal('_subt'), NonTerminal('_aux_expr_norec_int')], 'subt', RuleOptions(False, False, None)),
  173: Rule(NonTerminal('aux_operation'), [NonTerminal('_aux_expr_no_int'), Terminal('_RROT', True), Terminal('INT', False)], 'rot_right', RuleOptions(False, False, None)),
  174: Rule(NonTerminal('aux_operation'), [Terminal('_NEGATE_ALL', True), NonTerminal('_aux_expr')], 'all_except', RuleOptions(False, False, None)),
  175: Rule(NonTerminal('aux_operation'), [NonTerminal('aux_reference'), Terminal('_MULT', True), Terminal('INT', False)], 'repeat_int', RuleOptions(False, False, None)),
  176: Rule(NonTerminal('aux_reference'), [Terminal('LSQB', True), Terminal('INT', False), Terminal('RSQB', True)], 'binding', RuleOptions(False, False, None)),
  177: Rule(NonTerminal('aux_reference'), [Terminal('LSQB', True), Terminal('COMPASS_DIR', False), Terminal('RSQB', True)], 'binding', RuleOptions(False, False, None)),
  178: Rule(NonTerminal('aux_reference'), [Terminal('LSQB', True), Terminal('INT', False), Terminal('COLON', True), NonTerminal('_aux_expr_no_int'), Terminal('RSQB', True)], 'mapping', RuleOptions(False, False, None)),
  179: Rule(NonTerminal('aux_reference'), [Terminal('LSQB', True), Terminal('COMPASS_DIR', False), Terminal('COLON', True), NonTerminal('_aux_expr_no_int'), Terminal('RSQB', True)], 'mapping', RuleOptions(False, False, None)),
  180: Rule(NonTerminal('aux_reference'), [Terminal('LSQB', True), Terminal('COMPASS_DIR', False), Terminal('COLON', True), Terminal('_WS', True), NonTerminal('_aux_expr_no_int'), Terminal('RSQB', True)], 'mapping', RuleOptions(False, False, None)),
  181: Rule(NonTerminal('aux_reference'), [Terminal('LSQB', True), Terminal('INT', False), Terminal('COLON', True), Terminal('_WS', True), NonTerminal('_aux_expr_no_int'), Terminal('RSQB', True)], 'mapping', RuleOptions(False, False, None)),
  182: Rule(NonTerminal('reference'), [Terminal('LSQB', True), Terminal('COMPASS_DIR', False), Terminal('COLON', True), Terminal('_WS', True), NonTerminal('_ref_expr_no_int'), Terminal('RSQB', True)], 'mapping', RuleOptions(False, False, None)),
  183: Rule(NonTerminal('reference'), [Terminal('LSQB', True), Terminal('INT', False), Terminal('RSQB', True)], 'binding', RuleOptions(False, False, None)),
  184: Rule(NonTerminal('reference'), [Terminal('LSQB', True), Terminal('INT', False), Terminal('COLON', True), Terminal('_WS', True), NonTerminal('_ref_expr_no_int'), Terminal('RSQB', True)], 'mapping', RuleOptions(False, False, None)),
  185: Rule(NonTerminal('reference'), [Terminal('LSQB', True), Terminal('COMPASS_DIR', False), Terminal('RSQB', True)], 'binding', RuleOptions(False, False, None)),
  186: Rule(NonTerminal('reference'), [Terminal('LSQB', True), Terminal('COMPASS_DIR', False), Terminal('COLON', True), NonTerminal('_ref_expr_no_int'), Terminal('RSQB', True)], 'mapping', RuleOptions(False, False, None)),
  187: Rule(NonTerminal('reference'), [Terminal('LSQB', True), Terminal('INT', False), Terminal('COLON', True), NonTerminal('_ref_expr_no_int'), Terminal('RSQB', True)], 'mapping', RuleOptions(False, False, None)),
  188: Rule(NonTerminal('range'), [Terminal('STATE', False), Terminal('_WS', True), Terminal('__ANON_4', True), Terminal('STATE', False)], None, RuleOptions(False, False, None)),
  189: Rule(NonTerminal('range'), [Terminal('STATE', False), Terminal('__ANON_4', True), Terminal('STATE', False)], None, RuleOptions(False, False, None)),
  190: Rule(NonTerminal('range'), [Terminal('STATE', False), Terminal('__ANON_4', True), Terminal('_WS', True), Terminal('STATE', False)], None, RuleOptions(False, False, None)),
  191: Rule(NonTerminal('range'), [Terminal('STATE', False), Terminal('_WS', True), Terminal('__ANON_4', True), Terminal('_WS', True), Terminal('STATE', False)], None, RuleOptions(False, False, None)),
  192: Rule(NonTerminal('range'), [Terminal('STATE', False), Terminal('PLUS', True), Terminal('_WS', True), Terminal('INT', False), Terminal('_WS', True), Terminal('__ANON_4', True), Terminal('STATE', False)], 'range_step', RuleOptions(False, False, None)),
  193: Rule(NonTerminal('range'), [Terminal('STATE', False), Terminal('PLUS', True), Terminal('_WS', True), Terminal('INT', False), Terminal('__ANON_4', True), Terminal('_WS', True), Terminal('STATE', False)], 'range_step', RuleOptions(False, False, None)),
  194: Rule(NonTerminal('range'), [Terminal('STATE', False), Terminal('_WS', True), Terminal('PLUS', True), Terminal('INT', False), Terminal('_WS', True), Terminal('__ANON_4', True), Terminal('STATE', False)], 'range_step', RuleOptions(False, False, None)),
  195: Rule(NonTerminal('range'), [Terminal('STATE', False), Terminal('PLUS', True), Terminal('INT', False), Terminal('_WS', True), Terminal('__ANON_4', True), Terminal('_WS', True), Terminal('STATE', False)], 'range_step', RuleOptions(False, False, None)),
  196: Rule(NonTerminal('range'), [Terminal('STATE', False), Terminal('PLUS', True), Terminal('INT', False), Terminal('__ANON_4', True), Terminal('_WS', True), Terminal('STATE', False)], 'range_step', RuleOptions(False, False, None)),
  197: Rule(NonTerminal('range'), [Terminal('STATE', False), Terminal('_WS', True), Terminal('PLUS', True), Terminal('_WS', True), Terminal('INT', False), Terminal('__ANON_4', True), Terminal('_WS', True), Terminal('STATE', False)], 'range_step', RuleOptions(False, False, None)),
  198: Rule(NonTerminal('range'), [Terminal('STATE', False), Terminal('_WS', True), Terminal('PLUS', True), Terminal('INT', False), Terminal('_WS', True), Terminal('__ANON_4', True), Terminal('_WS', True), Terminal('STATE', False)], 'range_step', RuleOptions(False, False, None)),
  199: Rule(NonTerminal('range'), [Terminal('STATE', False), Terminal('PLUS', True), Terminal('_WS', True), Terminal('INT', False), Terminal('__ANON_4', True), Terminal('STATE', False)], 'range_step', RuleOptions(False, False, None)),
  200: Rule(NonTerminal('range'), [Terminal('STATE', False), Terminal('PLUS', True), Terminal('INT', False), Terminal('_WS', True), Terminal('__ANON_4', True), Terminal('STATE', False)], 'range_step', RuleOptions(False, False, None)),
  201: Rule(NonTerminal('range'), [Terminal('STATE', False), Terminal('PLUS', True), Terminal('INT', False), Terminal('__ANON_4', True), Terminal('STATE', False)], 'range_step', RuleOptions(False, False, None)),
  202: Rule(NonTerminal('range'), [Terminal('STATE', False), Terminal('_WS', True), Terminal('PLUS', True), Terminal('_WS', True), Terminal('INT', False), Terminal('_WS', True), Terminal('__ANON_4', True), Terminal('_WS', True), Terminal('STATE', False)], 'range_step', RuleOptions(False, False, None)),
  203: Rule(NonTerminal('range'), [Terminal('STATE', False), Terminal('_WS', True), Terminal('PLUS', True), Terminal('INT', False), Terminal('__ANON_4', True), Terminal('_WS', True), Terminal('STATE', False)], 'range_step', RuleOptions(False, False, None)),
  204: Rule(NonTerminal('range'), [Terminal('STATE', False), Terminal('_WS', True), Terminal('PLUS', True), Terminal('_WS', True), Terminal('INT', False), Terminal('_WS', True), Terminal('__ANON_4', True), Terminal('STATE', False)], 'range_step', RuleOptions(False, False, None)),
  205: Rule(NonTerminal('range'), [Terminal('STATE', False), Terminal('PLUS', True), Terminal('_WS', True), Terminal('INT', False), Terminal('_WS', True), Terminal('__ANON_4', True), Terminal('_WS', True), Terminal('STATE', False)], 'range_step', RuleOptions(False, False, None)),
  206: Rule(NonTerminal('range'), [Terminal('STATE', False), Terminal('_WS', True), Terminal('PLUS', True), Terminal('INT', False), Terminal('__ANON_4', True), Terminal('STATE', False)], 'range_step', RuleOptions(False, False, None)),
  207: Rule(NonTerminal('range'), [Terminal('STATE', False), Terminal('_WS', True), Terminal('PLUS', True), Terminal('_WS', True), Terminal('INT', False), Terminal('__ANON_4', True), Terminal('STATE', False)], 'range_step', RuleOptions(False, False, None)),
  208: Rule(NonTerminal('leave_alone_mult'), [Terminal('LEAVE_ALONE', False), Terminal('_MULT', True), Terminal('INT', False)], None, RuleOptions(False, False, None)),
  209: Rule(NonTerminal('_subt'), [Terminal('_SUBT', True)], None, RuleOptions(False, False, None)),
  210: Rule(NonTerminal('_subt'), [Terminal('_NEGATE_LIVE', True)], None, RuleOptions(False, False, None)),
  211: Rule(NonTerminal('_subt'), [Terminal('_NEGATE_LIVE', True), Terminal('_WS', True)], None, RuleOptions(False, False, None)),
  212: Rule(NonTerminal('end_bs'), [Terminal('__ANON_5', False)], None, RuleOptions(False, False, None)),
  213: Rule(NonTerminal('comment'), [Terminal('__ANON_6', False)], None, RuleOptions(False, False, None)),
  214: Rule(NonTerminal('__anon_plus_0'), [NonTerminal('__anon_plus_0'), NonTerminal('line'), NonTerminal('end_bs'), Terminal('_NL', True)], None, None),
  215: Rule(NonTerminal('__anon_plus_0'), [NonTerminal('__anon_plus_0'), Terminal('_WS', True), NonTerminal('line')], None, None),
  216: Rule(NonTerminal('__anon_plus_0'), [NonTerminal('line')], None, None),
  217: Rule(NonTerminal('__anon_plus_0'), [NonTerminal('line'), Terminal('_NL', True)], None, None),
  218: Rule(NonTerminal('__anon_plus_0'), [Terminal('_WS', True), NonTerminal('line'), NonTerminal('end_bs')], None, None),
  219: Rule(NonTerminal('__anon_plus_0'), [NonTerminal('__anon_plus_0'), Terminal('_WS', True), NonTerminal('line'), NonTerminal('end_bs'), Terminal('_NL', True)], None, None),
  220: Rule(NonTerminal('__anon_plus_0'), [NonTerminal('comment'), Terminal('_NL', True)], None, None),
  221: Rule(NonTerminal('__anon_plus_0'), [NonTerminal('line'), NonTerminal('end_bs'), Terminal('_NL', True)], None, None),
  222: Rule(NonTerminal('__anon_plus_0'), [Terminal('_WS', True), NonTerminal('line'), Terminal('_NL', True)], None, None),
  223: Rule(NonTerminal('__anon_plus_0'), [Terminal('_WS', True), NonTerminal('line'), NonTerminal('end_bs'), Terminal('_NL', True)], None, None),
  224: Rule(NonTerminal('__anon_plus_0'), [NonTerminal('__anon_plus_0'), NonTerminal('comment'), Terminal('_NL', True)], None, None),
  225: Rule(NonTerminal('__anon_plus_0'), [NonTerminal('__anon_plus_0'), NonTerminal('line')], None, None),
  226: Rule(NonTerminal('__anon_plus_0'), [Terminal('_WS', True), NonTerminal('comment'), Terminal('_NL', True)], None, None),
  227: Rule(NonTerminal('__anon_plus_0'), [NonTerminal('comment')], None, None),
  228: Rule(NonTerminal('__anon_plus_0'), [NonTerminal('__anon_plus_0'), NonTerminal('line'), NonTerminal('end_bs')], None, None),
  229: Rule(NonTerminal('__anon_plus_0'), [Terminal('_WS', True), NonTerminal('line')], None, None),
  230: Rule(NonTerminal('__anon_plus_0'), [NonTerminal('line'), NonTerminal('end_bs')], None, None),
  231: Rule(NonTerminal('__anon_plus_0'), [NonTerminal('__anon_plus_0'), Terminal('_WS', True), NonTerminal('comment')], None, None),
  232: Rule(NonTerminal('__anon_plus_0'), [NonTerminal('__anon_plus_0'), NonTerminal('comment')], None, None),
  233: Rule(NonTerminal('__anon_plus_0'), [Terminal('_WS', True), NonTerminal('comment')], None, None),
  234: Rule(NonTerminal('__anon_plus_0'), [NonTerminal('__anon_plus_0'), Terminal('_WS', True), NonTerminal('comment'), Terminal('_NL', True)], None, None),
  235: Rule(NonTerminal('__anon_plus_0'), [NonTerminal('__anon_plus_0'), Terminal('_WS', True), NonTerminal('line'), NonTerminal('end_bs')], None, None),
  236: Rule(NonTerminal('__anon_plus_0'), [NonTerminal('__anon_plus_0'), Terminal('_WS', True), NonTerminal('line'), Terminal('_NL', True)], None, None),
  237: Rule(NonTerminal('__anon_plus_0'), [NonTerminal('__anon_plus_0'), NonTerminal('line'), Terminal('_NL', True)], None, None),
  238: Rule(NonTerminal('__anon_plus_1'), [NonTerminal('__anon_plus_1'), NonTerminal('_sep'), NonTerminal('tr_state')], None, None),
  239: Rule(NonTerminal('__anon_plus_1'), [NonTerminal('_sep'), NonTerminal('tr_state')], None, None),
  240: Rule(NonTerminal('__anon_star_2'), [NonTerminal('__anon_star_2'), Terminal('_WS', True), NonTerminal('symmetried_aux')], None, None),
  241: Rule(NonTerminal('__anon_star_2'), [Terminal('_WS', True), NonTerminal('auxiliary')], None, None),
  242: Rule(NonTerminal('__anon_star_2'), [Terminal('_WS', True), NonTerminal('symmetried_aux')], None, None),
  243: Rule(NonTerminal('__anon_star_2'), [NonTerminal('__anon_star_2'), Terminal('_WS', True), NonTerminal('auxiliary')], None, None),
  244: Rule(NonTerminal('__anon_star_3'), [Terminal('_WS', True), NonTerminal('auxiliary')], None, None),
  245: Rule(NonTerminal('__anon_star_3'), [NonTerminal('__anon_star_3'), Terminal('_WS', True), NonTerminal('auxiliary')], None, None),
  246: Rule(NonTerminal('__anon_star_4'), [NonTerminal('__anon_star_4'), Terminal('COMMA', True), NonTerminal('_expr')], None, None),
  247: Rule(NonTerminal('__anon_star_4'), [Terminal('COMMA', True), NonTerminal('_expr')], None, None),
  248: Rule(NonTerminal('__anon_star_4'), [Terminal('COMMA', True), Terminal('_WS', True), NonTerminal('_expr')], None, None),
  249: Rule(NonTerminal('__anon_star_4'), [NonTerminal('__anon_star_4'), Terminal('COMMA', True), Terminal('_WS', True), NonTerminal('_expr')], None, None),
  250: Rule(NonTerminal('__anon_star_5'), [Terminal('COMMA', True), NonTerminal('_tr_expr')], None, None),
  251: Rule(NonTerminal('__anon_star_5'), [NonTerminal('__anon_star_5'), Terminal('COMMA', True), NonTerminal('_tr_expr')], None, None),
  252: Rule(NonTerminal('__anon_star_5'), [NonTerminal('__anon_star_5'), Terminal('COMMA', True), Terminal('_WS', True), NonTerminal('_tr_expr')], None, None),
  253: Rule(NonTerminal('__anon_star_5'), [Terminal('COMMA', True), Terminal('_WS', True), NonTerminal('_tr_expr')], None, None),
  254: Rule(NonTerminal('__anon_star_6'), [NonTerminal('__anon_star_6'), Terminal('COMMA', True), Terminal('_WS', True), NonTerminal('_ref_expr')], None, None),
  255: Rule(NonTerminal('__anon_star_6'), [NonTerminal('__anon_star_6'), Terminal('COMMA', True), NonTerminal('_ref_expr')], None, None),
  256: Rule(NonTerminal('__anon_star_6'), [Terminal('COMMA', True), NonTerminal('_ref_expr')], None, None),
  257: Rule(NonTerminal('__anon_star_6'), [Terminal('COMMA', True), Terminal('_WS', True), NonTerminal('_ref_expr')], None, None),
  258: Rule(NonTerminal('__anon_star_7'), [Terminal('COMMA', True), Terminal('_WS', True), NonTerminal('_aux_expr')], None, None),
  259: Rule(NonTerminal('__anon_star_7'), [Terminal('COMMA', True), NonTerminal('_aux_expr')], None, None),
  260: Rule(NonTerminal('__anon_star_7'), [NonTerminal('__anon_star_7'), Terminal('COMMA', True), NonTerminal('_aux_expr')], None, None),
  261: Rule(NonTerminal('__anon_star_7'), [NonTerminal('__anon_star_7'), Terminal('COMMA', True), Terminal('_WS', True), NonTerminal('_aux_expr')], None, None),
}
parse_tree_builder = ParseTreeBuilder(RULES.values(), Tree)
class ParseTable: pass
parse_table = ParseTable()
STATES = {
  0: {0: (0, 1), 1: (0, 2), 2: (0, 3), 3: (0, 4), 4: (0, 5), 5: (0, 6), 6: (0, 7), 7: (0, 8), 8: (0, 9), 9: (0, 10), 10: (0, 11), 11: (0, 12), 12: (0, 13), 13: (0, 14), 14: (0, 15), 15: (0, 16), 16: (0, 17), 17: (0, 18), 18: (0, 19), 19: (0, 20), 20: (0, 21)},
  1: {21: (1, 105), 22: (1, 105), 5: (1, 105), 23: (1, 105), 18: (1, 105), 24: (0, 24), 15: (1, 105), 25: (1, 105), 26: (1, 105), 27: (1, 105), 28: (1, 105), 4: (1, 105), 29: (1, 105), 30: (1, 105), 11: (1, 105), 7: (0, 23), 17: (1, 105), 31: (1, 105), 32: (1, 105), 33: (1, 105), 34: (1, 105), 35: (1, 105), 13: (1, 105), 0: (1, 105), 36: (1, 105), 37: (0, 22), 38: (0, 25)},
  2: {17: (1, 216), 5: (1, 216), 18: (1, 216), 33: (1, 216), 15: (1, 216), 13: (1, 216), 4: (1, 216), 0: (1, 216), 11: (1, 216), 7: (1, 216), 22: (0, 26), 29: (0, 27), 39: (0, 28)},
  3: {40: (0, 29), 35: (0, 30), 41: (0, 31), 27: (0, 32)},
  4: {33: (1, 0), 0: (0, 1), 2: (0, 3), 7: (0, 33), 5: (0, 6), 8: (0, 9), 1: (0, 34), 9: (0, 10), 10: (0, 11), 11: (0, 12), 12: (0, 13), 4: (0, 5), 14: (0, 35), 13: (0, 14), 15: (0, 16), 16: (0, 17), 18: (0, 19), 17: (0, 18), 19: (0, 20), 20: (0, 21)},
  5: {21: (1, 110), 22: (1, 110), 5: (1, 110), 23: (1, 110), 18: (1, 110), 24: (1, 110), 25: (1, 110), 26: (1, 110), 15: (1, 110), 27: (1, 110), 28: (1, 110), 4: (1, 110), 29: (1, 110), 30: (1, 110), 11: (1, 110), 17: (1, 110), 7: (0, 38), 31: (1, 110), 32: (1, 110), 33: (1, 110), 34: (1, 110), 35: (1, 110), 13: (1, 110), 0: (1, 110), 36: (1, 110), 42: (0, 36), 43: (0, 37)},
  6: {44: (0, 39), 45: (0, 40)},
  7: {33: (0, 41)},
  8: {0: (0, 1), 1: (0, 42), 2: (0, 3), 5: (0, 6), 8: (0, 9), 9: (0, 10), 10: (0, 11), 11: (0, 12), 12: (0, 13), 4: (0, 5), 13: (0, 14), 15: (0, 16), 16: (0, 17), 18: (0, 19), 17: (0, 18), 14: (0, 43), 19: (0, 20), 20: (0, 21)},
  9: {22: (1, 4), 5: (1, 4), 18: (1, 4), 33: (1, 4), 15: (1, 4), 13: (1, 4), 4: (1, 4), 29: (1, 4), 7: (1, 4), 0: (1, 4), 11: (1, 4), 17: (1, 4), 46: (0, 44), 47: (0, 45), 23: (0, 46), 48: (0, 47), 34: (0, 48)},
  10: {22: (1, 1), 5: (1, 1), 18: (1, 1), 33: (1, 1), 15: (1, 1), 13: (1, 1), 4: (1, 1), 29: (1, 1), 7: (1, 1), 0: (1, 1), 11: (1, 1), 17: (1, 1), 46: (0, 44), 47: (0, 45), 23: (0, 46), 48: (0, 49), 34: (0, 48)},
  11: {21: (1, 104), 22: (1, 104), 5: (1, 104), 23: (1, 104), 18: (1, 104), 24: (0, 50), 15: (1, 104), 25: (1, 104), 26: (1, 104), 27: (1, 104), 28: (1, 104), 4: (1, 104), 29: (1, 104), 30: (1, 104), 11: (1, 104), 7: (1, 104), 17: (1, 104), 31: (1, 104), 32: (1, 104), 33: (1, 104), 34: (1, 104), 35: (1, 104), 13: (1, 104), 0: (1, 104), 36: (1, 104)},
  12: {0: (0, 51), 19: (0, 52), 15: (0, 53), 49: (0, 54), 18: (0, 55), 50: (0, 56), 4: (0, 57), 17: (0, 58), 51: (0, 59)},
  13: {21: (1, 103), 22: (1, 103), 5: (1, 103), 23: (1, 103), 18: (1, 103), 24: (0, 65), 15: (1, 103), 25: (0, 62), 26: (0, 61), 27: (1, 103), 28: (1, 103), 4: (1, 103), 29: (1, 103), 30: (1, 103), 11: (1, 103), 7: (1, 103), 17: (0, 60), 31: (0, 64), 32: (1, 103), 33: (1, 103), 34: (1, 103), 35: (1, 103), 13: (1, 103), 0: (1, 103), 36: (1, 103), 52: (0, 63)},
  14: {17: (1, 213), 5: (1, 213), 18: (1, 213), 33: (1, 213), 15: (1, 213), 13: (1, 213), 4: (1, 213), 29: (1, 213), 0: (1, 213), 11: (1, 213), 7: (1, 213)},
  15: {17: (1, 227), 5: (1, 227), 18: (1, 227), 33: (1, 227), 15: (1, 227), 13: (1, 227), 4: (1, 227), 0: (1, 227), 11: (1, 227), 7: (1, 227), 29: (0, 66)},
  16: {12: (0, 13), 0: (0, 1), 5: (0, 6), 4: (0, 67), 15: (0, 16), 2: (0, 68), 16: (0, 17), 19: (0, 69), 10: (0, 11), 18: (0, 19), 17: (0, 18), 20: (0, 21)},
  17: {21: (1, 111), 22: (1, 111), 5: (1, 111), 23: (1, 111), 18: (1, 111), 24: (1, 111), 25: (1, 111), 26: (1, 111), 15: (1, 111), 27: (1, 111), 28: (1, 111), 4: (1, 111), 29: (1, 111), 30: (1, 111), 11: (1, 111), 17: (1, 111), 7: (1, 111), 31: (1, 111), 32: (1, 111), 33: (1, 111), 34: (1, 111), 35: (1, 111), 13: (1, 111), 0: (1, 111), 36: (1, 111)},
  18: {12: (0, 13), 0: (0, 1), 5: (0, 6), 4: (0, 67), 15: (0, 16), 16: (0, 17), 10: (0, 11), 18: (0, 19), 17: (0, 18), 19: (0, 20), 20: (0, 21), 2: (0, 70)},
  19: {12: (0, 13), 0: (0, 1), 5: (0, 6), 4: (0, 67), 15: (0, 16), 16: (0, 17), 10: (0, 11), 18: (0, 19), 17: (0, 18), 19: (0, 20), 2: (0, 71), 20: (0, 21)},
  20: {21: (1, 112), 22: (1, 112), 5: (1, 112), 23: (1, 112), 18: (1, 112), 24: (1, 112), 25: (1, 112), 26: (1, 112), 15: (1, 112), 27: (1, 112), 28: (1, 112), 4: (1, 112), 29: (1, 112), 30: (1, 112), 11: (1, 112), 17: (1, 112), 7: (1, 112), 31: (1, 112), 32: (1, 112), 33: (1, 112), 34: (1, 112), 35: (1, 112), 13: (1, 112), 0: (1, 112), 36: (1, 112)},
  21: {21: (1, 109), 22: (1, 109), 5: (1, 109), 23: (1, 109), 18: (1, 109), 24: (1, 109), 25: (1, 109), 26: (1, 109), 15: (1, 109), 27: (1, 109), 28: (1, 109), 4: (1, 109), 29: (1, 109), 30: (1, 109), 11: (1, 109), 17: (1, 109), 7: (1, 109), 31: (1, 109), 32: (1, 109), 33: (1, 109), 34: (1, 109), 35: (1, 109), 13: (1, 109), 0: (1, 109), 36: (1, 109)},
  22: {44: (0, 72), 7: (0, 73)},
  23: {37: (0, 74), 38: (0, 75)},
  24: {0: (0, 76), 20: (0, 77), 19: (0, 78), 53: (0, 79), 15: (0, 16), 44: (0, 80), 4: (0, 81)},
  25: {7: (0, 82), 0: (0, 83)},
  26: {5: (1, 212), 18: (1, 212), 33: (1, 212), 15: (1, 212), 13: (1, 212), 4: (1, 212), 29: (1, 212), 7: (1, 212), 0: (1, 212), 11: (1, 212), 17: (1, 212)},
  27: {17: (1, 217), 5: (1, 217), 18: (1, 217), 33: (1, 217), 15: (1, 217), 13: (1, 217), 4: (1, 217), 0: (1, 217), 11: (1, 217), 7: (1, 217)},
  28: {17: (1, 230), 5: (1, 230), 18: (1, 230), 33: (1, 230), 15: (1, 230), 13: (1, 230), 4: (1, 230), 0: (1, 230), 11: (1, 230), 7: (1, 230), 29: (0, 84)},
  29: {35: (0, 30), 41: (0, 85), 27: (0, 32)},
  30: {5: (1, 32), 4: (1, 32), 18: (1, 32), 54: (1, 32), 15: (1, 32), 0: (1, 32), 45: (1, 32), 17: (1, 32), 7: (0, 86)},
  31: {12: (0, 13), 0: (0, 1), 5: (0, 87), 2: (0, 88), 4: (0, 67), 55: (0, 89), 45: (0, 90), 15: (0, 16), 54: (0, 91), 16: (0, 17), 10: (0, 11), 56: (0, 92), 57: (0, 93), 18: (0, 19), 58: (0, 94), 17: (0, 18), 59: (0, 95), 19: (0, 20), 20: (0, 21)},
  32: {5: (1, 33), 4: (1, 33), 18: (1, 33), 54: (1, 33), 15: (1, 33), 0: (1, 33), 45: (1, 33), 17: (1, 33), 7: (0, 96)},
  33: {0: (0, 1), 2: (0, 3), 5: (0, 6), 8: (0, 9), 1: (0, 97), 9: (0, 10), 10: (0, 11), 11: (0, 12), 12: (0, 13), 4: (0, 5), 14: (0, 98), 13: (0, 14), 15: (0, 16), 16: (0, 17), 18: (0, 19), 17: (0, 18), 19: (0, 20), 20: (0, 21)},
  34: {17: (1, 225), 5: (1, 225), 18: (1, 225), 33: (1, 225), 15: (1, 225), 13: (1, 225), 4: (1, 225), 0: (1, 225), 11: (1, 225), 7: (1, 225), 22: (0, 26), 29: (0, 99), 39: (0, 100)},
  35: {17: (1, 232), 5: (1, 232), 18: (1, 232), 33: (1, 232), 15: (1, 232), 13: (1, 232), 4: (1, 232), 0: (1, 232), 11: (1, 232), 7: (1, 232), 29: (0, 101)},
  36: {60: (0, 102), 7: (0, 103)},
  37: {0: (0, 104), 19: (0, 52), 15: (0, 53), 61: (0, 105), 7: (0, 106), 18: (0, 55), 50: (0, 56), 49: (0, 107), 4: (0, 57), 17: (0, 58), 51: (0, 59)},
  38: {43: (0, 108)},
  39: {42: (0, 109), 36: (0, 110)},
  40: {42: (0, 111), 36: (0, 112)},
  41: {},
  42: {17: (1, 229), 5: (1, 229), 18: (1, 229), 33: (1, 229), 15: (1, 229), 13: (1, 229), 4: (1, 229), 0: (1, 229), 11: (1, 229), 7: (1, 229), 22: (0, 26), 29: (0, 113), 39: (0, 114)},
  43: {17: (1, 233), 5: (1, 233), 18: (1, 233), 33: (1, 233), 15: (1, 233), 13: (1, 233), 4: (1, 233), 0: (1, 233), 11: (1, 233), 7: (1, 233), 29: (0, 115)},
  44: {22: (1, 36), 5: (1, 36), 18: (1, 36), 33: (1, 36), 15: (1, 36), 13: (1, 36), 4: (1, 36), 29: (1, 36), 7: (1, 36), 0: (1, 36), 11: (1, 36), 17: (1, 36), 47: (0, 116), 34: (0, 48)},
  45: {22: (1, 37), 5: (1, 37), 18: (1, 37), 33: (1, 37), 15: (1, 37), 13: (1, 37), 4: (1, 37), 29: (1, 37), 7: (1, 37), 0: (1, 37), 11: (1, 37), 17: (1, 37), 46: (0, 117), 23: (0, 46)},
  46: {62: (0, 118), 63: (0, 119), 45: (0, 120), 64: (0, 121), 65: (0, 122), 66: (0, 123)},
  47: {22: (1, 9), 5: (1, 9), 18: (1, 9), 33: (1, 9), 15: (1, 9), 13: (1, 9), 4: (1, 9), 29: (1, 9), 7: (1, 9), 0: (1, 9), 11: (1, 9), 17: (1, 9)},
  48: {62: (0, 118), 63: (0, 119), 66: (0, 124), 45: (0, 120), 64: (0, 121), 65: (0, 122)},
  49: {22: (1, 5), 5: (1, 5), 18: (1, 5), 33: (1, 5), 15: (1, 5), 13: (1, 5), 4: (1, 5), 29: (1, 5), 7: (1, 5), 0: (1, 5), 11: (1, 5), 17: (1, 5)},
  50: {0: (0, 76), 20: (0, 77), 53: (0, 125), 44: (0, 126), 19: (0, 78), 15: (0, 16), 4: (0, 81)},
  51: {37: (0, 22), 7: (0, 23), 38: (0, 25), 24: (0, 127)},
  52: {21: (1, 91), 31: (1, 91), 22: (1, 91), 5: (1, 91), 18: (1, 91), 33: (1, 91), 24: (1, 91), 26: (1, 91), 25: (1, 91), 15: (1, 91), 27: (1, 91), 13: (1, 91), 4: (1, 91), 29: (1, 91), 7: (1, 91), 0: (1, 91), 11: (1, 91), 17: (1, 91)},
  53: {0: (0, 104), 19: (0, 128), 15: (0, 53), 18: (0, 55), 50: (0, 56), 49: (0, 107), 61: (0, 129), 4: (0, 57), 17: (0, 58), 51: (0, 59)},
  54: {22: (1, 2), 5: (1, 2), 18: (1, 2), 33: (1, 2), 15: (1, 2), 13: (1, 2), 4: (1, 2), 29: (1, 2), 7: (1, 2), 0: (1, 2), 11: (1, 2), 17: (0, 60), 25: (0, 130), 24: (0, 131), 52: (0, 132), 26: (0, 133), 31: (0, 64)},
  55: {0: (0, 104), 19: (0, 52), 15: (0, 53), 18: (0, 55), 50: (0, 56), 49: (0, 107), 4: (0, 57), 17: (0, 58), 51: (0, 59), 61: (0, 134)},
  56: {21: (1, 88), 31: (1, 88), 22: (1, 88), 5: (1, 88), 18: (1, 88), 33: (1, 88), 24: (1, 88), 26: (1, 88), 25: (1, 88), 15: (1, 88), 27: (1, 88), 13: (1, 88), 4: (1, 88), 29: (1, 88), 7: (1, 88), 0: (1, 88), 11: (1, 88), 17: (1, 88)},
  57: {21: (1, 89), 31: (1, 89), 22: (1, 89), 5: (1, 89), 18: (1, 89), 33: (1, 89), 24: (1, 89), 26: (1, 89), 25: (1, 89), 15: (1, 89), 27: (1, 89), 13: (1, 89), 4: (1, 89), 29: (1, 89), 7: (1, 89), 0: (1, 89), 11: (1, 89), 17: (1, 89)},
  58: {0: (0, 104), 19: (0, 52), 15: (0, 53), 61: (0, 135), 18: (0, 55), 50: (0, 56), 49: (0, 107), 4: (0, 57), 17: (0, 58), 51: (0, 59)},
  59: {21: (1, 90), 31: (1, 90), 22: (1, 90), 5: (1, 90), 18: (1, 90), 33: (1, 90), 24: (1, 90), 26: (1, 90), 25: (1, 90), 15: (1, 90), 27: (1, 90), 13: (1, 90), 4: (1, 90), 29: (1, 90), 7: (1, 90), 0: (1, 90), 11: (1, 90), 17: (1, 90)},
  60: {5: (1, 210), 4: (1, 210), 67: (1, 210), 15: (1, 210), 0: (1, 210), 7: (0, 136)},
  61: {44: (0, 137)},
  62: {44: (0, 138)},
  63: {0: (0, 139), 20: (0, 77), 5: (0, 6), 68: (0, 140), 4: (0, 81), 15: (0, 16), 10: (0, 141), 19: (0, 78), 53: (0, 142)},
  64: {5: (1, 209), 4: (1, 209), 67: (1, 209), 15: (1, 209), 0: (1, 209)},
  65: {44: (0, 143)},
  66: {17: (1, 220), 5: (1, 220), 18: (1, 220), 33: (1, 220), 15: (1, 220), 13: (1, 220), 4: (1, 220), 0: (1, 220), 11: (1, 220), 7: (1, 220)},
  67: {21: (1, 110), 22: (1, 110), 5: (1, 110), 23: (1, 110), 18: (1, 110), 24: (1, 110), 25: (1, 110), 26: (1, 110), 15: (1, 110), 27: (1, 110), 28: (1, 110), 4: (1, 110), 29: (1, 110), 30: (1, 110), 11: (1, 110), 17: (1, 110), 7: (1, 110), 31: (1, 110), 32: (1, 110), 33: (1, 110), 34: (1, 110), 35: (1, 110), 13: (1, 110), 0: (1, 110), 36: (1, 110)},
  68: {21: (0, 144), 27: (0, 145), 69: (0, 146)},
  69: {21: (0, 147), 22: (1, 112), 5: (1, 112), 23: (1, 112), 18: (1, 112), 24: (1, 112), 25: (1, 112), 26: (1, 112), 15: (1, 112), 27: (1, 112), 28: (1, 112), 4: (1, 112), 29: (1, 112), 30: (1, 112), 11: (1, 112), 17: (1, 112), 7: (1, 112), 31: (1, 112), 32: (1, 112), 33: (1, 112), 34: (1, 112), 35: (1, 112), 13: (1, 112), 0: (1, 112), 36: (1, 112)},
  70: {21: (1, 116), 22: (1, 116), 5: (1, 116), 23: (1, 116), 18: (1, 116), 24: (1, 116), 25: (1, 116), 26: (1, 116), 15: (1, 116), 27: (1, 116), 28: (1, 116), 4: (1, 116), 29: (1, 116), 30: (1, 116), 11: (1, 116), 17: (1, 116), 7: (1, 116), 31: (1, 116), 32: (1, 116), 33: (1, 116), 34: (1, 116), 35: (1, 116), 13: (1, 116), 0: (1, 116), 36: (1, 116)},
  71: {21: (1, 119), 22: (1, 119), 5: (1, 119), 23: (1, 119), 18: (1, 119), 24: (1, 119), 25: (1, 119), 26: (1, 119), 15: (1, 119), 27: (1, 119), 28: (1, 119), 4: (1, 119), 29: (1, 119), 30: (1, 119), 11: (1, 119), 17: (1, 119), 7: (1, 119), 31: (1, 119), 32: (1, 119), 33: (1, 119), 34: (1, 119), 35: (1, 119), 13: (1, 119), 0: (1, 119), 36: (1, 119)},
  72: {7: (0, 148), 38: (0, 149)},
  73: {44: (0, 150)},
  74: {44: (0, 151), 7: (0, 152)},
  75: {0: (0, 153), 7: (0, 154)},
  76: {37: (0, 22), 7: (0, 23), 38: (0, 25)},
  77: {21: (1, 113), 22: (1, 113), 5: (1, 113), 23: (1, 113), 18: (1, 113), 24: (1, 113), 25: (1, 113), 26: (1, 113), 15: (1, 113), 27: (1, 113), 28: (1, 113), 4: (1, 113), 29: (1, 113), 30: (1, 113), 11: (1, 113), 17: (1, 113), 7: (1, 113), 31: (1, 113), 32: (1, 113), 33: (1, 113), 34: (1, 113), 35: (1, 113), 13: (1, 113), 0: (1, 113), 36: (1, 113)},
  78: {21: (1, 115), 22: (1, 115), 5: (1, 115), 23: (1, 115), 18: (1, 115), 24: (1, 115), 25: (1, 115), 26: (1, 115), 15: (1, 115), 27: (1, 115), 28: (1, 115), 4: (1, 115), 29: (1, 115), 30: (1, 115), 11: (1, 115), 17: (1, 115), 7: (1, 115), 31: (1, 115), 32: (1, 115), 33: (1, 115), 34: (1, 115), 35: (1, 115), 13: (1, 115), 0: (1, 115), 36: (1, 115)},
  79: {21: (1, 125), 22: (1, 125), 5: (1, 125), 23: (1, 125), 18: (1, 125), 24: (1, 125), 25: (1, 125), 26: (1, 125), 15: (1, 125), 27: (1, 125), 28: (1, 125), 4: (1, 125), 29: (1, 125), 30: (1, 125), 11: (1, 125), 17: (1, 125), 7: (1, 125), 31: (1, 125), 32: (1, 125), 33: (1, 125), 34: (1, 125), 35: (1, 125), 13: (1, 125), 0: (1, 125), 36: (1, 125)},
  80: {21: (1, 117), 22: (1, 117), 5: (1, 117), 23: (1, 117), 18: (1, 117), 24: (1, 117), 25: (1, 117), 26: (1, 117), 15: (1, 117), 27: (1, 117), 28: (1, 117), 4: (1, 117), 29: (1, 117), 30: (1, 117), 11: (1, 117), 17: (1, 117), 7: (1, 117), 31: (1, 117), 32: (1, 117), 33: (1, 117), 34: (1, 117), 35: (1, 117), 13: (1, 117), 0: (1, 117), 36: (1, 117)},
  81: {21: (1, 114), 22: (1, 114), 5: (1, 114), 23: (1, 114), 18: (1, 114), 24: (1, 114), 25: (1, 114), 26: (1, 114), 15: (1, 114), 27: (1, 114), 28: (1, 114), 4: (1, 114), 29: (1, 114), 30: (1, 114), 11: (1, 114), 17: (1, 114), 7: (1, 114), 31: (1, 114), 32: (1, 114), 33: (1, 114), 34: (1, 114), 35: (1, 114), 13: (1, 114), 0: (1, 114), 36: (1, 114)},
  82: {0: (0, 155)},
  83: {21: (1, 189), 22: (1, 189), 5: (1, 189), 23: (1, 189), 18: (1, 189), 24: (1, 189), 26: (1, 189), 25: (1, 189), 15: (1, 189), 27: (1, 189), 28: (1, 189), 4: (1, 189), 29: (1, 189), 30: (1, 189), 11: (1, 189), 17: (1, 189), 7: (1, 189), 31: (1, 189), 32: (1, 189), 33: (1, 189), 34: (1, 189), 35: (1, 189), 13: (1, 189), 0: (1, 189), 36: (1, 189)},
  84: {17: (1, 221), 5: (1, 221), 18: (1, 221), 33: (1, 221), 15: (1, 221), 13: (1, 221), 4: (1, 221), 0: (1, 221), 11: (1, 221), 7: (1, 221)},
  85: {12: (0, 13), 0: (0, 1), 2: (0, 156), 5: (0, 87), 4: (0, 67), 45: (0, 90), 15: (0, 16), 16: (0, 17), 55: (0, 157), 10: (0, 11), 56: (0, 92), 18: (0, 19), 17: (0, 18), 58: (0, 94), 59: (0, 95), 19: (0, 20), 20: (0, 21)},
  86: {5: (1, 30), 4: (1, 30), 18: (1, 30), 54: (1, 30), 15: (1, 30), 0: (1, 30), 45: (1, 30), 17: (1, 30)},
  87: {12: (0, 158), 0: (0, 159), 5: (0, 6), 4: (0, 67), 44: (0, 39), 15: (0, 16), 45: (0, 40), 16: (0, 17), 10: (0, 160), 18: (0, 19), 17: (0, 18), 19: (0, 20), 20: (0, 21)},
  88: {35: (1, 19), 27: (1, 19), 28: (0, 161)},
  89: {35: (1, 239), 27: (1, 239)},
  90: {7: (1, 28), 38: (0, 162)},
  91: {70: (0, 163)},
  92: {7: (0, 164)},
  93: {41: (0, 165), 35: (0, 30), 27: (0, 32)},
  94: {35: (1, 20), 27: (1, 20), 28: (0, 166)},
  95: {7: (0, 167)},
  96: {5: (1, 31), 4: (1, 31), 18: (1, 31), 54: (1, 31), 15: (1, 31), 0: (1, 31), 45: (1, 31), 17: (1, 31)},
  97: {17: (1, 215), 5: (1, 215), 18: (1, 215), 33: (1, 215), 15: (1, 215), 13: (1, 215), 4: (1, 215), 0: (1, 215), 11: (1, 215), 7: (1, 215), 22: (0, 26), 39: (0, 168), 29: (0, 169)},
  98: {17: (1, 231), 5: (1, 231), 18: (1, 231), 33: (1, 231), 15: (1, 231), 13: (1, 231), 4: (1, 231), 0: (1, 231), 11: (1, 231), 7: (1, 231), 29: (0, 170)},
  99: {17: (1, 237), 5: (1, 237), 18: (1, 237), 33: (1, 237), 15: (1, 237), 13: (1, 237), 4: (1, 237), 0: (1, 237), 11: (1, 237), 7: (1, 237)},
  100: {17: (1, 228), 5: (1, 228), 18: (1, 228), 33: (1, 228), 15: (1, 228), 13: (1, 228), 4: (1, 228), 0: (1, 228), 11: (1, 228), 7: (1, 228), 29: (0, 171)},
  101: {17: (1, 224), 5: (1, 224), 18: (1, 224), 33: (1, 224), 15: (1, 224), 13: (1, 224), 4: (1, 224), 0: (1, 224), 11: (1, 224), 7: (1, 224)},
  102: {22: (1, 3), 5: (1, 3), 18: (1, 3), 33: (1, 3), 15: (1, 3), 13: (1, 3), 4: (1, 3), 29: (1, 3), 7: (1, 3), 0: (1, 3), 11: (1, 3), 17: (1, 3)},
  103: {60: (0, 172)},
  104: {21: (1, 84), 31: (1, 84), 22: (1, 84), 17: (1, 84), 5: (1, 84), 18: (1, 84), 33: (1, 84), 24: (0, 127), 15: (1, 84), 26: (1, 84), 25: (1, 84), 27: (1, 84), 13: (1, 84), 4: (1, 84), 29: (1, 84), 0: (1, 84), 11: (1, 84), 7: (0, 23), 37: (0, 22), 38: (0, 25)},
  105: {22: (1, 8), 5: (1, 8), 18: (1, 8), 33: (1, 8), 15: (1, 8), 13: (1, 8), 4: (1, 8), 29: (1, 8), 7: (1, 8), 0: (1, 8), 11: (1, 8), 17: (1, 8)},
  106: {0: (0, 104), 19: (0, 52), 15: (0, 53), 18: (0, 55), 50: (0, 56), 49: (0, 107), 4: (0, 57), 17: (0, 58), 51: (0, 59), 61: (0, 173)},
  107: {21: (1, 85), 31: (0, 64), 22: (1, 85), 17: (0, 60), 5: (1, 85), 18: (1, 85), 33: (1, 85), 24: (0, 131), 15: (1, 85), 26: (0, 133), 25: (0, 130), 27: (1, 85), 13: (1, 85), 4: (1, 85), 29: (1, 85), 0: (1, 85), 11: (1, 85), 7: (1, 85), 52: (0, 132)},
  108: {0: (0, 104), 19: (0, 52), 15: (0, 53), 61: (0, 174), 18: (0, 55), 50: (0, 56), 49: (0, 107), 4: (0, 57), 17: (0, 58), 7: (0, 175), 51: (0, 59)},
  109: {17: (0, 176), 0: (0, 177), 71: (0, 178), 5: (0, 6), 72: (0, 179), 7: (0, 180), 10: (0, 181), 19: (0, 182), 15: (0, 183), 4: (0, 184), 18: (0, 185), 73: (0, 186)},
  110: {21: (1, 183), 22: (1, 183), 5: (1, 183), 23: (1, 183), 18: (1, 183), 24: (1, 183), 15: (1, 183), 25: (1, 183), 26: (1, 183), 27: (1, 183), 28: (1, 183), 4: (1, 183), 29: (1, 183), 30: (1, 183), 11: (1, 183), 7: (1, 183), 17: (1, 183), 31: (1, 183), 32: (1, 183), 33: (1, 183), 34: (1, 183), 35: (1, 183), 13: (1, 183), 0: (1, 183), 36: (1, 183)},
  111: {17: (0, 176), 0: (0, 177), 71: (0, 187), 5: (0, 6), 72: (0, 179), 10: (0, 181), 19: (0, 182), 15: (0, 183), 4: (0, 184), 18: (0, 185), 7: (0, 188), 73: (0, 186)},
  112: {21: (1, 185), 22: (1, 185), 5: (1, 185), 23: (1, 185), 18: (1, 185), 24: (1, 185), 15: (1, 185), 25: (1, 185), 26: (1, 185), 27: (1, 185), 28: (1, 185), 4: (1, 185), 29: (1, 185), 30: (1, 185), 11: (1, 185), 7: (1, 185), 17: (1, 185), 31: (1, 185), 32: (1, 185), 33: (1, 185), 34: (1, 185), 35: (1, 185), 13: (1, 185), 0: (1, 185), 36: (1, 185)},
  113: {17: (1, 222), 5: (1, 222), 18: (1, 222), 33: (1, 222), 15: (1, 222), 13: (1, 222), 4: (1, 222), 0: (1, 222), 11: (1, 222), 7: (1, 222)},
  114: {17: (1, 218), 5: (1, 218), 18: (1, 218), 33: (1, 218), 15: (1, 218), 13: (1, 218), 4: (1, 218), 0: (1, 218), 11: (1, 218), 7: (1, 218), 29: (0, 189)},
  115: {17: (1, 226), 5: (1, 226), 18: (1, 226), 33: (1, 226), 15: (1, 226), 13: (1, 226), 4: (1, 226), 0: (1, 226), 11: (1, 226), 7: (1, 226)},
  116: {22: (1, 34), 5: (1, 34), 18: (1, 34), 33: (1, 34), 15: (1, 34), 13: (1, 34), 4: (1, 34), 29: (1, 34), 7: (1, 34), 0: (1, 34), 11: (1, 34), 17: (1, 34)},
  117: {22: (1, 35), 5: (1, 35), 18: (1, 35), 33: (1, 35), 15: (1, 35), 13: (1, 35), 4: (1, 35), 29: (1, 35), 7: (1, 35), 0: (1, 35), 11: (1, 35), 17: (1, 35)},
  118: {5: (0, 190), 42: (0, 191)},
  119: {22: (1, 41), 5: (1, 41), 23: (1, 41), 18: (1, 41), 33: (1, 41), 15: (1, 41), 34: (1, 41), 13: (1, 41), 4: (1, 41), 29: (1, 41), 7: (0, 193), 0: (1, 41), 11: (1, 41), 17: (1, 41), 74: (0, 192)},
  120: {42: (1, 62), 5: (1, 62), 37: (0, 194)},
  121: {75: (0, 195), 76: (0, 196), 11: (0, 197)},
  122: {22: (1, 40), 5: (1, 40), 23: (1, 40), 18: (1, 40), 33: (1, 40), 15: (1, 40), 34: (1, 40), 13: (1, 40), 4: (1, 40), 29: (1, 40), 7: (0, 193), 0: (1, 40), 11: (1, 40), 17: (1, 40), 74: (0, 198)},
  123: {22: (1, 38), 5: (1, 38), 18: (1, 38), 33: (1, 38), 15: (1, 38), 34: (1, 38), 13: (1, 38), 4: (1, 38), 29: (1, 38), 7: (1, 38), 0: (1, 38), 11: (1, 38), 17: (1, 38)},
  124: {22: (1, 39), 5: (1, 39), 23: (1, 39), 18: (1, 39), 33: (1, 39), 15: (1, 39), 13: (1, 39), 4: (1, 39), 29: (1, 39), 7: (1, 39), 0: (1, 39), 11: (1, 39), 17: (1, 39)},
  125: {21: (1, 124), 22: (1, 124), 5: (1, 124), 23: (1, 124), 18: (1, 124), 24: (1, 124), 25: (1, 124), 26: (1, 124), 15: (1, 124), 27: (1, 124), 28: (1, 124), 4: (1, 124), 29: (1, 124), 30: (1, 124), 11: (1, 124), 17: (1, 124), 7: (1, 124), 31: (1, 124), 32: (1, 124), 33: (1, 124), 34: (1, 124), 35: (1, 124), 13: (1, 124), 0: (1, 124), 36: (1, 124)},
  126: {21: (1, 120), 22: (1, 120), 5: (1, 120), 23: (1, 120), 18: (1, 120), 24: (1, 120), 25: (1, 120), 26: (1, 120), 15: (1, 120), 27: (1, 120), 28: (1, 120), 4: (1, 120), 29: (1, 120), 30: (1, 120), 11: (1, 120), 17: (1, 120), 7: (1, 120), 31: (1, 120), 32: (1, 120), 33: (1, 120), 34: (1, 120), 35: (1, 120), 13: (1, 120), 0: (1, 120), 36: (1, 120)},
  127: {0: (0, 76), 44: (0, 199), 4: (0, 200), 15: (0, 53), 77: (0, 201), 19: (0, 202), 51: (0, 203)},
  128: {21: (0, 204), 31: (1, 91), 22: (1, 91), 5: (1, 91), 18: (1, 91), 33: (1, 91), 24: (1, 91), 26: (1, 91), 25: (1, 91), 15: (1, 91), 27: (1, 91), 13: (1, 91), 4: (1, 91), 29: (1, 91), 7: (1, 91), 0: (1, 91), 11: (1, 91), 17: (1, 91)},
  129: {21: (0, 205), 78: (0, 206), 27: (0, 207)},
  130: {44: (0, 208)},
  131: {44: (0, 209)},
  132: {0: (0, 210), 4: (0, 200), 15: (0, 53), 19: (0, 202), 79: (0, 211), 51: (0, 203), 77: (0, 212)},
  133: {44: (0, 213)},
  134: {21: (1, 101), 31: (1, 101), 22: (1, 101), 17: (1, 101), 5: (1, 101), 18: (1, 101), 33: (1, 101), 24: (1, 101), 26: (1, 101), 25: (1, 101), 15: (1, 101), 27: (1, 101), 13: (1, 101), 4: (1, 101), 29: (1, 101), 0: (1, 101), 11: (1, 101), 7: (1, 101)},
  135: {21: (1, 95), 31: (1, 95), 22: (1, 95), 17: (1, 95), 5: (1, 95), 18: (1, 95), 33: (1, 95), 24: (1, 95), 26: (1, 95), 25: (1, 95), 15: (1, 95), 27: (1, 95), 13: (1, 95), 4: (1, 95), 29: (1, 95), 0: (1, 95), 11: (1, 95), 7: (1, 95)},
  136: {5: (1, 211), 4: (1, 211), 67: (1, 211), 15: (1, 211), 0: (1, 211)},
  137: {21: (1, 123), 22: (1, 123), 5: (1, 123), 23: (1, 123), 18: (1, 123), 24: (1, 123), 25: (1, 123), 26: (1, 123), 15: (1, 123), 27: (1, 123), 28: (1, 123), 4: (1, 123), 29: (1, 123), 30: (1, 123), 11: (1, 123), 17: (1, 123), 7: (1, 123), 31: (1, 123), 32: (1, 123), 33: (1, 123), 34: (1, 123), 35: (1, 123), 13: (1, 123), 0: (1, 123), 36: (1, 123)},
  138: {21: (1, 122), 22: (1, 122), 5: (1, 122), 23: (1, 122), 18: (1, 122), 24: (1, 122), 25: (1, 122), 26: (1, 122), 15: (1, 122), 27: (1, 122), 28: (1, 122), 4: (1, 122), 29: (1, 122), 30: (1, 122), 11: (1, 122), 17: (1, 122), 7: (1, 122), 31: (1, 122), 32: (1, 122), 33: (1, 122), 34: (1, 122), 35: (1, 122), 13: (1, 122), 0: (1, 122), 36: (1, 122)},
  139: {21: (1, 108), 22: (1, 108), 5: (1, 108), 23: (1, 108), 18: (1, 108), 24: (1, 108), 25: (1, 108), 26: (1, 108), 15: (1, 108), 27: (1, 108), 28: (1, 108), 4: (1, 108), 29: (1, 108), 30: (1, 108), 11: (1, 108), 17: (1, 108), 7: (0, 23), 31: (1, 108), 32: (1, 108), 33: (1, 108), 34: (1, 108), 35: (1, 108), 13: (1, 108), 0: (1, 108), 36: (1, 108), 37: (0, 22), 38: (0, 25)},
  140: {21: (1, 121), 22: (1, 121), 5: (1, 121), 23: (1, 121), 18: (1, 121), 24: (1, 121), 25: (1, 121), 26: (1, 121), 15: (1, 121), 27: (1, 121), 28: (1, 121), 4: (1, 121), 29: (1, 121), 30: (1, 121), 11: (1, 121), 17: (1, 121), 7: (1, 121), 31: (1, 121), 32: (1, 121), 33: (1, 121), 34: (1, 121), 35: (1, 121), 13: (1, 121), 0: (1, 121), 36: (1, 121)},
  141: {21: (1, 107), 22: (1, 107), 5: (1, 107), 23: (1, 107), 18: (1, 107), 24: (1, 107), 25: (1, 107), 26: (1, 107), 15: (1, 107), 27: (1, 107), 28: (1, 107), 4: (1, 107), 29: (1, 107), 30: (1, 107), 11: (1, 107), 17: (1, 107), 7: (1, 107), 31: (1, 107), 32: (1, 107), 33: (1, 107), 34: (1, 107), 35: (1, 107), 13: (1, 107), 0: (1, 107), 36: (1, 107)},
  142: {21: (1, 106), 22: (1, 106), 5: (1, 106), 23: (1, 106), 18: (1, 106), 24: (1, 106), 25: (1, 106), 26: (1, 106), 15: (1, 106), 27: (1, 106), 28: (1, 106), 4: (1, 106), 29: (1, 106), 30: (1, 106), 11: (1, 106), 17: (1, 106), 7: (1, 106), 31: (1, 106), 32: (1, 106), 33: (1, 106), 34: (1, 106), 35: (1, 106), 13: (1, 106), 0: (1, 106), 36: (1, 106)},
  143: {21: (1, 118), 22: (1, 118), 5: (1, 118), 23: (1, 118), 18: (1, 118), 24: (1, 118), 25: (1, 118), 26: (1, 118), 15: (1, 118), 27: (1, 118), 28: (1, 118), 4: (1, 118), 29: (1, 118), 30: (1, 118), 11: (1, 118), 17: (1, 118), 7: (1, 118), 31: (1, 118), 32: (1, 118), 33: (1, 118), 34: (1, 118), 35: (1, 118), 13: (1, 118), 0: (1, 118), 36: (1, 118)},
  144: {21: (1, 69), 22: (1, 69), 5: (1, 69), 23: (1, 69), 18: (1, 69), 24: (1, 69), 25: (1, 69), 26: (1, 69), 15: (1, 69), 27: (1, 69), 28: (1, 69), 4: (1, 69), 29: (1, 69), 30: (1, 69), 11: (1, 69), 17: (1, 69), 7: (1, 69), 31: (1, 69), 32: (1, 69), 33: (1, 69), 34: (1, 69), 35: (1, 69), 13: (1, 69), 0: (1, 69), 36: (1, 69)},
  145: {12: (0, 13), 0: (0, 1), 5: (0, 6), 4: (0, 67), 7: (0, 214), 15: (0, 16), 16: (0, 17), 10: (0, 11), 18: (0, 19), 2: (0, 215), 17: (0, 18), 19: (0, 20), 20: (0, 21)},
  146: {27: (0, 216), 21: (0, 217)},
  147: {21: (1, 68), 22: (1, 68), 5: (1, 68), 23: (1, 68), 18: (1, 68), 24: (1, 68), 25: (1, 68), 26: (1, 68), 15: (1, 68), 27: (1, 68), 28: (1, 68), 4: (1, 68), 29: (1, 68), 30: (1, 68), 11: (1, 68), 17: (1, 68), 7: (1, 68), 31: (1, 68), 32: (1, 68), 33: (1, 68), 34: (1, 68), 35: (1, 68), 13: (1, 68), 0: (1, 68), 36: (1, 68)},
  148: {38: (0, 218)},
  149: {0: (0, 219), 7: (0, 220)},
  150: {38: (0, 221), 7: (0, 222)},
  151: {7: (0, 223), 38: (0, 224)},
  152: {44: (0, 225)},
  153: {21: (1, 188), 22: (1, 188), 5: (1, 188), 23: (1, 188), 18: (1, 188), 24: (1, 188), 26: (1, 188), 25: (1, 188), 15: (1, 188), 27: (1, 188), 28: (1, 188), 4: (1, 188), 29: (1, 188), 30: (1, 188), 11: (1, 188), 17: (1, 188), 7: (1, 188), 31: (1, 188), 32: (1, 188), 33: (1, 188), 34: (1, 188), 35: (1, 188), 13: (1, 188), 0: (1, 188), 36: (1, 188)},
  154: {0: (0, 226)},
  155: {21: (1, 190), 22: (1, 190), 5: (1, 190), 23: (1, 190), 18: (1, 190), 24: (1, 190), 26: (1, 190), 25: (1, 190), 15: (1, 190), 27: (1, 190), 28: (1, 190), 4: (1, 190), 29: (1, 190), 30: (1, 190), 11: (1, 190), 17: (1, 190), 7: (1, 190), 31: (1, 190), 32: (1, 190), 33: (1, 190), 34: (1, 190), 35: (1, 190), 13: (1, 190), 0: (1, 190), 36: (1, 190)},
  156: {22: (1, 18), 5: (1, 18), 23: (1, 18), 18: (1, 18), 33: (1, 18), 15: (1, 18), 34: (1, 18), 13: (1, 18), 4: (1, 18), 29: (1, 18), 7: (1, 18), 0: (1, 18), 11: (1, 18), 17: (1, 18), 35: (1, 19), 27: (1, 19), 28: (0, 161)},
  157: {35: (1, 238), 27: (1, 238)},
  158: {31: (0, 64), 17: (0, 60), 26: (0, 61), 25: (0, 62), 52: (0, 63), 36: (0, 227), 24: (0, 65)},
  159: {37: (0, 22), 7: (0, 23), 38: (0, 25), 24: (0, 24)},
  160: {24: (0, 50)},
  161: {80: (0, 228)},
  162: {45: (0, 229)},
  163: {7: (0, 230), 32: (0, 231)},
  164: {12: (0, 13), 0: (0, 1), 5: (0, 87), 4: (0, 67), 58: (0, 232), 15: (0, 16), 2: (0, 233), 16: (0, 17), 10: (0, 11), 18: (0, 19), 17: (0, 18), 19: (0, 20), 20: (0, 21)},
  165: {5: (0, 6), 10: (0, 234), 0: (0, 235)},
  166: {80: (0, 236)},
  167: {12: (0, 13), 0: (0, 1), 5: (0, 6), 4: (0, 67), 15: (0, 16), 2: (0, 237), 16: (0, 17), 10: (0, 11), 18: (0, 19), 17: (0, 18), 19: (0, 20), 20: (0, 21)},
  168: {17: (1, 235), 5: (1, 235), 18: (1, 235), 33: (1, 235), 15: (1, 235), 13: (1, 235), 4: (1, 235), 0: (1, 235), 11: (1, 235), 7: (1, 235), 29: (0, 238)},
  169: {17: (1, 236), 5: (1, 236), 18: (1, 236), 33: (1, 236), 15: (1, 236), 13: (1, 236), 4: (1, 236), 0: (1, 236), 11: (1, 236), 7: (1, 236)},
  170: {17: (1, 234), 5: (1, 234), 18: (1, 234), 33: (1, 234), 15: (1, 234), 13: (1, 234), 4: (1, 234), 0: (1, 234), 11: (1, 234), 7: (1, 234)},
  171: {17: (1, 214), 5: (1, 214), 18: (1, 214), 33: (1, 214), 15: (1, 214), 13: (1, 214), 4: (1, 214), 0: (1, 214), 11: (1, 214), 7: (1, 214)},
  172: {22: (1, 10), 5: (1, 10), 18: (1, 10), 33: (1, 10), 15: (1, 10), 13: (1, 10), 4: (1, 10), 29: (1, 10), 7: (1, 10), 0: (1, 10), 11: (1, 10), 17: (1, 10)},
  173: {22: (1, 11), 5: (1, 11), 18: (1, 11), 33: (1, 11), 15: (1, 11), 13: (1, 11), 4: (1, 11), 29: (1, 11), 7: (1, 11), 0: (1, 11), 11: (1, 11), 17: (1, 11)},
  174: {22: (1, 6), 5: (1, 6), 18: (1, 6), 33: (1, 6), 15: (1, 6), 13: (1, 6), 4: (1, 6), 29: (1, 6), 7: (1, 6), 0: (1, 6), 11: (1, 6), 17: (1, 6)},
  175: {0: (0, 104), 19: (0, 52), 15: (0, 53), 61: (0, 239), 18: (0, 55), 50: (0, 56), 49: (0, 107), 4: (0, 57), 17: (0, 58), 51: (0, 59)},
  176: {17: (0, 176), 0: (0, 240), 71: (0, 241), 5: (0, 6), 72: (0, 179), 10: (0, 242), 19: (0, 182), 15: (0, 183), 81: (0, 243), 4: (0, 184), 18: (0, 185), 73: (0, 186)},
  177: {37: (0, 22), 7: (0, 23), 38: (0, 25), 24: (0, 244)},
  178: {36: (0, 245), 25: (0, 246), 26: (0, 247), 17: (0, 60), 52: (0, 248), 24: (0, 249), 31: (0, 64)},
  179: {27: (1, 135), 21: (1, 135), 31: (1, 135), 24: (1, 135), 25: (1, 135), 26: (1, 135), 36: (1, 135), 17: (1, 135)},
  180: {17: (0, 176), 0: (0, 177), 71: (0, 250), 5: (0, 6), 72: (0, 179), 10: (0, 181), 19: (0, 182), 15: (0, 183), 4: (0, 184), 18: (0, 185), 73: (0, 186)},
  181: {24: (0, 251)},
  182: {27: (1, 132), 21: (1, 132), 31: (1, 132), 24: (1, 132), 25: (1, 132), 26: (1, 132), 36: (1, 132), 17: (1, 132)},
  183: {17: (0, 176), 0: (0, 240), 71: (0, 241), 5: (0, 6), 72: (0, 179), 10: (0, 242), 19: (0, 252), 15: (0, 183), 4: (0, 184), 18: (0, 185), 81: (0, 253), 73: (0, 186)},
  184: {27: (1, 133), 21: (1, 133), 31: (1, 133), 24: (1, 133), 25: (1, 133), 26: (1, 133), 36: (1, 133), 17: (1, 133)},
  185: {17: (0, 176), 0: (0, 240), 71: (0, 241), 5: (0, 6), 72: (0, 179), 10: (0, 242), 19: (0, 182), 15: (0, 183), 4: (0, 184), 18: (0, 185), 81: (0, 254), 73: (0, 186)},
  186: {27: (1, 134), 21: (1, 134), 31: (1, 134), 24: (1, 134), 25: (1, 134), 26: (1, 134), 36: (1, 134), 17: (1, 134)},
  187: {36: (0, 255), 25: (0, 246), 26: (0, 247), 17: (0, 60), 52: (0, 248), 24: (0, 249), 31: (0, 64)},
  188: {17: (0, 176), 0: (0, 177), 71: (0, 256), 5: (0, 6), 72: (0, 179), 10: (0, 181), 19: (0, 182), 15: (0, 183), 4: (0, 184), 18: (0, 185), 73: (0, 186)},
  189: {17: (1, 223), 5: (1, 223), 18: (1, 223), 33: (1, 223), 15: (1, 223), 13: (1, 223), 4: (1, 223), 0: (1, 223), 11: (1, 223), 7: (1, 223)},
  190: {82: (0, 257), 0: (0, 258), 15: (0, 259), 83: (0, 260), 84: (0, 261), 5: (0, 262), 85: (0, 263), 18: (0, 264), 45: (0, 265), 19: (0, 266), 86: (0, 267), 44: (0, 268), 67: (0, 269), 4: (0, 270), 17: (0, 271)},
  191: {0: (0, 272)},
  192: {22: (1, 43), 5: (1, 43), 23: (1, 43), 18: (1, 43), 33: (1, 43), 15: (1, 43), 34: (1, 43), 13: (1, 43), 4: (1, 43), 29: (1, 43), 7: (0, 273), 0: (1, 43), 11: (1, 43), 17: (1, 43)},
  193: {62: (0, 118), 65: (0, 274), 45: (0, 120), 63: (0, 275), 64: (0, 121)},
  194: {44: (0, 276)},
  195: {65: (0, 277), 62: (0, 118), 7: (0, 278), 45: (0, 120)},
  196: {22: (1, 45), 17: (1, 45), 5: (1, 45), 23: (1, 45), 18: (1, 45), 33: (1, 45), 15: (1, 45), 34: (1, 45), 13: (1, 45), 4: (1, 45), 29: (1, 45), 0: (1, 45), 11: (1, 45), 7: (1, 45)},
  197: {75: (0, 195), 76: (0, 279)},
  198: {22: (1, 42), 5: (1, 42), 23: (1, 42), 18: (1, 42), 33: (1, 42), 15: (1, 42), 34: (1, 42), 13: (1, 42), 4: (1, 42), 29: (1, 42), 7: (0, 273), 0: (1, 42), 11: (1, 42), 17: (1, 42)},
  199: {21: (1, 102), 31: (1, 102), 22: (1, 102), 17: (1, 102), 5: (1, 102), 18: (1, 102), 33: (1, 102), 24: (1, 102), 26: (1, 102), 25: (1, 102), 15: (1, 102), 27: (1, 102), 13: (1, 102), 4: (1, 102), 29: (1, 102), 0: (1, 102), 11: (1, 102), 7: (1, 102)},
  200: {21: (1, 92), 31: (1, 92), 22: (1, 92), 5: (1, 92), 18: (1, 92), 33: (1, 92), 24: (1, 92), 26: (1, 92), 25: (1, 92), 15: (1, 92), 27: (1, 92), 13: (1, 92), 4: (1, 92), 29: (1, 92), 7: (1, 92), 0: (1, 92), 11: (1, 92), 17: (1, 92)},
  201: {21: (1, 98), 31: (1, 98), 22: (1, 98), 17: (1, 98), 5: (1, 98), 18: (1, 98), 33: (1, 98), 24: (1, 98), 26: (1, 98), 25: (1, 98), 15: (1, 98), 27: (1, 98), 13: (1, 98), 4: (1, 98), 29: (1, 98), 0: (1, 98), 11: (1, 98), 7: (1, 98)},
  202: {21: (1, 94), 31: (1, 94), 22: (1, 94), 5: (1, 94), 18: (1, 94), 33: (1, 94), 24: (1, 94), 26: (1, 94), 25: (1, 94), 15: (1, 94), 27: (1, 94), 13: (1, 94), 4: (1, 94), 29: (1, 94), 7: (1, 94), 0: (1, 94), 11: (1, 94), 17: (1, 94)},
  203: {21: (1, 93), 31: (1, 93), 22: (1, 93), 5: (1, 93), 18: (1, 93), 33: (1, 93), 24: (1, 93), 26: (1, 93), 25: (1, 93), 15: (1, 93), 27: (1, 93), 13: (1, 93), 4: (1, 93), 29: (1, 93), 7: (1, 93), 0: (1, 93), 11: (1, 93), 17: (1, 93)},
  204: {21: (1, 64), 31: (1, 64), 22: (1, 64), 17: (1, 64), 5: (1, 64), 18: (1, 64), 33: (1, 64), 24: (1, 64), 26: (1, 64), 25: (1, 64), 15: (1, 64), 27: (1, 64), 13: (1, 64), 4: (1, 64), 29: (1, 64), 0: (1, 64), 11: (1, 64), 7: (1, 64)},
  205: {21: (1, 66), 31: (1, 66), 22: (1, 66), 17: (1, 66), 5: (1, 66), 18: (1, 66), 33: (1, 66), 24: (1, 66), 26: (1, 66), 25: (1, 66), 15: (1, 66), 27: (1, 66), 13: (1, 66), 4: (1, 66), 29: (1, 66), 0: (1, 66), 11: (1, 66), 7: (1, 66)},
  206: {27: (0, 280), 21: (0, 281)},
  207: {0: (0, 104), 19: (0, 52), 15: (0, 53), 7: (0, 282), 18: (0, 55), 50: (0, 56), 49: (0, 107), 61: (0, 283), 4: (0, 57), 17: (0, 58), 51: (0, 59)},
  208: {21: (1, 97), 31: (1, 97), 22: (1, 97), 17: (1, 97), 5: (1, 97), 18: (1, 97), 33: (1, 97), 24: (1, 97), 26: (1, 97), 25: (1, 97), 15: (1, 97), 27: (1, 97), 13: (1, 97), 4: (1, 97), 29: (1, 97), 0: (1, 97), 11: (1, 97), 7: (1, 97)},
  209: {21: (1, 100), 31: (1, 100), 22: (1, 100), 17: (1, 100), 5: (1, 100), 18: (1, 100), 33: (1, 100), 24: (1, 100), 26: (1, 100), 25: (1, 100), 15: (1, 100), 27: (1, 100), 13: (1, 100), 4: (1, 100), 29: (1, 100), 0: (1, 100), 11: (1, 100), 7: (1, 100)},
  210: {21: (1, 87), 31: (1, 87), 22: (1, 87), 5: (1, 87), 18: (1, 87), 33: (1, 87), 24: (1, 87), 26: (1, 87), 25: (1, 87), 15: (1, 87), 27: (1, 87), 13: (1, 87), 4: (1, 87), 29: (1, 87), 7: (0, 23), 0: (1, 87), 11: (1, 87), 17: (1, 87), 37: (0, 22), 38: (0, 25)},
  211: {21: (1, 99), 31: (1, 99), 22: (1, 99), 17: (1, 99), 5: (1, 99), 18: (1, 99), 33: (1, 99), 24: (1, 99), 26: (1, 99), 25: (1, 99), 15: (1, 99), 27: (1, 99), 13: (1, 99), 4: (1, 99), 29: (1, 99), 0: (1, 99), 11: (1, 99), 7: (1, 99)},
  212: {21: (1, 86), 31: (1, 86), 22: (1, 86), 5: (1, 86), 18: (1, 86), 33: (1, 86), 24: (1, 86), 26: (1, 86), 25: (1, 86), 15: (1, 86), 27: (1, 86), 13: (1, 86), 4: (1, 86), 29: (1, 86), 7: (1, 86), 0: (1, 86), 11: (1, 86), 17: (1, 86)},
  213: {21: (1, 96), 31: (1, 96), 22: (1, 96), 17: (1, 96), 5: (1, 96), 18: (1, 96), 33: (1, 96), 24: (1, 96), 26: (1, 96), 25: (1, 96), 15: (1, 96), 27: (1, 96), 13: (1, 96), 4: (1, 96), 29: (1, 96), 0: (1, 96), 11: (1, 96), 7: (1, 96)},
  214: {12: (0, 13), 0: (0, 1), 5: (0, 6), 4: (0, 67), 15: (0, 16), 16: (0, 17), 2: (0, 284), 10: (0, 11), 18: (0, 19), 17: (0, 18), 19: (0, 20), 20: (0, 21)},
  215: {27: (1, 250), 21: (1, 250)},
  216: {12: (0, 13), 0: (0, 1), 5: (0, 6), 4: (0, 67), 7: (0, 285), 15: (0, 16), 16: (0, 17), 10: (0, 11), 18: (0, 19), 17: (0, 18), 2: (0, 286), 19: (0, 20), 20: (0, 21)},
  217: {21: (1, 67), 22: (1, 67), 5: (1, 67), 23: (1, 67), 18: (1, 67), 24: (1, 67), 25: (1, 67), 26: (1, 67), 15: (1, 67), 27: (1, 67), 28: (1, 67), 4: (1, 67), 29: (1, 67), 30: (1, 67), 11: (1, 67), 17: (1, 67), 7: (1, 67), 31: (1, 67), 32: (1, 67), 33: (1, 67), 34: (1, 67), 35: (1, 67), 13: (1, 67), 0: (1, 67), 36: (1, 67)},
  218: {0: (0, 287), 7: (0, 288)},
  219: {21: (1, 201), 22: (1, 201), 5: (1, 201), 23: (1, 201), 18: (1, 201), 24: (1, 201), 26: (1, 201), 25: (1, 201), 15: (1, 201), 27: (1, 201), 28: (1, 201), 4: (1, 201), 29: (1, 201), 30: (1, 201), 11: (1, 201), 17: (1, 201), 7: (1, 201), 31: (1, 201), 32: (1, 201), 33: (1, 201), 34: (1, 201), 35: (1, 201), 13: (1, 201), 0: (1, 201), 36: (1, 201)},
  220: {0: (0, 289)},
  221: {0: (0, 290), 7: (0, 291)},
  222: {38: (0, 292)},
  223: {38: (0, 293)},
  224: {0: (0, 294), 7: (0, 295)},
  225: {7: (0, 296), 38: (0, 297)},
  226: {21: (1, 191), 22: (1, 191), 5: (1, 191), 23: (1, 191), 18: (1, 191), 24: (1, 191), 26: (1, 191), 25: (1, 191), 15: (1, 191), 27: (1, 191), 28: (1, 191), 4: (1, 191), 29: (1, 191), 30: (1, 191), 11: (1, 191), 17: (1, 191), 7: (1, 191), 31: (1, 191), 32: (1, 191), 33: (1, 191), 34: (1, 191), 35: (1, 191), 13: (1, 191), 0: (1, 191), 36: (1, 191)},
  227: {35: (1, 26), 27: (1, 26), 30: (1, 26), 32: (1, 26), 28: (1, 26)},
  228: {35: (1, 24), 27: (1, 24)},
  229: {7: (1, 29)},
  230: {87: (0, 298)},
  231: {12: (0, 13), 0: (0, 1), 5: (0, 87), 4: (0, 67), 58: (0, 299), 15: (0, 16), 16: (0, 17), 10: (0, 11), 88: (0, 300), 18: (0, 19), 17: (0, 18), 2: (0, 301), 19: (0, 20), 20: (0, 21)},
  232: {35: (1, 25), 27: (1, 25)},
  233: {35: (1, 21), 27: (1, 21)},
  234: {22: (1, 12), 5: (1, 12), 23: (1, 12), 18: (1, 12), 33: (1, 12), 15: (1, 12), 34: (1, 12), 13: (1, 12), 4: (1, 12), 29: (1, 12), 7: (1, 12), 0: (1, 12), 11: (1, 12), 17: (1, 12)},
  235: {22: (1, 13), 5: (1, 13), 23: (1, 13), 18: (1, 13), 33: (1, 13), 15: (1, 13), 34: (1, 13), 13: (1, 13), 4: (1, 13), 29: (1, 13), 7: (1, 13), 0: (1, 13), 11: (1, 13), 17: (1, 13)},
  236: {35: (1, 23), 27: (1, 23)},
  237: {35: (1, 22), 27: (1, 22)},
  238: {17: (1, 219), 5: (1, 219), 18: (1, 219), 33: (1, 219), 15: (1, 219), 13: (1, 219), 4: (1, 219), 0: (1, 219), 11: (1, 219), 7: (1, 219)},
  239: {22: (1, 7), 5: (1, 7), 18: (1, 7), 33: (1, 7), 15: (1, 7), 13: (1, 7), 4: (1, 7), 29: (1, 7), 7: (1, 7), 0: (1, 7), 11: (1, 7), 17: (1, 7)},
  240: {27: (1, 128), 21: (1, 128), 31: (1, 128), 24: (0, 244), 25: (1, 128), 26: (1, 128), 36: (1, 128), 17: (1, 128), 37: (0, 22), 7: (0, 23), 38: (0, 25)},
  241: {27: (1, 126), 21: (1, 126), 31: (0, 64), 24: (0, 249), 25: (0, 246), 26: (0, 247), 36: (1, 126), 17: (0, 60), 52: (0, 248)},
  242: {27: (1, 127), 21: (1, 127), 31: (1, 127), 24: (0, 251), 25: (1, 127), 26: (1, 127), 36: (1, 127), 17: (1, 127)},
  243: {27: (1, 148), 21: (1, 148), 31: (1, 148), 24: (1, 148), 25: (1, 148), 26: (1, 148), 36: (1, 148), 17: (1, 148)},
  244: {0: (0, 76), 15: (0, 183), 73: (0, 302), 44: (0, 303), 89: (0, 304), 19: (0, 305), 4: (0, 306)},
  245: {21: (1, 187), 22: (1, 187), 5: (1, 187), 23: (1, 187), 18: (1, 187), 24: (1, 187), 15: (1, 187), 25: (1, 187), 26: (1, 187), 27: (1, 187), 28: (1, 187), 4: (1, 187), 29: (1, 187), 30: (1, 187), 11: (1, 187), 7: (1, 187), 17: (1, 187), 31: (1, 187), 32: (1, 187), 33: (1, 187), 34: (1, 187), 35: (1, 187), 13: (1, 187), 0: (1, 187), 36: (1, 187)},
  246: {44: (0, 307)},
  247: {44: (0, 308)},
  248: {0: (0, 309), 89: (0, 310), 5: (0, 6), 15: (0, 183), 90: (0, 311), 73: (0, 302), 10: (0, 312), 19: (0, 305), 4: (0, 306)},
  249: {44: (0, 313)},
  250: {25: (0, 246), 26: (0, 247), 17: (0, 60), 36: (0, 314), 52: (0, 248), 24: (0, 249), 31: (0, 64)},
  251: {0: (0, 76), 44: (0, 315), 15: (0, 183), 73: (0, 302), 89: (0, 316), 19: (0, 305), 4: (0, 306)},
  252: {27: (1, 132), 21: (0, 317), 31: (1, 132), 24: (1, 132), 25: (1, 132), 26: (1, 132), 36: (1, 132), 17: (1, 132)},
  253: {27: (0, 318), 91: (0, 319), 21: (0, 320)},
  254: {27: (1, 140), 21: (1, 140), 31: (1, 140), 24: (1, 140), 25: (1, 140), 26: (1, 140), 36: (1, 140), 17: (1, 140)},
  255: {21: (1, 186), 22: (1, 186), 5: (1, 186), 23: (1, 186), 18: (1, 186), 24: (1, 186), 15: (1, 186), 25: (1, 186), 26: (1, 186), 27: (1, 186), 28: (1, 186), 4: (1, 186), 29: (1, 186), 30: (1, 186), 11: (1, 186), 7: (1, 186), 17: (1, 186), 31: (1, 186), 32: (1, 186), 33: (1, 186), 34: (1, 186), 35: (1, 186), 13: (1, 186), 0: (1, 186), 36: (1, 186)},
  256: {25: (0, 246), 26: (0, 247), 17: (0, 60), 52: (0, 248), 36: (0, 321), 24: (0, 249), 31: (0, 64)},
  257: {27: (1, 159), 21: (1, 159), 31: (1, 159), 24: (1, 159), 26: (1, 159), 25: (1, 159), 36: (1, 159), 17: (1, 159)},
  258: {37: (0, 22), 7: (0, 23), 38: (0, 25), 24: (0, 322)},
  259: {92: (0, 323), 82: (0, 257), 0: (0, 324), 15: (0, 259), 83: (0, 325), 84: (0, 261), 5: (0, 262), 85: (0, 326), 18: (0, 264), 19: (0, 327), 86: (0, 267), 67: (0, 269), 4: (0, 270), 17: (0, 271)},
  260: {24: (0, 328)},
  261: {27: (1, 158), 21: (1, 158), 31: (1, 158), 24: (1, 158), 26: (1, 158), 25: (1, 158), 36: (1, 158), 17: (1, 158)},
  262: {45: (0, 329), 44: (0, 330)},
  263: {52: (0, 331), 24: (0, 332), 36: (0, 333), 17: (0, 60), 25: (0, 334), 26: (0, 335), 31: (0, 64)},
  264: {82: (0, 257), 0: (0, 324), 15: (0, 259), 83: (0, 325), 84: (0, 261), 5: (0, 262), 85: (0, 326), 18: (0, 264), 19: (0, 266), 86: (0, 267), 67: (0, 269), 4: (0, 270), 17: (0, 271), 92: (0, 336)},
  265: {42: (0, 337), 36: (0, 338)},
  266: {27: (1, 160), 21: (1, 160), 31: (1, 160), 24: (1, 160), 26: (1, 160), 25: (1, 160), 36: (1, 160), 17: (1, 160)},
  267: {27: (1, 155), 21: (1, 155), 31: (1, 155), 24: (1, 155), 26: (1, 155), 25: (1, 155), 36: (1, 155), 17: (1, 155)},
  268: {42: (0, 339), 36: (0, 340)},
  269: {27: (1, 156), 21: (1, 156), 31: (1, 156), 24: (0, 341), 26: (1, 156), 25: (1, 156), 36: (1, 156), 17: (1, 156)},
  270: {27: (1, 157), 21: (1, 157), 31: (1, 157), 24: (1, 157), 26: (1, 157), 25: (1, 157), 36: (1, 157), 17: (1, 157)},
  271: {82: (0, 257), 0: (0, 324), 15: (0, 259), 83: (0, 325), 84: (0, 261), 5: (0, 262), 85: (0, 326), 18: (0, 264), 19: (0, 266), 86: (0, 267), 67: (0, 269), 92: (0, 342), 4: (0, 270), 17: (0, 271)},
  272: {22: (1, 55), 17: (1, 55), 5: (1, 55), 23: (1, 55), 18: (1, 55), 33: (1, 55), 93: (1, 55), 15: (1, 55), 34: (1, 55), 13: (1, 55), 4: (1, 55), 29: (1, 55), 0: (1, 55), 11: (1, 55), 7: (1, 55)},
  273: {62: (0, 118), 45: (0, 120), 64: (0, 121), 65: (0, 343), 63: (0, 344)},
  274: {22: (1, 241), 17: (1, 241), 5: (1, 241), 23: (1, 241), 18: (1, 241), 33: (1, 241), 15: (1, 241), 34: (1, 241), 13: (1, 241), 4: (1, 241), 29: (1, 241), 0: (1, 241), 11: (1, 241), 7: (1, 241)},
  275: {22: (1, 242), 17: (1, 242), 5: (1, 242), 23: (1, 242), 18: (1, 242), 33: (1, 242), 15: (1, 242), 34: (1, 242), 13: (1, 242), 4: (1, 242), 29: (1, 242), 0: (1, 242), 11: (1, 242), 7: (1, 242)},
  276: {42: (1, 63), 5: (1, 63)},
  277: {7: (0, 345), 94: (0, 346), 93: (0, 347)},
  278: {65: (0, 348), 62: (0, 118), 45: (0, 120)},
  279: {22: (1, 44), 17: (1, 44), 5: (1, 44), 23: (1, 44), 18: (1, 44), 33: (1, 44), 15: (1, 44), 34: (1, 44), 13: (1, 44), 4: (1, 44), 29: (1, 44), 0: (1, 44), 11: (1, 44), 7: (1, 44)},
  280: {0: (0, 104), 19: (0, 52), 15: (0, 53), 18: (0, 55), 50: (0, 56), 49: (0, 107), 4: (0, 57), 17: (0, 58), 61: (0, 349), 51: (0, 59), 7: (0, 350)},
  281: {21: (1, 65), 31: (1, 65), 22: (1, 65), 17: (1, 65), 5: (1, 65), 18: (1, 65), 33: (1, 65), 24: (1, 65), 26: (1, 65), 25: (1, 65), 15: (1, 65), 27: (1, 65), 13: (1, 65), 4: (1, 65), 29: (1, 65), 0: (1, 65), 11: (1, 65), 7: (1, 65)},
  282: {0: (0, 104), 19: (0, 52), 15: (0, 53), 18: (0, 55), 50: (0, 56), 49: (0, 107), 4: (0, 57), 17: (0, 58), 61: (0, 351), 51: (0, 59)},
  283: {27: (1, 247), 21: (1, 247)},
  284: {27: (1, 253), 21: (1, 253)},
  285: {12: (0, 13), 0: (0, 1), 5: (0, 6), 4: (0, 67), 15: (0, 16), 16: (0, 17), 10: (0, 11), 18: (0, 19), 17: (0, 18), 19: (0, 20), 20: (0, 21), 2: (0, 352)},
  286: {27: (1, 251), 21: (1, 251)},
  287: {21: (1, 200), 22: (1, 200), 5: (1, 200), 23: (1, 200), 18: (1, 200), 24: (1, 200), 26: (1, 200), 25: (1, 200), 15: (1, 200), 27: (1, 200), 28: (1, 200), 4: (1, 200), 29: (1, 200), 30: (1, 200), 11: (1, 200), 17: (1, 200), 7: (1, 200), 31: (1, 200), 32: (1, 200), 33: (1, 200), 34: (1, 200), 35: (1, 200), 13: (1, 200), 0: (1, 200), 36: (1, 200)},
  288: {0: (0, 353)},
  289: {21: (1, 196), 22: (1, 196), 5: (1, 196), 23: (1, 196), 18: (1, 196), 24: (1, 196), 26: (1, 196), 25: (1, 196), 15: (1, 196), 27: (1, 196), 28: (1, 196), 4: (1, 196), 29: (1, 196), 30: (1, 196), 11: (1, 196), 17: (1, 196), 7: (1, 196), 31: (1, 196), 32: (1, 196), 33: (1, 196), 34: (1, 196), 35: (1, 196), 13: (1, 196), 0: (1, 196), 36: (1, 196)},
  290: {21: (1, 199), 22: (1, 199), 5: (1, 199), 23: (1, 199), 18: (1, 199), 24: (1, 199), 26: (1, 199), 25: (1, 199), 15: (1, 199), 27: (1, 199), 28: (1, 199), 4: (1, 199), 29: (1, 199), 30: (1, 199), 11: (1, 199), 17: (1, 199), 7: (1, 199), 31: (1, 199), 32: (1, 199), 33: (1, 199), 34: (1, 199), 35: (1, 199), 13: (1, 199), 0: (1, 199), 36: (1, 199)},
  291: {0: (0, 354)},
  292: {7: (0, 355), 0: (0, 356)},
  293: {7: (0, 357), 0: (0, 358)},
  294: {21: (1, 206), 22: (1, 206), 5: (1, 206), 23: (1, 206), 18: (1, 206), 24: (1, 206), 26: (1, 206), 25: (1, 206), 15: (1, 206), 27: (1, 206), 28: (1, 206), 4: (1, 206), 29: (1, 206), 30: (1, 206), 11: (1, 206), 17: (1, 206), 7: (1, 206), 31: (1, 206), 32: (1, 206), 33: (1, 206), 34: (1, 206), 35: (1, 206), 13: (1, 206), 0: (1, 206), 36: (1, 206)},
  295: {0: (0, 359)},
  296: {38: (0, 360)},
  297: {0: (0, 361), 7: (0, 362)},
  298: {32: (0, 363)},
  299: {30: (1, 17), 32: (1, 17)},
  300: {32: (0, 364)},
  301: {30: (1, 16), 32: (1, 16)},
  302: {27: (1, 137), 21: (1, 137), 31: (1, 137), 24: (1, 137), 25: (1, 137), 26: (1, 137), 36: (1, 137), 17: (1, 137)},
  303: {27: (1, 144), 21: (1, 144), 31: (1, 144), 24: (1, 144), 25: (1, 144), 26: (1, 144), 36: (1, 144), 17: (1, 144)},
  304: {27: (1, 139), 21: (1, 139), 31: (1, 139), 24: (1, 139), 25: (1, 139), 26: (1, 139), 36: (1, 139), 17: (1, 139)},
  305: {27: (1, 138), 21: (1, 138), 31: (1, 138), 24: (1, 138), 25: (1, 138), 26: (1, 138), 36: (1, 138), 17: (1, 138)},
  306: {27: (1, 136), 21: (1, 136), 31: (1, 136), 24: (1, 136), 25: (1, 136), 26: (1, 136), 36: (1, 136), 17: (1, 136)},
  307: {27: (1, 142), 21: (1, 142), 31: (1, 142), 24: (1, 142), 25: (1, 142), 26: (1, 142), 36: (1, 142), 17: (1, 142)},
  308: {27: (1, 147), 21: (1, 147), 31: (1, 147), 24: (1, 147), 25: (1, 147), 26: (1, 147), 36: (1, 147), 17: (1, 147)},
  309: {27: (1, 130), 21: (1, 130), 31: (1, 130), 24: (1, 130), 25: (1, 130), 26: (1, 130), 36: (1, 130), 17: (1, 130), 37: (0, 22), 7: (0, 23), 38: (0, 25)},
  310: {27: (1, 131), 21: (1, 131), 31: (1, 131), 24: (1, 131), 25: (1, 131), 26: (1, 131), 36: (1, 131), 17: (1, 131)},
  311: {27: (1, 145), 21: (1, 145), 31: (1, 145), 24: (1, 145), 25: (1, 145), 26: (1, 145), 36: (1, 145), 17: (1, 145)},
  312: {27: (1, 129), 21: (1, 129), 31: (1, 129), 24: (1, 129), 25: (1, 129), 26: (1, 129), 36: (1, 129), 17: (1, 129)},
  313: {27: (1, 143), 21: (1, 143), 31: (1, 143), 24: (1, 143), 25: (1, 143), 26: (1, 143), 36: (1, 143), 17: (1, 143)},
  314: {21: (1, 184), 22: (1, 184), 5: (1, 184), 23: (1, 184), 18: (1, 184), 24: (1, 184), 15: (1, 184), 25: (1, 184), 26: (1, 184), 27: (1, 184), 28: (1, 184), 4: (1, 184), 29: (1, 184), 30: (1, 184), 11: (1, 184), 7: (1, 184), 17: (1, 184), 31: (1, 184), 32: (1, 184), 33: (1, 184), 34: (1, 184), 35: (1, 184), 13: (1, 184), 0: (1, 184), 36: (1, 184)},
  315: {27: (1, 146), 21: (1, 146), 31: (1, 146), 24: (1, 146), 25: (1, 146), 26: (1, 146), 36: (1, 146), 17: (1, 146)},
  316: {27: (1, 141), 21: (1, 141), 31: (1, 141), 24: (1, 141), 25: (1, 141), 26: (1, 141), 36: (1, 141), 17: (1, 141)},
  317: {27: (1, 72), 21: (1, 72), 31: (1, 72), 24: (1, 72), 25: (1, 72), 26: (1, 72), 36: (1, 72), 17: (1, 72)},
  318: {7: (0, 365), 17: (0, 176), 0: (0, 240), 71: (0, 241), 5: (0, 6), 72: (0, 179), 10: (0, 242), 19: (0, 182), 15: (0, 183), 4: (0, 184), 18: (0, 185), 73: (0, 186), 81: (0, 366), 95: (0, 367)},
  319: {21: (0, 368), 27: (0, 369)},
  320: {27: (1, 75), 21: (1, 75), 31: (1, 75), 24: (1, 75), 25: (1, 75), 26: (1, 75), 36: (1, 75), 17: (1, 75)},
  321: {21: (1, 182), 22: (1, 182), 5: (1, 182), 23: (1, 182), 18: (1, 182), 24: (1, 182), 15: (1, 182), 25: (1, 182), 26: (1, 182), 27: (1, 182), 28: (1, 182), 4: (1, 182), 29: (1, 182), 30: (1, 182), 11: (1, 182), 7: (1, 182), 17: (1, 182), 31: (1, 182), 32: (1, 182), 33: (1, 182), 34: (1, 182), 35: (1, 182), 13: (1, 182), 0: (1, 182), 36: (1, 182)},
  322: {4: (0, 370), 0: (0, 76), 15: (0, 259), 86: (0, 371), 82: (0, 372), 44: (0, 373), 67: (0, 374), 96: (0, 375), 19: (0, 376)},
  323: {97: (0, 377), 27: (0, 378), 21: (0, 379)},
  324: {27: (1, 150), 21: (1, 150), 31: (1, 150), 24: (0, 322), 26: (1, 150), 25: (1, 150), 36: (1, 150), 17: (1, 150), 37: (0, 22), 7: (0, 23), 38: (0, 25)},
  325: {27: (1, 151), 21: (1, 151), 31: (1, 151), 24: (0, 328), 26: (1, 151), 25: (1, 151), 36: (1, 151), 17: (1, 151)},
  326: {27: (1, 149), 21: (1, 149), 31: (0, 64), 24: (0, 332), 26: (0, 335), 25: (0, 334), 36: (1, 149), 17: (0, 60), 52: (0, 331)},
  327: {27: (1, 160), 21: (0, 380), 31: (1, 160), 24: (1, 160), 26: (1, 160), 25: (1, 160), 36: (1, 160), 17: (1, 160)},
  328: {4: (0, 370), 0: (0, 76), 15: (0, 259), 86: (0, 371), 82: (0, 372), 96: (0, 381), 67: (0, 374), 44: (0, 382), 19: (0, 376)},
  329: {36: (0, 383), 42: (0, 384)},
  330: {42: (0, 385), 36: (0, 386)},
  331: {4: (0, 370), 0: (0, 387), 15: (0, 259), 5: (0, 262), 98: (0, 388), 86: (0, 371), 82: (0, 372), 96: (0, 389), 67: (0, 374), 19: (0, 376), 83: (0, 390)},
  332: {44: (0, 391)},
  333: {22: (1, 54), 17: (1, 54), 5: (1, 54), 23: (1, 54), 18: (1, 54), 33: (1, 54), 93: (1, 54), 15: (1, 54), 34: (1, 54), 13: (1, 54), 4: (1, 54), 29: (1, 54), 0: (1, 54), 11: (1, 54), 7: (1, 54)},
  334: {44: (0, 392)},
  335: {44: (0, 393)},
  336: {27: (1, 174), 21: (1, 174), 31: (1, 174), 24: (1, 174), 26: (1, 174), 25: (1, 174), 36: (1, 174), 17: (1, 174)},
  337: {82: (0, 257), 0: (0, 258), 15: (0, 259), 83: (0, 260), 84: (0, 261), 5: (0, 262), 85: (0, 394), 18: (0, 264), 7: (0, 395), 19: (0, 266), 86: (0, 267), 67: (0, 269), 4: (0, 270), 17: (0, 271)},
  338: {22: (1, 57), 17: (1, 57), 5: (1, 57), 23: (1, 57), 18: (1, 57), 33: (1, 57), 93: (1, 57), 15: (1, 57), 34: (1, 57), 13: (1, 57), 4: (1, 57), 29: (1, 57), 0: (1, 57), 11: (1, 57), 7: (1, 57)},
  339: {82: (0, 257), 0: (0, 258), 15: (0, 259), 83: (0, 260), 84: (0, 261), 5: (0, 262), 85: (0, 396), 18: (0, 264), 19: (0, 266), 86: (0, 267), 7: (0, 397), 67: (0, 269), 4: (0, 270), 17: (0, 271)},
  340: {22: (1, 60), 17: (1, 60), 5: (1, 60), 23: (1, 60), 18: (1, 60), 33: (1, 60), 93: (1, 60), 15: (1, 60), 34: (1, 60), 13: (1, 60), 4: (1, 60), 29: (1, 60), 0: (1, 60), 11: (1, 60), 7: (1, 60)},
  341: {44: (0, 398)},
  342: {27: (1, 167), 21: (1, 167), 31: (1, 167), 24: (1, 167), 26: (1, 167), 25: (1, 167), 36: (1, 167), 17: (1, 167)},
  343: {22: (1, 243), 17: (1, 243), 5: (1, 243), 23: (1, 243), 18: (1, 243), 33: (1, 243), 15: (1, 243), 34: (1, 243), 13: (1, 243), 4: (1, 243), 29: (1, 243), 0: (1, 243), 11: (1, 243), 7: (1, 243)},
  344: {22: (1, 240), 17: (1, 240), 5: (1, 240), 23: (1, 240), 18: (1, 240), 33: (1, 240), 15: (1, 240), 34: (1, 240), 13: (1, 240), 4: (1, 240), 29: (1, 240), 0: (1, 240), 11: (1, 240), 7: (1, 240)},
  345: {62: (0, 118), 45: (0, 120), 65: (0, 399), 93: (0, 400)},
  346: {93: (0, 401), 7: (0, 402)},
  347: {22: (1, 51), 17: (1, 51), 5: (1, 51), 23: (1, 51), 18: (1, 51), 33: (1, 51), 15: (1, 51), 34: (1, 51), 13: (1, 51), 4: (1, 51), 29: (1, 51), 0: (1, 51), 11: (1, 51), 7: (1, 51)},
  348: {94: (0, 403), 7: (0, 404), 93: (0, 405)},
  349: {27: (1, 246), 21: (1, 246)},
  350: {0: (0, 104), 19: (0, 52), 15: (0, 53), 18: (0, 55), 50: (0, 56), 49: (0, 107), 4: (0, 57), 17: (0, 58), 61: (0, 406), 51: (0, 59)},
  351: {27: (1, 248), 21: (1, 248)},
  352: {27: (1, 252), 21: (1, 252)},
  353: {21: (1, 195), 22: (1, 195), 5: (1, 195), 23: (1, 195), 18: (1, 195), 24: (1, 195), 26: (1, 195), 25: (1, 195), 15: (1, 195), 27: (1, 195), 28: (1, 195), 4: (1, 195), 29: (1, 195), 30: (1, 195), 11: (1, 195), 17: (1, 195), 7: (1, 195), 31: (1, 195), 32: (1, 195), 33: (1, 195), 34: (1, 195), 35: (1, 195), 13: (1, 195), 0: (1, 195), 36: (1, 195)},
  354: {21: (1, 193), 22: (1, 193), 5: (1, 193), 23: (1, 193), 18: (1, 193), 24: (1, 193), 26: (1, 193), 25: (1, 193), 15: (1, 193), 27: (1, 193), 28: (1, 193), 4: (1, 193), 29: (1, 193), 30: (1, 193), 11: (1, 193), 17: (1, 193), 7: (1, 193), 31: (1, 193), 32: (1, 193), 33: (1, 193), 34: (1, 193), 35: (1, 193), 13: (1, 193), 0: (1, 193), 36: (1, 193)},
  355: {0: (0, 407)},
  356: {21: (1, 192), 22: (1, 192), 5: (1, 192), 23: (1, 192), 18: (1, 192), 24: (1, 192), 26: (1, 192), 25: (1, 192), 15: (1, 192), 27: (1, 192), 28: (1, 192), 4: (1, 192), 29: (1, 192), 30: (1, 192), 11: (1, 192), 17: (1, 192), 7: (1, 192), 31: (1, 192), 32: (1, 192), 33: (1, 192), 34: (1, 192), 35: (1, 192), 13: (1, 192), 0: (1, 192), 36: (1, 192)},
  357: {0: (0, 408)},
  358: {21: (1, 194), 22: (1, 194), 5: (1, 194), 23: (1, 194), 18: (1, 194), 24: (1, 194), 26: (1, 194), 25: (1, 194), 15: (1, 194), 27: (1, 194), 28: (1, 194), 4: (1, 194), 29: (1, 194), 30: (1, 194), 11: (1, 194), 17: (1, 194), 7: (1, 194), 31: (1, 194), 32: (1, 194), 33: (1, 194), 34: (1, 194), 35: (1, 194), 13: (1, 194), 0: (1, 194), 36: (1, 194)},
  359: {21: (1, 203), 22: (1, 203), 5: (1, 203), 23: (1, 203), 18: (1, 203), 24: (1, 203), 26: (1, 203), 25: (1, 203), 15: (1, 203), 27: (1, 203), 28: (1, 203), 4: (1, 203), 29: (1, 203), 30: (1, 203), 11: (1, 203), 17: (1, 203), 7: (1, 203), 31: (1, 203), 32: (1, 203), 33: (1, 203), 34: (1, 203), 35: (1, 203), 13: (1, 203), 0: (1, 203), 36: (1, 203)},
  360: {0: (0, 409), 7: (0, 410)},
  361: {21: (1, 207), 22: (1, 207), 5: (1, 207), 23: (1, 207), 18: (1, 207), 24: (1, 207), 26: (1, 207), 25: (1, 207), 15: (1, 207), 27: (1, 207), 28: (1, 207), 4: (1, 207), 29: (1, 207), 30: (1, 207), 11: (1, 207), 17: (1, 207), 7: (1, 207), 31: (1, 207), 32: (1, 207), 33: (1, 207), 34: (1, 207), 35: (1, 207), 13: (1, 207), 0: (1, 207), 36: (1, 207)},
  362: {0: (0, 411)},
  363: {12: (0, 13), 0: (0, 1), 88: (0, 412), 5: (0, 87), 4: (0, 67), 58: (0, 299), 15: (0, 16), 16: (0, 17), 10: (0, 11), 18: (0, 19), 17: (0, 18), 2: (0, 301), 19: (0, 20), 20: (0, 21)},
  364: {12: (0, 13), 0: (0, 1), 5: (0, 87), 4: (0, 67), 88: (0, 413), 58: (0, 299), 15: (0, 16), 16: (0, 17), 10: (0, 11), 18: (0, 19), 17: (0, 18), 2: (0, 301), 19: (0, 20), 20: (0, 21)},
  365: {17: (0, 176), 0: (0, 240), 71: (0, 241), 5: (0, 6), 72: (0, 179), 10: (0, 242), 95: (0, 414), 19: (0, 182), 15: (0, 183), 4: (0, 184), 18: (0, 185), 81: (0, 415), 73: (0, 186)},
  366: {27: (1, 256), 21: (1, 256)},
  367: {21: (0, 416)},
  368: {27: (1, 76), 21: (1, 76), 31: (1, 76), 24: (1, 76), 25: (1, 76), 26: (1, 76), 36: (1, 76), 17: (1, 76)},
  369: {17: (0, 176), 0: (0, 240), 71: (0, 241), 5: (0, 6), 72: (0, 179), 10: (0, 242), 19: (0, 182), 15: (0, 183), 4: (0, 184), 18: (0, 185), 7: (0, 417), 95: (0, 418), 73: (0, 186), 81: (0, 419)},
  370: {27: (1, 163), 21: (1, 163), 31: (1, 163), 24: (1, 163), 26: (1, 163), 25: (1, 163), 36: (1, 163), 17: (1, 163)},
  371: {27: (1, 161), 21: (1, 161), 31: (1, 161), 24: (1, 161), 26: (1, 161), 25: (1, 161), 36: (1, 161), 17: (1, 161)},
  372: {27: (1, 164), 21: (1, 164), 31: (1, 164), 24: (1, 164), 26: (1, 164), 25: (1, 164), 36: (1, 164), 17: (1, 164)},
  373: {27: (1, 169), 21: (1, 169), 31: (1, 169), 24: (1, 169), 26: (1, 169), 25: (1, 169), 36: (1, 169), 17: (1, 169)},
  374: {27: (1, 162), 21: (1, 162), 31: (1, 162), 24: (0, 341), 26: (1, 162), 25: (1, 162), 36: (1, 162), 17: (1, 162)},
  375: {27: (1, 168), 21: (1, 168), 31: (1, 168), 24: (1, 168), 26: (1, 168), 25: (1, 168), 36: (1, 168), 17: (1, 168)},
  376: {27: (1, 165), 21: (1, 165), 31: (1, 165), 24: (1, 165), 26: (1, 165), 25: (1, 165), 36: (1, 165), 17: (1, 165)},
  377: {27: (0, 420), 21: (0, 421)},
  378: {82: (0, 257), 0: (0, 324), 15: (0, 259), 83: (0, 325), 84: (0, 261), 5: (0, 262), 85: (0, 326), 18: (0, 264), 92: (0, 422), 7: (0, 423), 19: (0, 266), 86: (0, 267), 95: (0, 424), 67: (0, 269), 4: (0, 270), 17: (0, 271)},
  379: {27: (1, 80), 21: (1, 80), 31: (1, 80), 24: (1, 80), 26: (1, 80), 25: (1, 80), 36: (1, 80), 17: (1, 80)},
  380: {27: (1, 77), 21: (1, 77), 31: (1, 77), 24: (1, 77), 26: (1, 77), 25: (1, 77), 36: (1, 77), 17: (1, 77)},
  381: {27: (1, 166), 21: (1, 166), 31: (1, 166), 24: (1, 166), 26: (1, 166), 25: (1, 166), 36: (1, 166), 17: (1, 166)},
  382: {27: (1, 175), 21: (1, 175), 31: (1, 175), 24: (1, 175), 26: (1, 175), 25: (1, 175), 36: (1, 175), 17: (1, 175)},
  383: {27: (1, 177), 21: (1, 177), 31: (1, 177), 24: (1, 177), 26: (1, 177), 25: (1, 177), 36: (1, 177), 17: (1, 177)},
  384: {82: (0, 257), 0: (0, 258), 15: (0, 259), 83: (0, 260), 84: (0, 261), 5: (0, 262), 85: (0, 425), 18: (0, 264), 19: (0, 266), 86: (0, 267), 67: (0, 269), 4: (0, 270), 7: (0, 426), 17: (0, 271)},
  385: {82: (0, 257), 0: (0, 258), 15: (0, 259), 83: (0, 260), 84: (0, 261), 5: (0, 262), 85: (0, 427), 18: (0, 264), 19: (0, 266), 86: (0, 267), 67: (0, 269), 4: (0, 270), 7: (0, 428), 17: (0, 271)},
  386: {27: (1, 176), 21: (1, 176), 31: (1, 176), 24: (1, 176), 26: (1, 176), 25: (1, 176), 36: (1, 176), 17: (1, 176)},
  387: {27: (1, 153), 21: (1, 153), 31: (1, 153), 24: (1, 153), 26: (1, 153), 25: (1, 153), 36: (1, 153), 17: (1, 153), 37: (0, 22), 7: (0, 23), 38: (0, 25)},
  388: {27: (1, 172), 21: (1, 172), 31: (1, 172), 24: (1, 172), 26: (1, 172), 25: (1, 172), 36: (1, 172), 17: (1, 172)},
  389: {27: (1, 152), 21: (1, 152), 31: (1, 152), 24: (1, 152), 26: (1, 152), 25: (1, 152), 36: (1, 152), 17: (1, 152)},
  390: {27: (1, 154), 21: (1, 154), 31: (1, 154), 24: (1, 154), 26: (1, 154), 25: (1, 154), 36: (1, 154), 17: (1, 154)},
  391: {27: (1, 171), 21: (1, 171), 31: (1, 171), 24: (1, 171), 26: (1, 171), 25: (1, 171), 36: (1, 171), 17: (1, 171)},
  392: {27: (1, 173), 21: (1, 173), 31: (1, 173), 24: (1, 173), 26: (1, 173), 25: (1, 173), 36: (1, 173), 17: (1, 173)},
  393: {27: (1, 170), 21: (1, 170), 31: (1, 170), 24: (1, 170), 26: (1, 170), 25: (1, 170), 36: (1, 170), 17: (1, 170)},
  394: {36: (0, 429), 52: (0, 331), 24: (0, 332), 17: (0, 60), 25: (0, 334), 26: (0, 335), 31: (0, 64)},
  395: {82: (0, 257), 0: (0, 258), 15: (0, 259), 83: (0, 260), 84: (0, 261), 5: (0, 262), 85: (0, 430), 18: (0, 264), 19: (0, 266), 86: (0, 267), 67: (0, 269), 4: (0, 270), 17: (0, 271)},
  396: {17: (0, 60), 52: (0, 331), 24: (0, 332), 25: (0, 334), 26: (0, 335), 31: (0, 64), 36: (0, 431)},
  397: {82: (0, 257), 0: (0, 258), 15: (0, 259), 83: (0, 260), 84: (0, 261), 5: (0, 262), 85: (0, 432), 18: (0, 264), 19: (0, 266), 86: (0, 267), 67: (0, 269), 4: (0, 270), 17: (0, 271)},
  398: {27: (1, 208), 21: (1, 208), 31: (1, 208), 24: (1, 208), 26: (1, 208), 25: (1, 208), 36: (1, 208), 17: (1, 208)},
  399: {93: (1, 244), 7: (1, 244)},
  400: {22: (1, 48), 17: (1, 48), 5: (1, 48), 23: (1, 48), 18: (1, 48), 33: (1, 48), 15: (1, 48), 34: (1, 48), 13: (1, 48), 4: (1, 48), 29: (1, 48), 0: (1, 48), 11: (1, 48), 7: (1, 48)},
  401: {22: (1, 50), 17: (1, 50), 5: (1, 50), 23: (1, 50), 18: (1, 50), 33: (1, 50), 15: (1, 50), 34: (1, 50), 13: (1, 50), 4: (1, 50), 29: (1, 50), 0: (1, 50), 11: (1, 50), 7: (1, 50)},
  402: {65: (0, 433), 62: (0, 118), 45: (0, 120), 93: (0, 434)},
  403: {93: (0, 435), 7: (0, 436)},
  404: {62: (0, 118), 45: (0, 120), 65: (0, 399), 93: (0, 437)},
  405: {22: (1, 47), 17: (1, 47), 5: (1, 47), 23: (1, 47), 18: (1, 47), 33: (1, 47), 15: (1, 47), 34: (1, 47), 13: (1, 47), 4: (1, 47), 29: (1, 47), 0: (1, 47), 11: (1, 47), 7: (1, 47)},
  406: {27: (1, 249), 21: (1, 249)},
  407: {21: (1, 205), 22: (1, 205), 5: (1, 205), 23: (1, 205), 18: (1, 205), 24: (1, 205), 26: (1, 205), 25: (1, 205), 15: (1, 205), 27: (1, 205), 28: (1, 205), 4: (1, 205), 29: (1, 205), 30: (1, 205), 11: (1, 205), 17: (1, 205), 7: (1, 205), 31: (1, 205), 32: (1, 205), 33: (1, 205), 34: (1, 205), 35: (1, 205), 13: (1, 205), 0: (1, 205), 36: (1, 205)},
  408: {21: (1, 198), 22: (1, 198), 5: (1, 198), 23: (1, 198), 18: (1, 198), 24: (1, 198), 26: (1, 198), 25: (1, 198), 15: (1, 198), 27: (1, 198), 28: (1, 198), 4: (1, 198), 29: (1, 198), 30: (1, 198), 11: (1, 198), 17: (1, 198), 7: (1, 198), 31: (1, 198), 32: (1, 198), 33: (1, 198), 34: (1, 198), 35: (1, 198), 13: (1, 198), 0: (1, 198), 36: (1, 198)},
  409: {21: (1, 204), 22: (1, 204), 5: (1, 204), 23: (1, 204), 18: (1, 204), 24: (1, 204), 26: (1, 204), 25: (1, 204), 15: (1, 204), 27: (1, 204), 28: (1, 204), 4: (1, 204), 29: (1, 204), 30: (1, 204), 11: (1, 204), 17: (1, 204), 7: (1, 204), 31: (1, 204), 32: (1, 204), 33: (1, 204), 34: (1, 204), 35: (1, 204), 13: (1, 204), 0: (1, 204), 36: (1, 204)},
  410: {0: (0, 438)},
  411: {21: (1, 197), 22: (1, 197), 5: (1, 197), 23: (1, 197), 18: (1, 197), 24: (1, 197), 26: (1, 197), 25: (1, 197), 15: (1, 197), 27: (1, 197), 28: (1, 197), 4: (1, 197), 29: (1, 197), 30: (1, 197), 11: (1, 197), 17: (1, 197), 7: (1, 197), 31: (1, 197), 32: (1, 197), 33: (1, 197), 34: (1, 197), 35: (1, 197), 13: (1, 197), 0: (1, 197), 36: (1, 197)},
  412: {32: (0, 439)},
  413: {30: (0, 440)},
  414: {21: (0, 441)},
  415: {27: (1, 257), 21: (1, 257)},
  416: {27: (1, 73), 21: (1, 73), 31: (1, 73), 24: (1, 73), 25: (1, 73), 26: (1, 73), 36: (1, 73), 17: (1, 73)},
  417: {17: (0, 176), 0: (0, 240), 71: (0, 241), 5: (0, 6), 72: (0, 179), 10: (0, 242), 19: (0, 182), 15: (0, 183), 4: (0, 184), 18: (0, 185), 95: (0, 442), 81: (0, 443), 73: (0, 186)},
  418: {21: (0, 444)},
  419: {27: (1, 255), 21: (1, 255)},
  420: {82: (0, 257), 0: (0, 324), 15: (0, 259), 83: (0, 325), 84: (0, 261), 5: (0, 262), 7: (0, 445), 85: (0, 326), 18: (0, 264), 19: (0, 266), 86: (0, 267), 67: (0, 269), 4: (0, 270), 92: (0, 446), 17: (0, 271), 95: (0, 447)},
  421: {27: (1, 82), 21: (1, 82), 31: (1, 82), 24: (1, 82), 26: (1, 82), 25: (1, 82), 36: (1, 82), 17: (1, 82)},
  422: {27: (1, 259), 21: (1, 259)},
  423: {82: (0, 257), 0: (0, 324), 15: (0, 259), 83: (0, 325), 84: (0, 261), 5: (0, 262), 92: (0, 448), 85: (0, 326), 18: (0, 264), 95: (0, 449), 19: (0, 266), 86: (0, 267), 67: (0, 269), 4: (0, 270), 17: (0, 271)},
  424: {21: (0, 450)},
  425: {36: (0, 451), 52: (0, 331), 24: (0, 332), 17: (0, 60), 25: (0, 334), 26: (0, 335), 31: (0, 64)},
  426: {82: (0, 257), 0: (0, 258), 15: (0, 259), 83: (0, 260), 84: (0, 261), 5: (0, 262), 85: (0, 452), 18: (0, 264), 19: (0, 266), 86: (0, 267), 67: (0, 269), 4: (0, 270), 17: (0, 271)},
  427: {52: (0, 331), 24: (0, 332), 17: (0, 60), 25: (0, 334), 26: (0, 335), 31: (0, 64), 36: (0, 453)},
  428: {82: (0, 257), 0: (0, 258), 15: (0, 259), 83: (0, 260), 84: (0, 261), 5: (0, 262), 85: (0, 454), 18: (0, 264), 19: (0, 266), 86: (0, 267), 67: (0, 269), 4: (0, 270), 17: (0, 271)},
  429: {22: (1, 59), 17: (1, 59), 5: (1, 59), 23: (1, 59), 18: (1, 59), 33: (1, 59), 93: (1, 59), 15: (1, 59), 34: (1, 59), 13: (1, 59), 4: (1, 59), 29: (1, 59), 0: (1, 59), 11: (1, 59), 7: (1, 59)},
  430: {36: (0, 455), 24: (0, 332), 52: (0, 331), 17: (0, 60), 25: (0, 334), 26: (0, 335), 31: (0, 64)},
  431: {22: (1, 56), 17: (1, 56), 5: (1, 56), 23: (1, 56), 18: (1, 56), 33: (1, 56), 93: (1, 56), 15: (1, 56), 34: (1, 56), 13: (1, 56), 4: (1, 56), 29: (1, 56), 0: (1, 56), 11: (1, 56), 7: (1, 56)},
  432: {31: (0, 64), 52: (0, 331), 24: (0, 332), 17: (0, 60), 25: (0, 334), 26: (0, 335), 36: (0, 456)},
  433: {93: (1, 245), 7: (1, 245)},
  434: {22: (1, 49), 17: (1, 49), 5: (1, 49), 23: (1, 49), 18: (1, 49), 33: (1, 49), 15: (1, 49), 34: (1, 49), 13: (1, 49), 4: (1, 49), 29: (1, 49), 0: (1, 49), 11: (1, 49), 7: (1, 49)},
  435: {22: (1, 52), 17: (1, 52), 5: (1, 52), 23: (1, 52), 18: (1, 52), 33: (1, 52), 15: (1, 52), 34: (1, 52), 13: (1, 52), 4: (1, 52), 29: (1, 52), 0: (1, 52), 11: (1, 52), 7: (1, 52)},
  436: {65: (0, 433), 62: (0, 118), 45: (0, 120), 93: (0, 457)},
  437: {22: (1, 53), 17: (1, 53), 5: (1, 53), 23: (1, 53), 18: (1, 53), 33: (1, 53), 15: (1, 53), 34: (1, 53), 13: (1, 53), 4: (1, 53), 29: (1, 53), 0: (1, 53), 11: (1, 53), 7: (1, 53)},
  438: {21: (1, 202), 22: (1, 202), 5: (1, 202), 23: (1, 202), 18: (1, 202), 24: (1, 202), 26: (1, 202), 25: (1, 202), 15: (1, 202), 27: (1, 202), 28: (1, 202), 4: (1, 202), 29: (1, 202), 30: (1, 202), 11: (1, 202), 17: (1, 202), 7: (1, 202), 31: (1, 202), 32: (1, 202), 33: (1, 202), 34: (1, 202), 35: (1, 202), 13: (1, 202), 0: (1, 202), 36: (1, 202)},
  439: {12: (0, 13), 0: (0, 1), 5: (0, 87), 4: (0, 67), 58: (0, 299), 15: (0, 16), 16: (0, 17), 88: (0, 458), 10: (0, 11), 18: (0, 19), 17: (0, 18), 2: (0, 301), 19: (0, 20), 20: (0, 21)},
  440: {35: (1, 15), 27: (1, 15)},
  441: {27: (1, 74), 21: (1, 74), 31: (1, 74), 24: (1, 74), 25: (1, 74), 26: (1, 74), 36: (1, 74), 17: (1, 74)},
  442: {21: (0, 459)},
  443: {27: (1, 254), 21: (1, 254)},
  444: {27: (1, 71), 21: (1, 71), 31: (1, 71), 24: (1, 71), 25: (1, 71), 26: (1, 71), 36: (1, 71), 17: (1, 71)},
  445: {82: (0, 257), 0: (0, 324), 15: (0, 259), 83: (0, 325), 84: (0, 261), 5: (0, 262), 85: (0, 326), 18: (0, 264), 95: (0, 460), 19: (0, 266), 86: (0, 267), 92: (0, 461), 67: (0, 269), 4: (0, 270), 17: (0, 271)},
  446: {27: (1, 260), 21: (1, 260)},
  447: {21: (0, 462)},
  448: {27: (1, 258), 21: (1, 258)},
  449: {21: (0, 463)},
  450: {27: (1, 81), 21: (1, 81), 31: (1, 81), 24: (1, 81), 26: (1, 81), 25: (1, 81), 36: (1, 81), 17: (1, 81)},
  451: {27: (1, 179), 21: (1, 179), 31: (1, 179), 24: (1, 179), 26: (1, 179), 25: (1, 179), 36: (1, 179), 17: (1, 179)},
  452: {36: (0, 464), 52: (0, 331), 24: (0, 332), 17: (0, 60), 25: (0, 334), 26: (0, 335), 31: (0, 64)},
  453: {27: (1, 178), 21: (1, 178), 31: (1, 178), 24: (1, 178), 26: (1, 178), 25: (1, 178), 36: (1, 178), 17: (1, 178)},
  454: {36: (0, 465), 52: (0, 331), 24: (0, 332), 17: (0, 60), 25: (0, 334), 26: (0, 335), 31: (0, 64)},
  455: {22: (1, 58), 17: (1, 58), 5: (1, 58), 23: (1, 58), 18: (1, 58), 33: (1, 58), 93: (1, 58), 15: (1, 58), 34: (1, 58), 13: (1, 58), 4: (1, 58), 29: (1, 58), 0: (1, 58), 11: (1, 58), 7: (1, 58)},
  456: {22: (1, 61), 17: (1, 61), 5: (1, 61), 23: (1, 61), 18: (1, 61), 33: (1, 61), 93: (1, 61), 15: (1, 61), 34: (1, 61), 13: (1, 61), 4: (1, 61), 29: (1, 61), 0: (1, 61), 11: (1, 61), 7: (1, 61)},
  457: {22: (1, 46), 17: (1, 46), 5: (1, 46), 23: (1, 46), 18: (1, 46), 33: (1, 46), 15: (1, 46), 34: (1, 46), 13: (1, 46), 4: (1, 46), 29: (1, 46), 0: (1, 46), 11: (1, 46), 7: (1, 46)},
  458: {30: (0, 466)},
  459: {27: (1, 70), 21: (1, 70), 31: (1, 70), 24: (1, 70), 25: (1, 70), 26: (1, 70), 36: (1, 70), 17: (1, 70)},
  460: {21: (0, 467)},
  461: {27: (1, 261), 21: (1, 261)},
  462: {27: (1, 78), 21: (1, 78), 31: (1, 78), 24: (1, 78), 26: (1, 78), 25: (1, 78), 36: (1, 78), 17: (1, 78)},
  463: {27: (1, 83), 21: (1, 83), 31: (1, 83), 24: (1, 83), 26: (1, 83), 25: (1, 83), 36: (1, 83), 17: (1, 83)},
  464: {27: (1, 180), 21: (1, 180), 31: (1, 180), 24: (1, 180), 26: (1, 180), 25: (1, 180), 36: (1, 180), 17: (1, 180)},
  465: {27: (1, 181), 21: (1, 181), 31: (1, 181), 24: (1, 181), 26: (1, 181), 25: (1, 181), 36: (1, 181), 17: (1, 181)},
  466: {35: (1, 14), 27: (1, 14)},
  467: {27: (1, 79), 21: (1, 79), 31: (1, 79), 24: (1, 79), 26: (1, 79), 25: (1, 79), 36: (1, 79), 17: (1, 79)},
}
TOKEN_TYPES = (
{0: 'STATE',
 1: 'line',
 2: '_tr_expr',
 3: '__anon_plus_0',
 4: 'NAME',
 5: 'LSQB',
 6: 'table',
 7: '_WS',
 8: 'rulestring_tr',
 9: 'transition',
 10: 'reference',
 11: 'BANG',
 12: '_tr_expr_no_int',
 13: '__ANON_6',
 14: 'comment',
 15: '_VAR_OPEN',
 16: 'tr_operation',
 17: '_NEGATE_LIVE',
 18: '_NEGATE_ALL',
 19: 'range',
 20: 'tr_var',
 21: '_VAR_CLOSE',
 22: '__ANON_5',
 23: '_NORMAL_ARROW',
 24: '_MULT',
 25: '_RROT',
 26: '_LROT',
 27: 'COMMA',
 28: '_PERMUTE',
 29: '_NL',
 30: '_HENSEL_CLOSE',
 31: '_SUBT',
 32: '_HENSEL_SEP',
 33: '$END',
 34: '_HOIST_ARROW',
 35: 'SEMICOLON',
 36: 'RSQB',
 37: 'PLUS',
 38: '__ANON_4',
 39: 'end_bs',
 40: '__anon_plus_1',
 41: '_sep',
 42: 'COLON',
 43: 'EQUAL',
 44: 'INT',
 45: 'COMPASS_DIR',
 46: 'normal_aux',
 47: 'hoist_aux',
 48: '_aux',
 49: '_expr_no_int',
 50: 'operation',
 51: 'var',
 52: '_subt',
 53: '_tr_expr_no_rec',
 54: '_HENSEL_OPEN',
 55: 'tr_state',
 56: 'crange',
 57: 'rulestring_napkin',
 58: 'inline_binding',
 59: 'prefix',
 60: '__ANON_0',
 61: '_expr',
 62: 'cdir_delay',
 63: 'symmetried_aux',
 64: 'SYMMETRY_NAME',
 65: 'auxiliary',
 66: '_auxlist',
 67: 'LEAVE_ALONE',
 68: '_tr_expr_norec_int',
 69: '__anon_star_5',
 70: '__ANON_1',
 71: '_ref_expr_no_int',
 72: 'ref_operation',
 73: 'ref_var',
 74: '__anon_star_2',
 75: 'LPAR',
 76: '_aux_group',
 77: '_expr_no_rec',
 78: '__anon_star_4',
 79: '_expr_norec_int',
 80: '__ANON_3',
 81: '_ref_expr',
 82: 'leave_alone_mult',
 83: 'aux_reference',
 84: 'aux_operation',
 85: '_aux_expr_no_int',
 86: 'aux_var',
 87: '__ANON_2',
 88: '_rs_expr',
 89: '_ref_expr_no_rec',
 90: '_ref_expr_norec_int',
 91: '__anon_star_6',
 92: '_aux_expr',
 93: 'RPAR',
 94: '__anon_star_3',
 95: 'EXTEND_LAST',
 96: '_aux_expr_no_rec',
 97: '__anon_star_7',
 98: '_aux_expr_norec_int'}
)
parse_table.states = {s: {TOKEN_TYPES[t]: (a, RULES[x] if a is Reduce else x) for t, (a, x) in acts.items()}
                      for s, acts in STATES.items()}
parse_table.start_state = 0
parse_table.end_state = 41
class Lark_StandAlone:
  def __init__(self, transformer=None, postlex=None, *, tbl):
     callback = parse_tree_builder.create_callback(transformer=transformer)
     callbacks = {rule: getattr(callback, rule.cb_name or rule.origin, None) for rule in RULES.values()}
     self.parser = _Parser(parse_table, callbacks)
     self.postlex = postlex
     self._tbl = tbl
     self._con_lexer = ContextualLexer()
  def lex(self, stream, tbl):
    return self._con_lexer.lex(stream, tbl)
  def parse(self, stream):
     tokens = self.lex(stream, self._tbl)
     sps = self._con_lexer.set_parser_state
     if self.postlex: tokens = self.postlex.process(tokens)
     return self.parser.parse(tokens, sps)
