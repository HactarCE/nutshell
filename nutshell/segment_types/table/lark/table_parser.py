# The file was automatically generated by Lark v0.6.3
#
#
#   Lark Stand-alone Generator Tool
# ----------------------------------
# Generates a stand-alone LALR(1) parser with a standard lexer
#
# Git:    https://github.com/erezsh/lark
# Author: Erez Shinan (erezshin@gmail.com)
#
#
#    >>> LICENSE
#
#    This tool and its generated code use a separate license from Lark.
#
#    It is licensed under GPLv2 or above.
#
#    If you wish to purchase a commercial license for this tool and its
#    generated code, contact me via email.
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    See <http://www.gnu.org/licenses/>.
#
#


import types
from functools import wraps, partial
from contextlib import contextmanager

Str = type(u'')

def smart_decorator(f, create_decorator):
    if isinstance(f, types.FunctionType):
        return wraps(f)(create_decorator(f, True))

    elif isinstance(f, (type, types.BuiltinFunctionType)):
        return wraps(f)(create_decorator(f, False))

    elif isinstance(f, types.MethodType):
        return wraps(f)(create_decorator(f.__func__, True))

    elif isinstance(f, partial):
        # wraps does not work for partials in 2.7: https://bugs.python.org/issue3445
        return create_decorator(f.__func__, True)

    else:
        return create_decorator(f.__func__.__call__, True)




try:
    from contextlib import suppress     # Python 3
except ImportError:
    @contextmanager
    def suppress(*excs):
        '''Catch and dismiss the provided exception

        >>> x = 'hello'
        >>> with suppress(IndexError):
        ...     x = x[10]
        >>> x
        'hello'
        '''
        try:
            yield
        except excs:
            pass



class Tree(object):
    def __init__(self, data, children, meta=None):
        self.data = data
        self.children = children
        self._meta = meta

    @property
    def meta(self):
        if self._meta is None:
            self._meta = Meta()
        return self._meta

    def __repr__(self):
        return 'Tree(%s, %s)' % (self.data, self.children)

    def _pretty_label(self):
        return self.data

    def _pretty(self, level, indent_str):
        if len(self.children) == 1 and not isinstance(self.children[0], Tree):
            return [ indent_str*level, self._pretty_label(), '\t', '%s' % (self.children[0],), '\n']

        l = [ indent_str*level, self._pretty_label(), '\n' ]
        for n in self.children:
            if isinstance(n, Tree):
                l += n._pretty(level+1, indent_str)
            else:
                l += [ indent_str*(level+1), '%s' % (n,), '\n' ]

        return l

    def pretty(self, indent_str='  '):
        return ''.join(self._pretty(0, indent_str))

class Indenter:
    def __init__(self):
        self.paren_level = 0
        self.indent_level = [0]

    def handle_NL(self, token):
        if self.paren_level > 0:
            return

        yield token

        indent_str = token.rsplit('\n', 1)[1] # Tabs and spaces
        indent = indent_str.count(' ') + indent_str.count('\t') * self.tab_len

        if indent > self.indent_level[-1]:
            self.indent_level.append(indent)
            yield Token.new_borrow_pos(self.INDENT_type, indent_str, token)
        else:
            while indent < self.indent_level[-1]:
                self.indent_level.pop()
                yield Token.new_borrow_pos(self.DEDENT_type, indent_str, token)

            assert indent == self.indent_level[-1], '%s != %s' % (indent, self.indent_level[-1])

    def process(self, stream):
        for token in stream:
            if token.type == self.NL_type:
                for t in self.handle_NL(token):
                    yield t
            else:
                yield token

            if token.type in self.OPEN_PAREN_types:
                self.paren_level += 1
            elif token.type in self.CLOSE_PAREN_types:
                self.paren_level -= 1
                assert self.paren_level >= 0

        while len(self.indent_level) > 1:
            self.indent_level.pop()
            yield Token(self.DEDENT_type, '')

        assert self.indent_level == [0], self.indent_level

    # XXX Hack for ContextualLexer. Maybe there's a more elegant solution?
    @property
    def always_accept(self):
        return (self.NL_type,)


class Token(Str):
    __slots__ = ('type', 'pos_in_stream', 'value', 'line', 'column', 'end_line', 'end_column')

    def __new__(cls, type_, value, pos_in_stream=None, line=None, column=None):
        self = super(Token, cls).__new__(cls, value)
        self.type = type_
        self.pos_in_stream = pos_in_stream
        self.value = value
        self.line = line
        self.column = column
        self.end_line = None
        self.end_column = None
        return self

    @classmethod
    def new_borrow_pos(cls, type_, value, borrow_t):
        return cls(type_, value, borrow_t.pos_in_stream, line=borrow_t.line, column=borrow_t.column)

    def __reduce__(self):
        return (self.__class__, (self.type, self.value, self.pos_in_stream, self.line, self.column, ))

    def __repr__(self):
        return 'Token(%s, %r)' % (self.type, self.value)

    def __deepcopy__(self, memo):
        return Token(self.type, self.value, self.pos_in_stream, self.line, self.column)

    def __eq__(self, other):
        if isinstance(other, Token) and self.type != other.type:
            return False

        return Str.__eq__(self, other)

    __hash__ = Str.__hash__


class LineCounter:
    def __init__(self):
        self.newline_char = '\n'
        self.char_pos = 0
        self.line = 1
        self.column = 1
        self.line_start_pos = 0

    def feed(self, token, test_newline=True):
        """Consume a token and calculate the new line & column.

        As an optional optimization, set test_newline=False is token doesn't contain a newline.
        """
        if test_newline:
            newlines = token.count(self.newline_char)
            if newlines:
                self.line += newlines
                self.line_start_pos = self.char_pos + token.rindex(self.newline_char) + 1

        self.char_pos += len(token)
        self.column = self.char_pos - self.line_start_pos + 1

class _Lex:
    "Built to serve both Lexer and ContextualLexer"
    def __init__(self, lexer, state=None):
        self.lexer = lexer
        self.state = state

    def lex(self, stream, newline_types, ignore_types):
        newline_types = list(newline_types)
        ignore_types = list(ignore_types)
        line_ctr = LineCounter()

        t = None
        while True:
            lexer = self.lexer
            for mre, type_from_index in lexer.mres:
                m = mre.match(stream, line_ctr.char_pos)
                if m:
                    value = m.group(0)
                    type_ = type_from_index[m.lastindex]
                    if type_ not in ignore_types:
                        t = Token(type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column)
                        if t.type in lexer.callback:
                            t = lexer.callback[t.type](t)
                        yield t
                    else:
                        if type_ in lexer.callback:
                            t = Token(type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column)
                            lexer.callback[type_](t)

                    line_ctr.feed(value, type_ in newline_types)
                    if t:
                        t.end_line = line_ctr.line
                        t.end_column = line_ctr.column

                    break
            else:
                if line_ctr.char_pos < len(stream):
                    raise UnexpectedCharacters(stream, line_ctr.char_pos, line_ctr.line, line_ctr.column, state=self.state)
                break

class UnlessCallback:
    def __init__(self, mres):
        self.mres = mres

    def __call__(self, t):
        for mre, type_from_index in self.mres:
            m = mre.match(t.value)
            if m:
                t.type = type_from_index[m.lastindex]
                break
        return t


from functools import partial, wraps


class ExpandSingleChild:
    def __init__(self, node_builder):
        self.node_builder = node_builder

    def __call__(self, children):
        if len(children) == 1:
            return children[0]
        else:
            return self.node_builder(children)


class PropagatePositions:
    def __init__(self, node_builder):
        self.node_builder = node_builder

    def __call__(self, children):
        res = self.node_builder(children)

        if children and isinstance(res, Tree):
            for a in children:
                if isinstance(a, Tree):
                    res.meta.line = a.meta.line
                    res.meta.column = a.meta.column
                elif isinstance(a, Token):
                    res.meta.line = a.line
                    res.meta.column = a.column
                break

            for a in reversed(children):
                # with suppress(AttributeError):
                if isinstance(a, Tree):
                    res.meta.end_line = a.meta.end_line
                    res.meta.end_column = a.meta.end_column
                elif isinstance(a, Token):
                    res.meta.end_line = a.end_line
                    res.meta.end_column = a.end_column

                break

        return res


class ChildFilter:
    def __init__(self, to_include, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include

    def __call__(self, children):
        filtered = []
        for i, to_expand in self.to_include:
            if to_expand:
                filtered += children[i].children
            else:
                filtered.append(children[i])

        return self.node_builder(filtered)

class ChildFilterLALR(ChildFilter):
    "Optimized childfilter for LALR (assumes no duplication in parse tree, so it's safe to change it)"

    def __call__(self, children):
        filtered = []
        for i, to_expand in self.to_include:
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:   # Optimize for left-recursion
                    filtered = children[i].children
            else:
                filtered.append(children[i])

        return self.node_builder(filtered)

def _should_expand(sym):
    return not sym.is_term and sym.name.startswith('_')

def maybe_create_child_filter(expansion, keep_all_tokens, ambiguous):
    to_include = [(i, _should_expand(sym)) for i, sym in enumerate(expansion)
                  if keep_all_tokens or not (sym.is_term and sym.filter_out)]

    if len(to_include) < len(expansion) or any(to_expand for i, to_expand in to_include):
        return partial(ChildFilter if ambiguous else ChildFilterLALR, to_include)


class Callback(object):
    pass


def inline_args(func):
    @wraps(func)
    def f(children):
        return func(*children)
    return f



class ParseTreeBuilder:
    def __init__(self, rules, tree_class, propagate_positions=False, keep_all_tokens=False, ambiguous=False):
        self.tree_class = tree_class
        self.propagate_positions = propagate_positions
        self.always_keep_all_tokens = keep_all_tokens
        self.ambiguous = ambiguous

        self.rule_builders = list(self._init_builders(rules))

        self.user_aliases = {}

    def _init_builders(self, rules):
        for rule in rules:
            options = rule.options
            keep_all_tokens = self.always_keep_all_tokens or (options.keep_all_tokens if options else False)
            expand_single_child = options.expand1 if options else False

            wrapper_chain = filter(None, [
                (expand_single_child and not rule.alias) and ExpandSingleChild,
                maybe_create_child_filter(rule.expansion, keep_all_tokens, self.ambiguous),
                self.propagate_positions and PropagatePositions,
            ])

            yield rule, wrapper_chain


    def create_callback(self, transformer=None):
        callback = Callback()

        i = 0
        for rule, wrapper_chain in self.rule_builders:
            internal_callback_name = '_cb%d_%s' % (i, rule.origin)
            i += 1

            user_callback_name = rule.alias or rule.origin.name
            try:
                f = getattr(transformer, user_callback_name)
                assert not getattr(f, 'meta', False), "Meta args not supported for internal transformer"
                # XXX InlineTransformer is deprecated!
                if getattr(f, 'inline', False) or isinstance(transformer, InlineTransformer):
                    f = inline_args(f)
            except AttributeError:
                f = partial(self.tree_class, user_callback_name)

            self.user_aliases[rule] = rule.alias
            rule.alias = internal_callback_name

            for w in wrapper_chain:
                f = w(f)

            if hasattr(callback, internal_callback_name):
                raise GrammarError("Rule '%s' already exists" % (rule,))
            setattr(callback, internal_callback_name, f)

        return callback



class _Parser:
    def __init__(self, parse_table, callbacks):
        self.states = parse_table.states
        self.start_state = parse_table.start_state
        self.end_state = parse_table.end_state
        self.callbacks = callbacks

    def parse(self, seq, set_state=None):
        i = 0
        token = None
        stream = iter(seq)
        states = self.states

        state_stack = [self.start_state]
        value_stack = []

        if set_state: set_state(self.start_state)

        def get_action(key):
            state = state_stack[-1]
            try:
                return states[state][key]
            except KeyError:
                expected = states[state].keys()
                raise UnexpectedToken(token, expected, state=state)  # TODO filter out rules from expected

        def reduce(rule):
            size = len(rule.expansion)
            if size:
                s = value_stack[-size:]
                del state_stack[-size:]
                del value_stack[-size:]
            else:
                s = []

            value = self.callbacks[rule](s)

            _action, new_state = get_action(rule.origin.name)
            assert _action is Shift
            state_stack.append(new_state)
            value_stack.append(value)

        # Main LALR-parser loop
        for i, token in enumerate(stream):
            while True:
                action, arg = get_action(token.type)
                assert arg != self.end_state

                if action is Shift:
                    state_stack.append(arg)
                    value_stack.append(token)
                    if set_state: set_state(arg)
                    break # next token
                else:
                    reduce(arg)

        while True:
            _action, arg = get_action('$END')
            if _action is Shift:
                assert arg == self.end_state
                val ,= value_stack
                return val
            else:
                reduce(arg)


class Symbol(object):
    is_term = NotImplemented

    def __init__(self, name):
        self.name = name

    def __eq__(self, other):
        assert isinstance(other, Symbol), other
        return self.is_term == other.is_term and self.name == other.name

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self):
        return hash(self.name)

    def __repr__(self):
        return '%s(%r)' % (type(self).__name__, self.name)

class Terminal(Symbol):
    is_term = True

    def __init__(self, name, filter_out=False):
        self.name = name
        self.filter_out = filter_out


class NonTerminal(Symbol):
    is_term = False

class Rule(object):
    """
        origin : a symbol
        expansion : a list of symbols
    """
    def __init__(self, origin, expansion, alias=None, options=None):
        self.origin = origin
        self.expansion = expansion
        self.alias = alias
        self.options = options

    def __str__(self):
        return '<%s : %s>' % (self.origin, ' '.join(map(str,self.expansion)))

    def __repr__(self):
        return 'Rule(%r, %r, %r, %r)' % (self.origin, self.expansion, self.alias, self.options)


class RuleOptions:
    def __init__(self, keep_all_tokens=False, expand1=False, priority=None):
        self.keep_all_tokens = keep_all_tokens
        self.expand1 = expand1
        self.priority = priority

    def __repr__(self):
        return 'RuleOptions(%r, %r, %r)' % (
            self.keep_all_tokens,
            self.expand1,
            self.priority,
        )

Shift = 0
Reduce = 1
import re
MRES = (
[('(?P<NAME>(?<![A-Za-z])(?!(?:[NS][EW]?|[EW])(?!\\w))[A-Za-z]\\w*)|(?P<HOIST_ARROW>(?:\\s+)?\\=\\>(?:\\s+)?)|(?P<NORMAL_ARROW>(?:\\s+)?\\-\\>(?:\\s+)?)|(?P<MULT>(?:\\s+)?\\*(?:\\s+)?)|(?P<SUBT>(?:\\s+)?\\-(?:\\s+)?)|(?P<_PERMUTE>(?:\\s+)?\\~(?:\\s+)?)|(?P<NEWLINE>(?:(?:\r'
  ')?\n'
  ')+)|(?P<_NL>(?:(?:\r'
  ')?\n'
  ')+)|(?P<INT>(?:[0-9])+)|(?P<_COMMENT>\\s*#.*)|(?P<__ANON_1>[^,;]+)|(?P<_WS>\\s+)|(?P<__ANON_0>.+)|(?P<PREVIOUS_BIND>0|NE|SE|SW|NW|N|E|S|W)|(?P<COMPASS_DIR>NE|SE|SW|NW|N|E|S|W)|(?P<_VAR_CLOSE>[)}])|(?P<_VAR_OPEN>[({])',
  {1: 'NAME',
   2: 'HOIST_ARROW',
   3: 'NORMAL_ARROW',
   4: 'MULT',
   5: 'SUBT',
   6: '_PERMUTE',
   7: 'NEWLINE',
   8: '_NL',
   9: 'INT',
   10: '_COMMENT',
   11: '__ANON_1',
   12: '_WS',
   13: '__ANON_0',
   14: 'PREVIOUS_BIND',
   15: 'COMPASS_DIR',
   16: '_VAR_CLOSE',
   17: '_VAR_OPEN'})]
)
LEXER_CALLBACK = (
{'INT': [('(?P<__ANON_3>0$)', {1: '__ANON_3'})],
 'PREVIOUS_BIND': [('(?P<__ANON_3>0$)', {1: '__ANON_3'})],
 '_PERMUTE': [('(?P<NEGATE_LIVE>\\~$)', {1: 'NEGATE_LIVE'})],
 '__ANON_0': [('(?P<EXTEND_LAST>\\.\\.\\.$)|(?P<NEGATE_ALL>\\-\\~$)|(?P<__ANON_2>\\.\\.$)|(?P<COLON>\\:$)|(?P<COMMA>\\,$)|(?P<EQUAL>\\=$)|(?P<LEAVE_ALONE>_$)|(?P<LSQB>\\[$)|(?P<NEGATE_LIVE>\\~$)|(?P<RSQB>\\]$)|(?P<SEMICOLON>\\;$)|(?P<__ANON_3>0$)',
               {1: 'EXTEND_LAST',
                2: 'NEGATE_ALL',
                3: '__ANON_2',
                4: 'COLON',
                5: 'COMMA',
                6: 'EQUAL',
                7: 'LEAVE_ALONE',
                8: 'LSQB',
                9: 'NEGATE_LIVE',
                10: 'RSQB',
                11: 'SEMICOLON',
                12: '__ANON_3'})],
 '__ANON_1': [('(?P<EXTEND_LAST>\\.\\.\\.$)|(?P<NEGATE_ALL>\\-\\~$)|(?P<__ANON_2>\\.\\.$)|(?P<COLON>\\:$)|(?P<EQUAL>\\=$)|(?P<LEAVE_ALONE>_$)|(?P<LSQB>\\[$)|(?P<NEGATE_LIVE>\\~$)|(?P<RSQB>\\]$)|(?P<__ANON_3>0$)',
               {1: 'EXTEND_LAST',
                2: 'NEGATE_ALL',
                3: '__ANON_2',
                4: 'COLON',
                5: 'EQUAL',
                6: 'LEAVE_ALONE',
                7: 'LSQB',
                8: 'NEGATE_LIVE',
                9: 'RSQB',
                10: '__ANON_3'})]}
)
NEWLINE_TYPES = ['_NL', 'NEWLINE']
IGNORE_TYPES = ['_COMMENT']
class LexerRegexps: pass
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
lexer = _Lex(lexer_regexps)
def lex(stream):
    return lexer.lex(stream, NEWLINE_TYPES, IGNORE_TYPES)
RULES = {
  0: Rule(NonTerminal('table'), [NonTerminal(Token(RULE, '__anon_plus_0'))], None, RuleOptions(False, False, None)),
  1: Rule(NonTerminal('line'), [Terminal('NAME'), Terminal('_WS'), Terminal('EQUAL'), Terminal('_WS'), NonTerminal('_negation'), NonTerminal('_expr')], 'var_decl', RuleOptions(False, False, None)),
  2: Rule(NonTerminal('line'), [Terminal('NAME'), Terminal('EQUAL'), NonTerminal('_expr')], 'var_decl', RuleOptions(False, False, None)),
  3: Rule(NonTerminal('line'), [NonTerminal('transition'), NonTerminal('_arrow'), NonTerminal('ptcd'), NonTerminal(Token(RULE, '__anon_star_1'))], 'transition', RuleOptions(False, False, None)),
  4: Rule(NonTerminal('line'), [NonTerminal('transition'), NonTerminal('_arrow'), NonTerminal('ptcd')], 'transition', RuleOptions(False, False, None)),
  5: Rule(NonTerminal('line'), [Terminal('NAME'), Terminal('COLON'), Terminal('__ANON_0')], 'directive', RuleOptions(False, False, None)),
  6: Rule(NonTerminal('line'), [Terminal('NAME'), Terminal('_WS'), Terminal('EQUAL'), Terminal('_WS'), NonTerminal('_expr')], 'var_decl', RuleOptions(False, False, None)),
  7: Rule(NonTerminal('line'), [Terminal('NAME'), Terminal('EQUAL'), Terminal('_WS'), NonTerminal('_negation'), NonTerminal('_expr')], 'var_decl', RuleOptions(False, False, None)),
  8: Rule(NonTerminal('line'), [Terminal('NAME'), Terminal('_WS'), Terminal('EQUAL'), NonTerminal('_expr')], 'var_decl', RuleOptions(False, False, None)),
  9: Rule(NonTerminal('line'), [Terminal('NAME'), Terminal('EQUAL'), Terminal('_WS'), NonTerminal('_expr')], 'var_decl', RuleOptions(False, False, None)),
  10: Rule(NonTerminal('line'), [Terminal('NAME'), Terminal('EQUAL'), NonTerminal('_negation'), NonTerminal('_expr')], 'var_decl', RuleOptions(False, False, None)),
  11: Rule(NonTerminal('line'), [Terminal('NAME'), Terminal('_WS'), Terminal('EQUAL'), NonTerminal('_negation'), NonTerminal('_expr')], 'var_decl', RuleOptions(False, False, None)),
  12: Rule(NonTerminal('line'), [NonTerminal('transition')], 'transition', RuleOptions(False, False, None)),
  13: Rule(NonTerminal('line'), [Terminal('NAME'), Terminal('COLON'), Terminal('_WS'), Terminal('__ANON_0')], 'directive', RuleOptions(False, False, None)),
  14: Rule(NonTerminal('transition'), [NonTerminal('_expr'), NonTerminal(Token(RULE, '__anon_plus_2')), NonTerminal('_sep'), NonTerminal('reference')], 'main', RuleOptions(False, False, None)),
  15: Rule(NonTerminal('transition'), [NonTerminal('_negation'), NonTerminal('_expr'), NonTerminal(Token(RULE, '__anon_plus_2')), NonTerminal('_sep'), NonTerminal('_expr')], 'main', RuleOptions(False, False, None)),
  16: Rule(NonTerminal('transition'), [NonTerminal('_expr'), NonTerminal(Token(RULE, '__anon_plus_2')), NonTerminal('_sep'), NonTerminal('_expr')], 'main', RuleOptions(False, False, None)),
  17: Rule(NonTerminal('transition'), [NonTerminal('_negation'), NonTerminal('_expr'), NonTerminal(Token(RULE, '__anon_plus_2')), NonTerminal('_sep'), NonTerminal('reference')], 'main', RuleOptions(False, False, None)),
  18: Rule(NonTerminal('tr_state'), [NonTerminal('cdir'), Terminal('_WS'), NonTerminal('_expr'), Terminal('_PERMUTE'), Terminal('__ANON_1')], 'permute_shorthand', RuleOptions(False, False, None)),
  19: Rule(NonTerminal('tr_state'), [NonTerminal('cdir'), Terminal('_WS'), NonTerminal('_expr')], None, RuleOptions(False, False, None)),
  20: Rule(NonTerminal('tr_state'), [NonTerminal('cdir'), Terminal('_WS'), NonTerminal('reference')], None, RuleOptions(False, False, None)),
  21: Rule(NonTerminal('tr_state'), [NonTerminal('cdir'), Terminal('_WS'), NonTerminal('_negation'), NonTerminal('_expr'), Terminal('_PERMUTE'), Terminal('__ANON_1')], 'permute_shorthand', RuleOptions(False, False, None)),
  22: Rule(NonTerminal('tr_state'), [NonTerminal('cdir'), Terminal('_WS'), NonTerminal('_negation'), NonTerminal('_expr')], None, RuleOptions(False, False, None)),
  23: Rule(NonTerminal('tr_state'), [NonTerminal('reference')], None, RuleOptions(False, False, None)),
  24: Rule(NonTerminal('tr_state'), [NonTerminal('_expr')], None, RuleOptions(False, False, None)),
  25: Rule(NonTerminal('tr_state'), [NonTerminal('cdir'), Terminal('_WS'), NonTerminal('_negation'), NonTerminal('reference')], None, RuleOptions(False, False, None)),
  26: Rule(NonTerminal('tr_state'), [NonTerminal('_expr'), Terminal('_PERMUTE'), Terminal('__ANON_1')], 'permute_shorthand', RuleOptions(False, False, None)),
  27: Rule(NonTerminal('tr_state'), [NonTerminal('reference'), Terminal('_PERMUTE'), Terminal('__ANON_1')], 'permute_shorthand', RuleOptions(False, False, None)),
  28: Rule(NonTerminal('tr_state'), [NonTerminal('cdir'), Terminal('_WS'), NonTerminal('reference'), Terminal('_PERMUTE'), Terminal('__ANON_1')], 'permute_shorthand', RuleOptions(False, False, None)),
  29: Rule(NonTerminal('tr_state'), [NonTerminal('cdir'), Terminal('_WS'), NonTerminal('_negation'), NonTerminal('reference'), Terminal('_PERMUTE'), Terminal('__ANON_1')], 'permute_shorthand', RuleOptions(False, False, None)),
  30: Rule(NonTerminal('tr_state'), [NonTerminal('_negation'), NonTerminal('reference'), Terminal('_PERMUTE'), Terminal('__ANON_1')], 'permute_shorthand', RuleOptions(False, False, None)),
  31: Rule(NonTerminal('tr_state'), [NonTerminal('_negation'), NonTerminal('_expr')], None, RuleOptions(False, False, None)),
  32: Rule(NonTerminal('tr_state'), [NonTerminal('_negation'), NonTerminal('reference')], None, RuleOptions(False, False, None)),
  33: Rule(NonTerminal('tr_state'), [NonTerminal('_negation'), NonTerminal('_expr'), Terminal('_PERMUTE'), Terminal('__ANON_1')], 'permute_shorthand', RuleOptions(False, False, None)),
  34: Rule(NonTerminal('cdir'), [Terminal('COMPASS_DIR')], None, RuleOptions(False, False, None)),
  35: Rule(NonTerminal('cdir'), [Terminal('COMPASS_DIR'), Terminal('__ANON_2'), Terminal('COMPASS_DIR')], 'crange', RuleOptions(False, False, None)),
  36: Rule(NonTerminal('_sep'), [Terminal('SEMICOLON'), Terminal('_WS')], None, RuleOptions(False, False, None)),
  37: Rule(NonTerminal('_sep'), [Terminal('COMMA'), Terminal('_WS')], None, RuleOptions(False, False, None)),
  38: Rule(NonTerminal('_sep'), [Terminal('SEMICOLON')], None, RuleOptions(False, False, None)),
  39: Rule(NonTerminal('_sep'), [Terminal('COMMA')], None, RuleOptions(False, False, None)),
  40: Rule(NonTerminal('_arrow'), [Terminal('HOIST_ARROW')], None, RuleOptions(False, False, None)),
  41: Rule(NonTerminal('_arrow'), [Terminal('NORMAL_ARROW')], None, RuleOptions(False, False, None)),
  42: Rule(NonTerminal('var'), [Terminal('_VAR_OPEN'), NonTerminal('_negation'), NonTerminal('_expr'), NonTerminal(Token(RULE, '__anon_star_3')), Terminal('_VAR_CLOSE')], None, RuleOptions(False, False, None)),
  43: Rule(NonTerminal('var'), [Terminal('_VAR_OPEN'), NonTerminal('_expr'), Terminal('_VAR_CLOSE')], None, RuleOptions(False, False, None)),
  44: Rule(NonTerminal('var'), [Terminal('_VAR_OPEN'), NonTerminal('range'), Terminal('_VAR_CLOSE')], None, RuleOptions(False, False, None)),
  45: Rule(NonTerminal('var'), [Terminal('_VAR_OPEN'), NonTerminal('_expr'), NonTerminal(Token(RULE, '__anon_star_3')), Terminal('_VAR_CLOSE')], None, RuleOptions(False, False, None)),
  46: Rule(NonTerminal('var'), [Terminal('_VAR_OPEN'), NonTerminal('_negation'), NonTerminal('_expr'), Terminal('_VAR_CLOSE')], None, RuleOptions(False, False, None)),
  47: Rule(NonTerminal('tr_var'), [Terminal('_VAR_OPEN'), NonTerminal('_negation'), NonTerminal('_tr_expr'), NonTerminal(Token(RULE, '__anon_star_4')), Terminal('COMMA'), Terminal('EXTEND_LAST'), Terminal('_VAR_CLOSE')], 'var', RuleOptions(False, False, None)),
  48: Rule(NonTerminal('tr_var'), [Terminal('_VAR_OPEN'), NonTerminal('range'), Terminal('_VAR_CLOSE')], 'var', RuleOptions(False, False, None)),
  49: Rule(NonTerminal('tr_var'), [Terminal('_VAR_OPEN'), NonTerminal('_negation'), NonTerminal('_tr_expr'), Terminal('COMMA'), Terminal('_WS'), Terminal('EXTEND_LAST'), Terminal('_VAR_CLOSE')], 'var', RuleOptions(False, False, None)),
  50: Rule(NonTerminal('tr_var'), [Terminal('_VAR_OPEN'), NonTerminal('_tr_expr'), Terminal('COMMA'), Terminal('EXTEND_LAST'), Terminal('_VAR_CLOSE')], 'var', RuleOptions(False, False, None)),
  51: Rule(NonTerminal('tr_var'), [Terminal('_VAR_OPEN'), NonTerminal('_negation'), NonTerminal('_tr_expr'), NonTerminal(Token(RULE, '__anon_star_4')), Terminal('COMMA'), Terminal('_WS'), Terminal('EXTEND_LAST'), Terminal('_VAR_CLOSE')], 'var', RuleOptions(False, False, None)),
  52: Rule(NonTerminal('tr_var'), [Terminal('_VAR_OPEN'), NonTerminal('_tr_expr'), Terminal('_VAR_CLOSE')], 'var', RuleOptions(False, False, None)),
  53: Rule(NonTerminal('tr_var'), [Terminal('_VAR_OPEN'), NonTerminal('_tr_expr'), NonTerminal(Token(RULE, '__anon_star_4')), Terminal('COMMA'), Terminal('EXTEND_LAST'), Terminal('_VAR_CLOSE')], 'var', RuleOptions(False, False, None)),
  54: Rule(NonTerminal('tr_var'), [Terminal('_VAR_OPEN'), NonTerminal('_tr_expr'), NonTerminal(Token(RULE, '__anon_star_4')), Terminal('_VAR_CLOSE')], 'var', RuleOptions(False, False, None)),
  55: Rule(NonTerminal('tr_var'), [Terminal('_VAR_OPEN'), NonTerminal('_negation'), NonTerminal('_tr_expr'), NonTerminal(Token(RULE, '__anon_star_4')), Terminal('_VAR_CLOSE')], 'var', RuleOptions(False, False, None)),
  56: Rule(NonTerminal('tr_var'), [Terminal('_VAR_OPEN'), NonTerminal('_tr_expr'), NonTerminal(Token(RULE, '__anon_star_4')), Terminal('COMMA'), Terminal('_WS'), Terminal('EXTEND_LAST'), Terminal('_VAR_CLOSE')], 'var', RuleOptions(False, False, None)),
  57: Rule(NonTerminal('tr_var'), [Terminal('_VAR_OPEN'), NonTerminal('_tr_expr'), Terminal('COMMA'), Terminal('_WS'), Terminal('EXTEND_LAST'), Terminal('_VAR_CLOSE')], 'var', RuleOptions(False, False, None)),
  58: Rule(NonTerminal('tr_var'), [Terminal('_VAR_OPEN'), NonTerminal('_negation'), NonTerminal('_tr_expr'), Terminal('_VAR_CLOSE')], 'var', RuleOptions(False, False, None)),
  59: Rule(NonTerminal('tr_var'), [Terminal('_VAR_OPEN'), NonTerminal('_negation'), NonTerminal('_tr_expr'), Terminal('COMMA'), Terminal('EXTEND_LAST'), Terminal('_VAR_CLOSE')], 'var', RuleOptions(False, False, None)),
  60: Rule(NonTerminal('ptcd_var'), [Terminal('_VAR_OPEN'), NonTerminal('range'), Terminal('_VAR_CLOSE')], 'var', RuleOptions(False, False, None)),
  61: Rule(NonTerminal('ptcd_var'), [Terminal('_VAR_OPEN'), NonTerminal('_ptcd_expr'), NonTerminal(Token(RULE, '__anon_star_5')), Terminal('_VAR_CLOSE')], 'var', RuleOptions(False, False, None)),
  62: Rule(NonTerminal('ptcd_var'), [Terminal('_VAR_OPEN'), NonTerminal('_negation'), NonTerminal('_ptcd_expr'), Terminal('_VAR_CLOSE')], 'var', RuleOptions(False, False, None)),
  63: Rule(NonTerminal('ptcd_var'), [Terminal('_VAR_OPEN'), NonTerminal('_negation'), NonTerminal('_ptcd_expr'), NonTerminal(Token(RULE, '__anon_star_5')), Terminal('COMMA'), Terminal('_WS'), Terminal('EXTEND_LAST'), Terminal('_VAR_CLOSE')], 'var', RuleOptions(False, False, None)),
  64: Rule(NonTerminal('ptcd_var'), [Terminal('_VAR_OPEN'), NonTerminal('_ptcd_expr'), Terminal('COMMA'), Terminal('EXTEND_LAST'), Terminal('_VAR_CLOSE')], 'var', RuleOptions(False, False, None)),
  65: Rule(NonTerminal('ptcd_var'), [Terminal('_VAR_OPEN'), NonTerminal('_ptcd_expr'), NonTerminal(Token(RULE, '__anon_star_5')), Terminal('COMMA'), Terminal('EXTEND_LAST'), Terminal('_VAR_CLOSE')], 'var', RuleOptions(False, False, None)),
  66: Rule(NonTerminal('ptcd_var'), [Terminal('_VAR_OPEN'), NonTerminal('_ptcd_expr'), NonTerminal(Token(RULE, '__anon_star_5')), Terminal('COMMA'), Terminal('_WS'), Terminal('EXTEND_LAST'), Terminal('_VAR_CLOSE')], 'var', RuleOptions(False, False, None)),
  67: Rule(NonTerminal('ptcd_var'), [Terminal('_VAR_OPEN'), NonTerminal('_negation'), NonTerminal('_ptcd_expr'), NonTerminal(Token(RULE, '__anon_star_5')), Terminal('_VAR_CLOSE')], 'var', RuleOptions(False, False, None)),
  68: Rule(NonTerminal('ptcd_var'), [Terminal('_VAR_OPEN'), NonTerminal('_negation'), NonTerminal('_ptcd_expr'), Terminal('COMMA'), Terminal('_WS'), Terminal('EXTEND_LAST'), Terminal('_VAR_CLOSE')], 'var', RuleOptions(False, False, None)),
  69: Rule(NonTerminal('ptcd_var'), [Terminal('_VAR_OPEN'), NonTerminal('_negation'), NonTerminal('_ptcd_expr'), Terminal('COMMA'), Terminal('EXTEND_LAST'), Terminal('_VAR_CLOSE')], 'var', RuleOptions(False, False, None)),
  70: Rule(NonTerminal('ptcd_var'), [Terminal('_VAR_OPEN'), NonTerminal('_ptcd_expr'), Terminal('COMMA'), Terminal('_WS'), Terminal('EXTEND_LAST'), Terminal('_VAR_CLOSE')], 'var', RuleOptions(False, False, None)),
  71: Rule(NonTerminal('ptcd_var'), [Terminal('_VAR_OPEN'), NonTerminal('_ptcd_expr'), Terminal('_VAR_CLOSE')], 'var', RuleOptions(False, False, None)),
  72: Rule(NonTerminal('ptcd_var'), [Terminal('_VAR_OPEN'), NonTerminal('_negation'), NonTerminal('_ptcd_expr'), NonTerminal(Token(RULE, '__anon_star_5')), Terminal('COMMA'), Terminal('EXTEND_LAST'), Terminal('_VAR_CLOSE')], 'var', RuleOptions(False, False, None)),
  73: Rule(NonTerminal('_expr'), [NonTerminal('_expr_no_int')], None, RuleOptions(False, False, None)),
  74: Rule(NonTerminal('_expr'), [Terminal('INT')], None, RuleOptions(False, False, None)),
  75: Rule(NonTerminal('_expr_no_int'), [NonTerminal('range')], None, RuleOptions(False, False, None)),
  76: Rule(NonTerminal('_expr_no_int'), [NonTerminal('operation')], None, RuleOptions(False, False, None)),
  77: Rule(NonTerminal('_expr_no_int'), [NonTerminal('var')], None, RuleOptions(False, False, None)),
  78: Rule(NonTerminal('_expr_no_int'), [Terminal('NAME')], None, RuleOptions(False, False, None)),
  79: Rule(NonTerminal('operation'), [NonTerminal('_expr_no_int'), Terminal('SUBT'), NonTerminal('_expr')], 'subt', RuleOptions(False, False, None)),
  80: Rule(NonTerminal('operation'), [NonTerminal('_expr'), Terminal('MULT'), NonTerminal('_expr')], 'mult', RuleOptions(False, False, None)),
  81: Rule(NonTerminal('_tr_expr'), [NonTerminal('_tr_expr_no_int')], None, RuleOptions(False, False, None)),
  82: Rule(NonTerminal('_tr_expr'), [Terminal('INT')], None, RuleOptions(False, False, None)),
  83: Rule(NonTerminal('_tr_expr_no_int'), [NonTerminal('range')], None, RuleOptions(False, False, None)),
  84: Rule(NonTerminal('_tr_expr_no_int'), [NonTerminal('reference')], None, RuleOptions(False, False, None)),
  85: Rule(NonTerminal('_tr_expr_no_int'), [NonTerminal('tr_var')], None, RuleOptions(False, False, None)),
  86: Rule(NonTerminal('_tr_expr_no_int'), [Terminal('NAME')], None, RuleOptions(False, False, None)),
  87: Rule(NonTerminal('_tr_expr_no_int'), [NonTerminal('tr_operation')], None, RuleOptions(False, False, None)),
  88: Rule(NonTerminal('tr_operation'), [NonTerminal('_tr_expr_no_int'), Terminal('SUBT'), NonTerminal('_tr_expr')], 'subt', RuleOptions(False, False, None)),
  89: Rule(NonTerminal('tr_operation'), [NonTerminal('_tr_expr'), Terminal('MULT'), NonTerminal('_tr_expr')], 'mult', RuleOptions(False, False, None)),
  90: Rule(NonTerminal('_ptcd_expr'), [NonTerminal('_ptcd_expr_no_int')], None, RuleOptions(False, False, None)),
  91: Rule(NonTerminal('_ptcd_expr'), [Terminal('INT')], None, RuleOptions(False, False, None)),
  92: Rule(NonTerminal('_ptcd_expr_no_int'), [NonTerminal('range')], None, RuleOptions(False, False, None)),
  93: Rule(NonTerminal('_ptcd_expr_no_int'), [NonTerminal('ptcd_var')], None, RuleOptions(False, False, None)),
  94: Rule(NonTerminal('_ptcd_expr_no_int'), [Terminal('LEAVE_ALONE')], None, RuleOptions(False, False, None)),
  95: Rule(NonTerminal('_ptcd_expr_no_int'), [NonTerminal('ptcd_operation')], None, RuleOptions(False, False, None)),
  96: Rule(NonTerminal('_ptcd_expr_no_int'), [NonTerminal('reference')], None, RuleOptions(False, False, None)),
  97: Rule(NonTerminal('_ptcd_expr_no_int'), [Terminal('NAME')], None, RuleOptions(False, False, None)),
  98: Rule(NonTerminal('ptcd_operation'), [NonTerminal('_ptcd_expr'), Terminal('MULT'), NonTerminal('_ptcd_expr')], 'mult', RuleOptions(False, False, None)),
  99: Rule(NonTerminal('ptcd_operation'), [NonTerminal('_ptcd_expr_no_int'), Terminal('SUBT'), NonTerminal('_ptcd_expr')], 'subt', RuleOptions(False, False, None)),
  100: Rule(NonTerminal('ptcd'), [Terminal('COMPASS_DIR'), Terminal('LSQB'), Terminal('PREVIOUS_BIND'), Terminal('COLON'), Terminal('_WS'), NonTerminal('_ptcd_expr_no_int'), Terminal('RSQB')], 'ptcd_map_other', RuleOptions(False, False, None)),
  101: Rule(NonTerminal('ptcd'), [Terminal('COMPASS_DIR'), Terminal('LSQB'), Terminal('PREVIOUS_BIND'), Terminal('RSQB')], 'ptcd_bind_self', RuleOptions(False, False, None)),
  102: Rule(NonTerminal('ptcd'), [Terminal('COMPASS_DIR'), Terminal('LSQB'), NonTerminal('_ptcd_expr_no_int'), Terminal('RSQB')], 'ptcd_map_self', RuleOptions(False, False, None)),
  103: Rule(NonTerminal('ptcd'), [Terminal('COMPASS_DIR'), Terminal('LSQB'), Terminal('__ANON_3'), Terminal('COLON'), NonTerminal('_ptcd_expr_no_int'), Terminal('RSQB')], 'ptcd_map_other', RuleOptions(False, False, None)),
  104: Rule(NonTerminal('ptcd'), [Terminal('COMPASS_DIR'), Terminal('LSQB'), Terminal('__ANON_3'), Terminal('COLON'), Terminal('_WS'), NonTerminal('_ptcd_expr_no_int'), Terminal('RSQB')], 'ptcd_map_other', RuleOptions(False, False, None)),
  105: Rule(NonTerminal('ptcd'), [Terminal('COMPASS_DIR'), Terminal('LSQB'), Terminal('__ANON_3'), Terminal('RSQB')], 'ptcd_bind_self', RuleOptions(False, False, None)),
  106: Rule(NonTerminal('ptcd'), [Terminal('COMPASS_DIR'), Terminal('COLON'), Terminal('INT')], 'ptcd_bare', RuleOptions(False, False, None)),
  107: Rule(NonTerminal('ptcd'), [Terminal('COMPASS_DIR'), Terminal('LSQB'), Terminal('PREVIOUS_BIND'), Terminal('COLON'), NonTerminal('_ptcd_expr_no_int'), Terminal('RSQB')], 'ptcd_map_other', RuleOptions(False, False, None)),
  108: Rule(NonTerminal('reference'), [Terminal('LSQB'), Terminal('PREVIOUS_BIND'), Terminal('COLON'), NonTerminal('_tr_expr_no_int'), Terminal('RSQB')], 'mapping', RuleOptions(False, False, None)),
  109: Rule(NonTerminal('reference'), [Terminal('LSQB'), Terminal('PREVIOUS_BIND'), Terminal('RSQB')], 'binding', RuleOptions(False, False, None)),
  110: Rule(NonTerminal('reference'), [Terminal('LSQB'), Terminal('PREVIOUS_BIND'), Terminal('COLON'), Terminal('_WS'), NonTerminal('_tr_expr_no_int'), Terminal('RSQB')], 'mapping', RuleOptions(False, False, None)),
  111: Rule(NonTerminal('range'), [Terminal('INT'), Terminal('__ANON_2'), Terminal('INT')], None, RuleOptions(False, False, None)),
  112: Rule(NonTerminal('range'), [Terminal('INT'), Terminal('NEGATE_LIVE'), Terminal('_WS'), Terminal('INT'), Terminal('_WS'), Terminal('__ANON_2'), Terminal('INT')], 'range_step', RuleOptions(False, False, None)),
  113: Rule(NonTerminal('range'), [Terminal('INT'), Terminal('_WS'), Terminal('NEGATE_LIVE'), Terminal('INT'), Terminal('_WS'), Terminal('__ANON_2'), Terminal('INT')], 'range_step', RuleOptions(False, False, None)),
  114: Rule(NonTerminal('range'), [Terminal('INT'), Terminal('_WS'), Terminal('NEGATE_LIVE'), Terminal('_WS'), Terminal('INT'), Terminal('_WS'), Terminal('__ANON_2'), Terminal('_WS'), Terminal('INT')], 'range_step', RuleOptions(False, False, None)),
  115: Rule(NonTerminal('range'), [Terminal('INT'), Terminal('NEGATE_LIVE'), Terminal('INT'), Terminal('_WS'), Terminal('__ANON_2'), Terminal('INT')], 'range_step', RuleOptions(False, False, None)),
  116: Rule(NonTerminal('range'), [Terminal('INT'), Terminal('_WS'), Terminal('NEGATE_LIVE'), Terminal('INT'), Terminal('_WS'), Terminal('__ANON_2'), Terminal('_WS'), Terminal('INT')], 'range_step', RuleOptions(False, False, None)),
  117: Rule(NonTerminal('range'), [Terminal('INT'), Terminal('_WS'), Terminal('NEGATE_LIVE'), Terminal('_WS'), Terminal('INT'), Terminal('__ANON_2'), Terminal('_WS'), Terminal('INT')], 'range_step', RuleOptions(False, False, None)),
  118: Rule(NonTerminal('range'), [Terminal('INT'), Terminal('_WS'), Terminal('NEGATE_LIVE'), Terminal('INT'), Terminal('__ANON_2'), Terminal('_WS'), Terminal('INT')], 'range_step', RuleOptions(False, False, None)),
  119: Rule(NonTerminal('range'), [Terminal('INT'), Terminal('__ANON_2'), Terminal('_WS'), Terminal('INT')], None, RuleOptions(False, False, None)),
  120: Rule(NonTerminal('range'), [Terminal('INT'), Terminal('_WS'), Terminal('__ANON_2'), Terminal('INT')], None, RuleOptions(False, False, None)),
  121: Rule(NonTerminal('range'), [Terminal('INT'), Terminal('NEGATE_LIVE'), Terminal('INT'), Terminal('_WS'), Terminal('__ANON_2'), Terminal('_WS'), Terminal('INT')], 'range_step', RuleOptions(False, False, None)),
  122: Rule(NonTerminal('range'), [Terminal('INT'), Terminal('NEGATE_LIVE'), Terminal('_WS'), Terminal('INT'), Terminal('__ANON_2'), Terminal('INT')], 'range_step', RuleOptions(False, False, None)),
  123: Rule(NonTerminal('range'), [Terminal('INT'), Terminal('NEGATE_LIVE'), Terminal('INT'), Terminal('__ANON_2'), Terminal('INT')], 'range_step', RuleOptions(False, False, None)),
  124: Rule(NonTerminal('range'), [Terminal('INT'), Terminal('_WS'), Terminal('NEGATE_LIVE'), Terminal('_WS'), Terminal('INT'), Terminal('__ANON_2'), Terminal('INT')], 'range_step', RuleOptions(False, False, None)),
  125: Rule(NonTerminal('range'), [Terminal('INT'), Terminal('_WS'), Terminal('NEGATE_LIVE'), Terminal('_WS'), Terminal('INT'), Terminal('_WS'), Terminal('__ANON_2'), Terminal('INT')], 'range_step', RuleOptions(False, False, None)),
  126: Rule(NonTerminal('range'), [Terminal('INT'), Terminal('_WS'), Terminal('NEGATE_LIVE'), Terminal('INT'), Terminal('__ANON_2'), Terminal('INT')], 'range_step', RuleOptions(False, False, None)),
  127: Rule(NonTerminal('range'), [Terminal('INT'), Terminal('NEGATE_LIVE'), Terminal('INT'), Terminal('__ANON_2'), Terminal('_WS'), Terminal('INT')], 'range_step', RuleOptions(False, False, None)),
  128: Rule(NonTerminal('range'), [Terminal('INT'), Terminal('_WS'), Terminal('__ANON_2'), Terminal('_WS'), Terminal('INT')], None, RuleOptions(False, False, None)),
  129: Rule(NonTerminal('range'), [Terminal('INT'), Terminal('NEGATE_LIVE'), Terminal('_WS'), Terminal('INT'), Terminal('__ANON_2'), Terminal('_WS'), Terminal('INT')], 'range_step', RuleOptions(False, False, None)),
  130: Rule(NonTerminal('range'), [Terminal('INT'), Terminal('NEGATE_LIVE'), Terminal('_WS'), Terminal('INT'), Terminal('_WS'), Terminal('__ANON_2'), Terminal('_WS'), Terminal('INT')], 'range_step', RuleOptions(False, False, None)),
  131: Rule(NonTerminal('_negation'), [Terminal('NEGATE_ALL')], None, RuleOptions(False, False, None)),
  132: Rule(NonTerminal('_negation'), [Terminal('NEGATE_LIVE')], None, RuleOptions(False, False, None)),
  133: Rule(NonTerminal('__anon_plus_0'), [NonTerminal('line')], None, None),
  134: Rule(NonTerminal('__anon_plus_0'), [NonTerminal(Token(RULE, '__anon_plus_0')), Terminal('_NL')], None, None),
  135: Rule(NonTerminal('__anon_plus_0'), [Terminal('_NL')], None, None),
  136: Rule(NonTerminal('__anon_plus_0'), [NonTerminal(Token(RULE, '__anon_plus_0')), NonTerminal('line')], None, None),
  137: Rule(NonTerminal('__anon_star_1'), [Terminal('_WS'), NonTerminal('ptcd')], None, None),
  138: Rule(NonTerminal('__anon_star_1'), [NonTerminal(Token(RULE, '__anon_star_1')), Terminal('_WS'), NonTerminal('ptcd')], None, None),
  139: Rule(NonTerminal('__anon_plus_2'), [NonTerminal(Token(RULE, '__anon_plus_2')), NonTerminal('_sep'), NonTerminal('tr_state')], None, None),
  140: Rule(NonTerminal('__anon_plus_2'), [NonTerminal('_sep'), NonTerminal('tr_state')], None, None),
  141: Rule(NonTerminal('__anon_star_3'), [NonTerminal(Token(RULE, '__anon_star_3')), Terminal('COMMA'), Terminal('_WS'), NonTerminal('_expr')], None, None),
  142: Rule(NonTerminal('__anon_star_3'), [Terminal('COMMA'), NonTerminal('_negation'), NonTerminal('_expr')], None, None),
  143: Rule(NonTerminal('__anon_star_3'), [NonTerminal(Token(RULE, '__anon_star_3')), Terminal('COMMA'), Terminal('_WS'), NonTerminal('_negation'), NonTerminal('_expr')], None, None),
  144: Rule(NonTerminal('__anon_star_3'), [NonTerminal(Token(RULE, '__anon_star_3')), Terminal('COMMA'), NonTerminal('_negation'), NonTerminal('_expr')], None, None),
  145: Rule(NonTerminal('__anon_star_3'), [Terminal('COMMA'), NonTerminal('_expr')], None, None),
  146: Rule(NonTerminal('__anon_star_3'), [NonTerminal(Token(RULE, '__anon_star_3')), Terminal('COMMA'), NonTerminal('_expr')], None, None),
  147: Rule(NonTerminal('__anon_star_3'), [Terminal('COMMA'), Terminal('_WS'), NonTerminal('_expr')], None, None),
  148: Rule(NonTerminal('__anon_star_3'), [Terminal('COMMA'), Terminal('_WS'), NonTerminal('_negation'), NonTerminal('_expr')], None, None),
  149: Rule(NonTerminal('__anon_star_4'), [Terminal('COMMA'), NonTerminal('_negation'), NonTerminal('_tr_expr')], None, None),
  150: Rule(NonTerminal('__anon_star_4'), [Terminal('COMMA'), Terminal('_WS'), NonTerminal('_tr_expr')], None, None),
  151: Rule(NonTerminal('__anon_star_4'), [NonTerminal(Token(RULE, '__anon_star_4')), Terminal('COMMA'), Terminal('_WS'), NonTerminal('_negation'), NonTerminal('_tr_expr')], None, None),
  152: Rule(NonTerminal('__anon_star_4'), [Terminal('COMMA'), NonTerminal('_tr_expr')], None, None),
  153: Rule(NonTerminal('__anon_star_4'), [NonTerminal(Token(RULE, '__anon_star_4')), Terminal('COMMA'), NonTerminal('_negation'), NonTerminal('_tr_expr')], None, None),
  154: Rule(NonTerminal('__anon_star_4'), [Terminal('COMMA'), Terminal('_WS'), NonTerminal('_negation'), NonTerminal('_tr_expr')], None, None),
  155: Rule(NonTerminal('__anon_star_4'), [NonTerminal(Token(RULE, '__anon_star_4')), Terminal('COMMA'), Terminal('_WS'), NonTerminal('_tr_expr')], None, None),
  156: Rule(NonTerminal('__anon_star_4'), [NonTerminal(Token(RULE, '__anon_star_4')), Terminal('COMMA'), NonTerminal('_tr_expr')], None, None),
  157: Rule(NonTerminal('__anon_star_5'), [Terminal('COMMA'), NonTerminal('_ptcd_expr')], None, None),
  158: Rule(NonTerminal('__anon_star_5'), [NonTerminal(Token(RULE, '__anon_star_5')), Terminal('COMMA'), NonTerminal('_negation'), NonTerminal('_ptcd_expr')], None, None),
  159: Rule(NonTerminal('__anon_star_5'), [NonTerminal(Token(RULE, '__anon_star_5')), Terminal('COMMA'), NonTerminal('_ptcd_expr')], None, None),
  160: Rule(NonTerminal('__anon_star_5'), [Terminal('COMMA'), Terminal('_WS'), NonTerminal('_ptcd_expr')], None, None),
  161: Rule(NonTerminal('__anon_star_5'), [Terminal('COMMA'), NonTerminal('_negation'), NonTerminal('_ptcd_expr')], None, None),
  162: Rule(NonTerminal('__anon_star_5'), [NonTerminal(Token(RULE, '__anon_star_5')), Terminal('COMMA'), Terminal('_WS'), NonTerminal('_negation'), NonTerminal('_ptcd_expr')], None, None),
  163: Rule(NonTerminal('__anon_star_5'), [NonTerminal(Token(RULE, '__anon_star_5')), Terminal('COMMA'), Terminal('_WS'), NonTerminal('_ptcd_expr')], None, None),
  164: Rule(NonTerminal('__anon_star_5'), [Terminal('COMMA'), Terminal('_WS'), NonTerminal('_negation'), NonTerminal('_ptcd_expr')], None, None),
}
parse_tree_builder = ParseTreeBuilder(RULES.values(), Tree)
class ParseTable: pass
parse_table = ParseTable()
STATES = {
  0: {0: (0, 1), 1: (0, 2), 2: (0, 3), 3: (0, 4), 4: (0, 5), 5: (0, 6), 6: (0, 7), 7: (0, 8), 8: (0, 9), 9: (0, 10), 10: (0, 11), 11: (0, 12), 12: (0, 13), 13: (0, 14), 14: (0, 15), 15: (0, 16)},
  1: {16: (1, 74), 17: (1, 74), 18: (1, 74), 19: (1, 74), 0: (1, 74), 20: (1, 74), 11: (1, 74), 10: (0, 18), 3: (1, 74), 6: (1, 74), 21: (1, 74), 22: (1, 74), 4: (1, 74), 23: (1, 74), 24: (1, 74), 25: (0, 17), 26: (0, 19)},
  2: {16: (1, 12), 6: (1, 12), 0: (1, 12), 4: (1, 12), 11: (1, 12), 10: (1, 12), 3: (1, 12), 27: (0, 20), 17: (0, 21), 23: (0, 22)},
  3: {24: (0, 23), 28: (0, 24), 29: (0, 25), 21: (0, 26), 20: (0, 27)},
  4: {16: (1, 78), 17: (1, 78), 18: (1, 78), 19: (1, 78), 0: (1, 78), 20: (1, 78), 11: (1, 78), 10: (1, 78), 3: (1, 78), 6: (1, 78), 21: (1, 78), 22: (1, 78), 4: (1, 78), 23: (1, 78), 24: (1, 78), 25: (0, 28), 30: (0, 29), 31: (0, 30)},
  5: {0: (0, 1), 2: (0, 31), 4: (0, 5), 3: (0, 32), 7: (0, 8), 9: (0, 10), 13: (0, 33), 12: (0, 13), 11: (0, 12), 15: (0, 34), 10: (0, 11)},
  6: {16: (1, 0), 0: (0, 1), 1: (0, 2), 2: (0, 3), 3: (0, 4), 4: (0, 5), 8: (0, 35), 7: (0, 8), 9: (0, 10), 6: (0, 36), 10: (0, 11), 11: (0, 12), 12: (0, 13), 13: (0, 14), 15: (0, 16)},
  7: {16: (1, 135), 6: (1, 135), 0: (1, 135), 4: (1, 135), 11: (1, 135), 10: (1, 135), 3: (1, 135)},
  8: {16: (1, 77), 17: (1, 77), 18: (1, 77), 19: (1, 77), 0: (1, 77), 20: (1, 77), 11: (1, 77), 10: (1, 77), 3: (1, 77), 6: (1, 77), 21: (1, 77), 22: (1, 77), 4: (1, 77), 23: (1, 77), 24: (1, 77)},
  9: {16: (1, 133), 6: (1, 133), 0: (1, 133), 4: (1, 133), 11: (1, 133), 10: (1, 133), 3: (1, 133)},
  10: {16: (1, 76), 17: (1, 76), 18: (1, 76), 19: (1, 76), 0: (1, 76), 20: (1, 76), 11: (1, 76), 10: (1, 76), 3: (1, 76), 6: (1, 76), 21: (1, 76), 22: (1, 76), 4: (1, 76), 23: (1, 76), 24: (1, 76)},
  11: {32: (1, 132), 0: (1, 132), 33: (1, 132), 4: (1, 132), 3: (1, 132)},
  12: {32: (1, 131), 0: (1, 131), 33: (1, 131), 4: (1, 131), 3: (1, 131)},
  13: {16: (1, 73), 17: (1, 73), 18: (1, 73), 19: (0, 37), 0: (1, 73), 20: (1, 73), 11: (1, 73), 10: (1, 73), 3: (1, 73), 6: (1, 73), 21: (1, 73), 22: (1, 73), 4: (1, 73), 23: (1, 73), 24: (1, 73)},
  14: {0: (0, 1), 2: (0, 38), 4: (0, 5), 3: (0, 32), 7: (0, 8), 9: (0, 10), 12: (0, 13), 15: (0, 16)},
  15: {16: (0, 39)},
  16: {16: (1, 75), 17: (1, 75), 18: (1, 75), 19: (1, 75), 0: (1, 75), 20: (1, 75), 11: (1, 75), 10: (1, 75), 3: (1, 75), 6: (1, 75), 21: (1, 75), 22: (1, 75), 4: (1, 75), 23: (1, 75), 24: (1, 75)},
  17: {10: (0, 40), 26: (0, 41)},
  18: {0: (0, 42), 25: (0, 43)},
  19: {0: (0, 44), 25: (0, 45)},
  20: {34: (0, 46), 35: (0, 47)},
  21: {34: (1, 40)},
  22: {34: (1, 41)},
  23: {0: (0, 1), 2: (0, 48), 4: (0, 5), 3: (0, 32), 7: (0, 8), 9: (0, 10), 12: (0, 13), 15: (0, 16)},
  24: {0: (0, 1), 2: (0, 49), 4: (0, 5), 34: (0, 50), 3: (0, 32), 33: (0, 51), 36: (0, 52), 37: (0, 53), 13: (0, 54), 7: (0, 8), 9: (0, 10), 11: (0, 12), 12: (0, 13), 15: (0, 16), 38: (0, 55), 10: (0, 11)},
  25: {28: (0, 56), 20: (0, 27), 21: (0, 26)},
  26: {34: (1, 39), 0: (1, 39), 33: (1, 39), 4: (1, 39), 11: (1, 39), 10: (1, 39), 3: (1, 39), 25: (0, 57)},
  27: {34: (1, 38), 0: (1, 38), 33: (1, 38), 4: (1, 38), 11: (1, 38), 10: (1, 38), 3: (1, 38), 25: (0, 58)},
  28: {31: (0, 59)},
  29: {25: (0, 60), 39: (0, 61)},
  30: {0: (0, 1), 2: (0, 62), 4: (0, 5), 3: (0, 32), 25: (0, 63), 7: (0, 8), 9: (0, 10), 11: (0, 12), 12: (0, 13), 13: (0, 64), 15: (0, 16), 10: (0, 11)},
  31: {24: (0, 23), 21: (0, 65), 40: (0, 66), 22: (0, 67)},
  32: {16: (1, 78), 17: (1, 78), 18: (1, 78), 19: (1, 78), 0: (1, 78), 20: (1, 78), 11: (1, 78), 10: (1, 78), 3: (1, 78), 6: (1, 78), 21: (1, 78), 22: (1, 78), 4: (1, 78), 23: (1, 78), 24: (1, 78)},
  33: {0: (0, 1), 2: (0, 68), 4: (0, 5), 3: (0, 32), 7: (0, 8), 9: (0, 10), 12: (0, 13), 15: (0, 16)},
  34: {16: (1, 75), 17: (1, 75), 18: (1, 75), 19: (1, 75), 0: (1, 75), 20: (1, 75), 11: (1, 75), 10: (1, 75), 3: (1, 75), 6: (1, 75), 21: (1, 75), 22: (0, 69), 4: (1, 75), 23: (1, 75), 24: (1, 75)},
  35: {16: (1, 136), 6: (1, 136), 0: (1, 136), 4: (1, 136), 11: (1, 136), 10: (1, 136), 3: (1, 136)},
  36: {16: (1, 134), 6: (1, 134), 0: (1, 134), 4: (1, 134), 11: (1, 134), 10: (1, 134), 3: (1, 134)},
  37: {0: (0, 1), 2: (0, 70), 4: (0, 5), 3: (0, 32), 7: (0, 8), 9: (0, 10), 12: (0, 13), 15: (0, 16)},
  38: {24: (0, 23), 29: (0, 71), 21: (0, 26), 20: (0, 27), 28: (0, 24)},
  39: {},
  40: {25: (0, 72), 0: (0, 73)},
  41: {0: (0, 74), 25: (0, 75)},
  42: {26: (0, 76), 25: (0, 77)},
  43: {0: (0, 78)},
  44: {16: (1, 111), 17: (1, 111), 18: (1, 111), 19: (1, 111), 0: (1, 111), 20: (1, 111), 11: (1, 111), 10: (1, 111), 3: (1, 111), 6: (1, 111), 21: (1, 111), 22: (1, 111), 4: (1, 111), 23: (1, 111), 41: (1, 111), 24: (1, 111)},
  45: {0: (0, 79)},
  46: {33: (0, 80), 30: (0, 81)},
  47: {16: (1, 4), 6: (1, 4), 0: (1, 4), 4: (1, 4), 11: (1, 4), 10: (1, 4), 3: (1, 4), 42: (0, 82), 25: (0, 83)},
  48: {16: (1, 80), 17: (1, 80), 18: (1, 80), 19: (1, 80), 0: (1, 80), 20: (1, 80), 11: (1, 80), 10: (1, 80), 3: (1, 80), 6: (1, 80), 21: (1, 80), 22: (1, 80), 4: (1, 80), 23: (1, 80), 24: (0, 23)},
  49: {20: (1, 24), 21: (1, 24), 18: (0, 84), 24: (0, 23)},
  50: {25: (1, 34), 26: (0, 85)},
  51: {43: (0, 86)},
  52: {25: (0, 87)},
  53: {20: (1, 23), 21: (1, 23), 18: (0, 88)},
  54: {0: (0, 1), 2: (0, 89), 4: (0, 5), 3: (0, 32), 33: (0, 51), 7: (0, 8), 9: (0, 10), 37: (0, 90), 12: (0, 13), 15: (0, 16)},
  55: {20: (1, 140), 21: (1, 140)},
  56: {0: (0, 1), 2: (0, 91), 4: (0, 5), 34: (0, 50), 3: (0, 32), 33: (0, 51), 36: (0, 52), 37: (0, 92), 13: (0, 54), 7: (0, 8), 38: (0, 93), 9: (0, 10), 12: (0, 13), 11: (0, 12), 15: (0, 16), 10: (0, 11)},
  57: {34: (1, 37), 0: (1, 37), 33: (1, 37), 4: (1, 37), 11: (1, 37), 10: (1, 37), 3: (1, 37)},
  58: {34: (1, 36), 0: (1, 36), 33: (1, 36), 4: (1, 36), 11: (1, 36), 10: (1, 36), 3: (1, 36)},
  59: {0: (0, 1), 2: (0, 94), 25: (0, 95), 4: (0, 5), 3: (0, 32), 7: (0, 8), 9: (0, 10), 13: (0, 96), 11: (0, 12), 12: (0, 13), 15: (0, 16), 10: (0, 11)},
  60: {39: (0, 97)},
  61: {16: (1, 5), 6: (1, 5), 0: (1, 5), 4: (1, 5), 11: (1, 5), 10: (1, 5), 3: (1, 5)},
  62: {16: (1, 2), 6: (1, 2), 0: (1, 2), 4: (1, 2), 11: (1, 2), 10: (1, 2), 3: (1, 2), 24: (0, 23)},
  63: {0: (0, 1), 2: (0, 98), 4: (0, 5), 3: (0, 32), 7: (0, 8), 9: (0, 10), 12: (0, 13), 11: (0, 12), 13: (0, 99), 15: (0, 16), 10: (0, 11)},
  64: {0: (0, 1), 2: (0, 100), 4: (0, 5), 3: (0, 32), 7: (0, 8), 9: (0, 10), 12: (0, 13), 15: (0, 16)},
  65: {0: (0, 1), 2: (0, 101), 4: (0, 5), 3: (0, 32), 13: (0, 102), 25: (0, 103), 7: (0, 8), 9: (0, 10), 11: (0, 12), 12: (0, 13), 15: (0, 16), 10: (0, 11)},
  66: {22: (0, 104), 21: (0, 105)},
  67: {16: (1, 43), 17: (1, 43), 18: (1, 43), 19: (1, 43), 0: (1, 43), 20: (1, 43), 11: (1, 43), 10: (1, 43), 3: (1, 43), 6: (1, 43), 21: (1, 43), 22: (1, 43), 4: (1, 43), 23: (1, 43), 24: (1, 43)},
  68: {24: (0, 23), 21: (0, 65), 40: (0, 106), 22: (0, 107)},
  69: {16: (1, 44), 17: (1, 44), 18: (1, 44), 19: (1, 44), 0: (1, 44), 20: (1, 44), 11: (1, 44), 10: (1, 44), 3: (1, 44), 6: (1, 44), 21: (1, 44), 22: (1, 44), 4: (1, 44), 23: (1, 44), 24: (1, 44)},
  70: {16: (1, 79), 17: (1, 79), 18: (1, 79), 19: (1, 79), 0: (1, 79), 20: (1, 79), 11: (1, 79), 10: (1, 79), 3: (1, 79), 6: (1, 79), 21: (1, 79), 22: (1, 79), 4: (1, 79), 23: (1, 79), 24: (0, 23)},
  71: {28: (0, 108), 20: (0, 27), 21: (0, 26)},
  72: {0: (0, 109)},
  73: {26: (0, 110), 25: (0, 111)},
  74: {16: (1, 120), 17: (1, 120), 18: (1, 120), 19: (1, 120), 0: (1, 120), 20: (1, 120), 11: (1, 120), 10: (1, 120), 3: (1, 120), 6: (1, 120), 21: (1, 120), 22: (1, 120), 4: (1, 120), 23: (1, 120), 41: (1, 120), 24: (1, 120)},
  75: {0: (0, 112)},
  76: {25: (0, 113), 0: (0, 114)},
  77: {26: (0, 115)},
  78: {25: (0, 116), 26: (0, 117)},
  79: {16: (1, 119), 17: (1, 119), 18: (1, 119), 19: (1, 119), 0: (1, 119), 20: (1, 119), 11: (1, 119), 10: (1, 119), 3: (1, 119), 6: (1, 119), 21: (1, 119), 22: (1, 119), 4: (1, 119), 23: (1, 119), 41: (1, 119), 24: (1, 119)},
  80: {44: (0, 118), 0: (0, 119), 4: (0, 120), 45: (0, 121), 33: (0, 51), 46: (0, 122), 43: (0, 123), 32: (0, 124), 47: (0, 125), 3: (0, 126), 15: (0, 127), 48: (0, 128), 37: (0, 129)},
  81: {0: (0, 130)},
  82: {16: (1, 3), 6: (1, 3), 0: (1, 3), 4: (1, 3), 11: (1, 3), 10: (1, 3), 3: (1, 3), 25: (0, 131)},
  83: {35: (0, 132), 34: (0, 46)},
  84: {49: (0, 133)},
  85: {34: (0, 134)},
  86: {30: (0, 135), 41: (0, 136)},
  87: {0: (0, 1), 13: (0, 137), 2: (0, 138), 4: (0, 5), 3: (0, 32), 33: (0, 51), 7: (0, 8), 9: (0, 10), 11: (0, 12), 12: (0, 13), 37: (0, 139), 15: (0, 16), 10: (0, 11)},
  88: {49: (0, 140)},
  89: {20: (1, 31), 21: (1, 31), 18: (0, 141), 24: (0, 23)},
  90: {20: (1, 32), 21: (1, 32), 18: (0, 142)},
  91: {20: (1, 24), 21: (1, 24), 16: (1, 16), 6: (1, 16), 17: (1, 16), 0: (1, 16), 4: (1, 16), 23: (1, 16), 11: (1, 16), 10: (1, 16), 3: (1, 16), 18: (0, 84), 24: (0, 23)},
  92: {20: (1, 23), 21: (1, 23), 16: (1, 14), 6: (1, 14), 17: (1, 14), 0: (1, 14), 4: (1, 14), 23: (1, 14), 11: (1, 14), 10: (1, 14), 3: (1, 14), 18: (0, 88)},
  93: {20: (1, 139), 21: (1, 139)},
  94: {16: (1, 8), 6: (1, 8), 0: (1, 8), 4: (1, 8), 11: (1, 8), 10: (1, 8), 3: (1, 8), 24: (0, 23)},
  95: {0: (0, 1), 2: (0, 143), 4: (0, 5), 13: (0, 144), 3: (0, 32), 7: (0, 8), 9: (0, 10), 12: (0, 13), 11: (0, 12), 15: (0, 16), 10: (0, 11)},
  96: {0: (0, 1), 2: (0, 145), 4: (0, 5), 3: (0, 32), 7: (0, 8), 9: (0, 10), 12: (0, 13), 15: (0, 16)},
  97: {16: (1, 13), 6: (1, 13), 0: (1, 13), 4: (1, 13), 11: (1, 13), 10: (1, 13), 3: (1, 13)},
  98: {16: (1, 9), 6: (1, 9), 0: (1, 9), 4: (1, 9), 11: (1, 9), 10: (1, 9), 3: (1, 9), 24: (0, 23)},
  99: {0: (0, 1), 2: (0, 146), 4: (0, 5), 3: (0, 32), 7: (0, 8), 9: (0, 10), 12: (0, 13), 15: (0, 16)},
  100: {16: (1, 10), 6: (1, 10), 0: (1, 10), 4: (1, 10), 11: (1, 10), 10: (1, 10), 3: (1, 10), 24: (0, 23)},
  101: {22: (1, 145), 21: (1, 145), 24: (0, 23)},
  102: {0: (0, 1), 2: (0, 147), 4: (0, 5), 3: (0, 32), 7: (0, 8), 9: (0, 10), 12: (0, 13), 15: (0, 16)},
  103: {0: (0, 1), 2: (0, 148), 4: (0, 5), 3: (0, 32), 7: (0, 8), 9: (0, 10), 13: (0, 149), 12: (0, 13), 11: (0, 12), 15: (0, 16), 10: (0, 11)},
  104: {16: (1, 45), 17: (1, 45), 18: (1, 45), 19: (1, 45), 0: (1, 45), 20: (1, 45), 11: (1, 45), 10: (1, 45), 3: (1, 45), 6: (1, 45), 21: (1, 45), 22: (1, 45), 4: (1, 45), 23: (1, 45), 24: (1, 45)},
  105: {25: (0, 150), 0: (0, 1), 2: (0, 151), 4: (0, 5), 3: (0, 32), 13: (0, 152), 7: (0, 8), 9: (0, 10), 12: (0, 13), 11: (0, 12), 15: (0, 16), 10: (0, 11)},
  106: {22: (0, 153), 21: (0, 105)},
  107: {16: (1, 46), 17: (1, 46), 18: (1, 46), 19: (1, 46), 0: (1, 46), 20: (1, 46), 11: (1, 46), 10: (1, 46), 3: (1, 46), 6: (1, 46), 21: (1, 46), 22: (1, 46), 4: (1, 46), 23: (1, 46), 24: (1, 46)},
  108: {0: (0, 1), 2: (0, 154), 37: (0, 155), 4: (0, 5), 34: (0, 50), 3: (0, 32), 33: (0, 51), 36: (0, 52), 13: (0, 54), 7: (0, 8), 38: (0, 93), 9: (0, 10), 12: (0, 13), 11: (0, 12), 15: (0, 16), 10: (0, 11)},
  109: {25: (0, 156), 26: (0, 157)},
  110: {25: (0, 158), 0: (0, 159)},
  111: {26: (0, 160)},
  112: {16: (1, 128), 17: (1, 128), 18: (1, 128), 19: (1, 128), 0: (1, 128), 20: (1, 128), 11: (1, 128), 10: (1, 128), 3: (1, 128), 6: (1, 128), 21: (1, 128), 22: (1, 128), 4: (1, 128), 23: (1, 128), 41: (1, 128), 24: (1, 128)},
  113: {0: (0, 161)},
  114: {16: (1, 123), 17: (1, 123), 18: (1, 123), 19: (1, 123), 0: (1, 123), 20: (1, 123), 11: (1, 123), 10: (1, 123), 3: (1, 123), 6: (1, 123), 21: (1, 123), 22: (1, 123), 4: (1, 123), 23: (1, 123), 41: (1, 123), 24: (1, 123)},
  115: {0: (0, 162), 25: (0, 163)},
  116: {26: (0, 164)},
  117: {0: (0, 165), 25: (0, 166)},
  118: {41: (0, 167), 30: (0, 168)},
  119: {21: (1, 91), 19: (1, 91), 22: (1, 91), 41: (1, 91), 24: (1, 91), 25: (0, 17), 10: (0, 18), 26: (0, 19)},
  120: {0: (0, 119), 4: (0, 120), 45: (0, 121), 48: (0, 169), 33: (0, 51), 13: (0, 170), 15: (0, 171), 32: (0, 124), 46: (0, 172), 47: (0, 125), 3: (0, 126), 11: (0, 12), 37: (0, 129), 10: (0, 11)},
  121: {21: (1, 95), 19: (1, 95), 22: (1, 95), 41: (1, 95), 24: (1, 95)},
  122: {21: (1, 90), 19: (0, 174), 22: (1, 90), 41: (0, 173), 24: (1, 90)},
  123: {30: (0, 175), 41: (0, 176)},
  124: {21: (1, 94), 19: (1, 94), 22: (1, 94), 41: (1, 94), 24: (1, 94)},
  125: {21: (1, 93), 19: (1, 93), 22: (1, 93), 41: (1, 93), 24: (1, 93)},
  126: {21: (1, 97), 19: (1, 97), 22: (1, 97), 41: (1, 97), 24: (1, 97)},
  127: {21: (1, 92), 19: (1, 92), 22: (1, 92), 41: (1, 92), 24: (1, 92)},
  128: {24: (0, 177)},
  129: {21: (1, 96), 19: (1, 96), 22: (1, 96), 41: (1, 96), 24: (1, 96)},
  130: {16: (1, 106), 6: (1, 106), 25: (1, 106), 0: (1, 106), 4: (1, 106), 11: (1, 106), 10: (1, 106), 3: (1, 106)},
  131: {34: (0, 46), 35: (0, 178)},
  132: {16: (1, 137), 6: (1, 137), 25: (1, 137), 0: (1, 137), 4: (1, 137), 11: (1, 137), 10: (1, 137), 3: (1, 137)},
  133: {20: (1, 26), 21: (1, 26)},
  134: {25: (1, 35)},
  135: {0: (0, 179), 4: (0, 180), 50: (0, 181), 33: (0, 51), 51: (0, 182), 37: (0, 183), 25: (0, 184), 52: (0, 185), 53: (0, 186), 15: (0, 187), 3: (0, 188)},
  136: {16: (1, 109), 17: (1, 109), 18: (1, 109), 19: (1, 109), 0: (1, 109), 20: (1, 109), 11: (1, 109), 10: (1, 109), 3: (1, 109), 6: (1, 109), 21: (1, 109), 22: (1, 109), 4: (1, 109), 23: (1, 109), 41: (1, 109), 24: (1, 109)},
  137: {0: (0, 1), 2: (0, 189), 4: (0, 5), 37: (0, 190), 3: (0, 32), 33: (0, 51), 7: (0, 8), 9: (0, 10), 12: (0, 13), 15: (0, 16)},
  138: {20: (1, 19), 21: (1, 19), 18: (0, 191), 24: (0, 23)},
  139: {20: (1, 20), 21: (1, 20), 18: (0, 192)},
  140: {20: (1, 27), 21: (1, 27)},
  141: {49: (0, 193)},
  142: {49: (0, 194)},
  143: {16: (1, 6), 6: (1, 6), 0: (1, 6), 4: (1, 6), 11: (1, 6), 10: (1, 6), 3: (1, 6), 24: (0, 23)},
  144: {0: (0, 1), 2: (0, 195), 4: (0, 5), 3: (0, 32), 7: (0, 8), 9: (0, 10), 12: (0, 13), 15: (0, 16)},
  145: {16: (1, 11), 6: (1, 11), 0: (1, 11), 4: (1, 11), 11: (1, 11), 10: (1, 11), 3: (1, 11), 24: (0, 23)},
  146: {16: (1, 7), 6: (1, 7), 0: (1, 7), 4: (1, 7), 11: (1, 7), 10: (1, 7), 3: (1, 7), 24: (0, 23)},
  147: {22: (1, 142), 21: (1, 142), 24: (0, 23)},
  148: {22: (1, 147), 21: (1, 147), 24: (0, 23)},
  149: {0: (0, 1), 2: (0, 196), 4: (0, 5), 3: (0, 32), 7: (0, 8), 9: (0, 10), 12: (0, 13), 15: (0, 16)},
  150: {0: (0, 1), 2: (0, 197), 4: (0, 5), 3: (0, 32), 7: (0, 8), 9: (0, 10), 11: (0, 12), 12: (0, 13), 13: (0, 198), 15: (0, 16), 10: (0, 11)},
  151: {22: (1, 146), 21: (1, 146), 24: (0, 23)},
  152: {0: (0, 1), 2: (0, 199), 4: (0, 5), 3: (0, 32), 7: (0, 8), 9: (0, 10), 12: (0, 13), 15: (0, 16)},
  153: {16: (1, 42), 17: (1, 42), 18: (1, 42), 19: (1, 42), 0: (1, 42), 20: (1, 42), 11: (1, 42), 10: (1, 42), 3: (1, 42), 6: (1, 42), 21: (1, 42), 22: (1, 42), 4: (1, 42), 23: (1, 42), 24: (1, 42)},
  154: {20: (1, 24), 21: (1, 24), 16: (1, 15), 6: (1, 15), 17: (1, 15), 0: (1, 15), 4: (1, 15), 23: (1, 15), 11: (1, 15), 10: (1, 15), 3: (1, 15), 18: (0, 84), 24: (0, 23)},
  155: {20: (1, 23), 21: (1, 23), 16: (1, 17), 6: (1, 17), 17: (1, 17), 0: (1, 17), 4: (1, 17), 23: (1, 17), 11: (1, 17), 10: (1, 17), 3: (1, 17), 18: (0, 88)},
  156: {26: (0, 200)},
  157: {0: (0, 201), 25: (0, 202)},
  158: {0: (0, 203)},
  159: {16: (1, 126), 17: (1, 126), 18: (1, 126), 19: (1, 126), 0: (1, 126), 20: (1, 126), 11: (1, 126), 10: (1, 126), 3: (1, 126), 6: (1, 126), 21: (1, 126), 22: (1, 126), 4: (1, 126), 23: (1, 126), 41: (1, 126), 24: (1, 126)},
  160: {25: (0, 204), 0: (0, 205)},
  161: {16: (1, 127), 17: (1, 127), 18: (1, 127), 19: (1, 127), 0: (1, 127), 20: (1, 127), 11: (1, 127), 10: (1, 127), 3: (1, 127), 6: (1, 127), 21: (1, 127), 22: (1, 127), 4: (1, 127), 23: (1, 127), 41: (1, 127), 24: (1, 127)},
  162: {16: (1, 115), 17: (1, 115), 18: (1, 115), 19: (1, 115), 0: (1, 115), 20: (1, 115), 11: (1, 115), 10: (1, 115), 3: (1, 115), 6: (1, 115), 21: (1, 115), 22: (1, 115), 4: (1, 115), 23: (1, 115), 41: (1, 115), 24: (1, 115)},
  163: {0: (0, 206)},
  164: {25: (0, 207), 0: (0, 208)},
  165: {16: (1, 122), 17: (1, 122), 18: (1, 122), 19: (1, 122), 0: (1, 122), 20: (1, 122), 11: (1, 122), 10: (1, 122), 3: (1, 122), 6: (1, 122), 21: (1, 122), 22: (1, 122), 4: (1, 122), 23: (1, 122), 41: (1, 122), 24: (1, 122)},
  166: {0: (0, 209)},
  167: {16: (1, 105), 6: (1, 105), 25: (1, 105), 0: (1, 105), 4: (1, 105), 11: (1, 105), 10: (1, 105), 3: (1, 105)},
  168: {0: (0, 119), 4: (0, 120), 45: (0, 121), 33: (0, 51), 25: (0, 210), 32: (0, 124), 46: (0, 211), 47: (0, 125), 3: (0, 126), 15: (0, 127), 48: (0, 128), 37: (0, 129)},
  169: {54: (0, 212), 22: (0, 213), 21: (0, 214), 24: (0, 177)},
  170: {0: (0, 119), 4: (0, 120), 45: (0, 121), 48: (0, 215), 33: (0, 51), 32: (0, 124), 46: (0, 172), 47: (0, 125), 3: (0, 126), 15: (0, 127), 37: (0, 129)},
  171: {21: (1, 92), 19: (1, 92), 22: (0, 216), 41: (1, 92), 24: (1, 92)},
  172: {21: (1, 90), 19: (0, 174), 22: (1, 90), 41: (1, 90), 24: (1, 90)},
  173: {16: (1, 102), 6: (1, 102), 25: (1, 102), 0: (1, 102), 4: (1, 102), 11: (1, 102), 10: (1, 102), 3: (1, 102)},
  174: {0: (0, 119), 4: (0, 120), 45: (0, 121), 33: (0, 51), 32: (0, 124), 46: (0, 172), 47: (0, 125), 3: (0, 126), 15: (0, 127), 48: (0, 217), 37: (0, 129)},
  175: {0: (0, 119), 4: (0, 120), 45: (0, 121), 33: (0, 51), 46: (0, 218), 32: (0, 124), 25: (0, 219), 47: (0, 125), 3: (0, 126), 15: (0, 127), 48: (0, 128), 37: (0, 129)},
  176: {16: (1, 101), 6: (1, 101), 25: (1, 101), 0: (1, 101), 4: (1, 101), 11: (1, 101), 10: (1, 101), 3: (1, 101)},
  177: {0: (0, 119), 4: (0, 120), 45: (0, 121), 33: (0, 51), 32: (0, 124), 46: (0, 172), 48: (0, 220), 47: (0, 125), 3: (0, 126), 15: (0, 127), 37: (0, 129)},
  178: {16: (1, 138), 6: (1, 138), 25: (1, 138), 0: (1, 138), 4: (1, 138), 11: (1, 138), 10: (1, 138), 3: (1, 138)},
  179: {21: (1, 82), 19: (1, 82), 22: (1, 82), 41: (1, 82), 24: (1, 82), 25: (0, 17), 10: (0, 18), 26: (0, 19)},
  180: {0: (0, 179), 4: (0, 180), 51: (0, 221), 50: (0, 181), 33: (0, 51), 13: (0, 222), 37: (0, 183), 11: (0, 12), 53: (0, 186), 15: (0, 223), 3: (0, 188), 52: (0, 224), 10: (0, 11)},
  181: {21: (1, 87), 19: (1, 87), 22: (1, 87), 41: (1, 87), 24: (1, 87)},
  182: {24: (0, 225)},
  183: {21: (1, 84), 19: (1, 84), 22: (1, 84), 41: (1, 84), 24: (1, 84)},
  184: {0: (0, 179), 4: (0, 180), 52: (0, 226), 50: (0, 181), 33: (0, 51), 51: (0, 182), 37: (0, 183), 53: (0, 186), 15: (0, 187), 3: (0, 188)},
  185: {21: (1, 81), 19: (0, 227), 22: (1, 81), 41: (0, 228), 24: (1, 81)},
  186: {21: (1, 85), 19: (1, 85), 22: (1, 85), 41: (1, 85), 24: (1, 85)},
  187: {21: (1, 83), 19: (1, 83), 22: (1, 83), 41: (1, 83), 24: (1, 83)},
  188: {21: (1, 86), 19: (1, 86), 22: (1, 86), 41: (1, 86), 24: (1, 86)},
  189: {20: (1, 22), 21: (1, 22), 18: (0, 229), 24: (0, 23)},
  190: {20: (1, 25), 21: (1, 25), 18: (0, 230)},
  191: {49: (0, 231)},
  192: {49: (0, 232)},
  193: {20: (1, 33), 21: (1, 33)},
  194: {20: (1, 30), 21: (1, 30)},
  195: {16: (1, 1), 6: (1, 1), 0: (1, 1), 4: (1, 1), 11: (1, 1), 10: (1, 1), 3: (1, 1), 24: (0, 23)},
  196: {22: (1, 148), 21: (1, 148), 24: (0, 23)},
  197: {22: (1, 141), 21: (1, 141), 24: (0, 23)},
  198: {0: (0, 1), 2: (0, 233), 4: (0, 5), 3: (0, 32), 7: (0, 8), 9: (0, 10), 12: (0, 13), 15: (0, 16)},
  199: {22: (1, 144), 21: (1, 144), 24: (0, 23)},
  200: {25: (0, 234), 0: (0, 235)},
  201: {16: (1, 124), 17: (1, 124), 18: (1, 124), 19: (1, 124), 0: (1, 124), 20: (1, 124), 11: (1, 124), 10: (1, 124), 3: (1, 124), 6: (1, 124), 21: (1, 124), 22: (1, 124), 4: (1, 124), 23: (1, 124), 41: (1, 124), 24: (1, 124)},
  202: {0: (0, 236)},
  203: {16: (1, 118), 17: (1, 118), 18: (1, 118), 19: (1, 118), 0: (1, 118), 20: (1, 118), 11: (1, 118), 10: (1, 118), 3: (1, 118), 6: (1, 118), 21: (1, 118), 22: (1, 118), 4: (1, 118), 23: (1, 118), 41: (1, 118), 24: (1, 118)},
  204: {0: (0, 237)},
  205: {16: (1, 113), 17: (1, 113), 18: (1, 113), 19: (1, 113), 0: (1, 113), 20: (1, 113), 11: (1, 113), 10: (1, 113), 3: (1, 113), 6: (1, 113), 21: (1, 113), 22: (1, 113), 4: (1, 113), 23: (1, 113), 41: (1, 113), 24: (1, 113)},
  206: {16: (1, 121), 17: (1, 121), 18: (1, 121), 19: (1, 121), 0: (1, 121), 20: (1, 121), 11: (1, 121), 10: (1, 121), 3: (1, 121), 6: (1, 121), 21: (1, 121), 22: (1, 121), 4: (1, 121), 23: (1, 121), 41: (1, 121), 24: (1, 121)},
  207: {0: (0, 238)},
  208: {16: (1, 112), 17: (1, 112), 18: (1, 112), 19: (1, 112), 0: (1, 112), 20: (1, 112), 11: (1, 112), 10: (1, 112), 3: (1, 112), 6: (1, 112), 21: (1, 112), 22: (1, 112), 4: (1, 112), 23: (1, 112), 41: (1, 112), 24: (1, 112)},
  209: {16: (1, 129), 17: (1, 129), 18: (1, 129), 19: (1, 129), 0: (1, 129), 20: (1, 129), 11: (1, 129), 10: (1, 129), 3: (1, 129), 6: (1, 129), 21: (1, 129), 22: (1, 129), 4: (1, 129), 23: (1, 129), 41: (1, 129), 24: (1, 129)},
  210: {0: (0, 119), 4: (0, 120), 45: (0, 121), 33: (0, 51), 32: (0, 124), 46: (0, 239), 47: (0, 125), 3: (0, 126), 15: (0, 127), 48: (0, 128), 37: (0, 129)},
  211: {21: (1, 90), 19: (0, 174), 22: (1, 90), 41: (0, 240), 24: (1, 90)},
  212: {22: (0, 241), 21: (0, 242)},
  213: {21: (1, 71), 19: (1, 71), 22: (1, 71), 41: (1, 71), 24: (1, 71)},
  214: {0: (0, 119), 4: (0, 120), 45: (0, 121), 55: (0, 243), 33: (0, 51), 13: (0, 244), 32: (0, 124), 46: (0, 172), 25: (0, 245), 47: (0, 125), 3: (0, 126), 10: (0, 11), 11: (0, 12), 15: (0, 127), 48: (0, 246), 37: (0, 129)},
  215: {21: (0, 247), 54: (0, 248), 24: (0, 177), 22: (0, 249)},
  216: {21: (1, 60), 19: (1, 60), 22: (1, 60), 41: (1, 60), 24: (1, 60)},
  217: {21: (1, 99), 19: (1, 99), 22: (1, 99), 41: (1, 99), 24: (0, 177)},
  218: {21: (1, 90), 19: (0, 174), 22: (1, 90), 41: (0, 250), 24: (1, 90)},
  219: {0: (0, 119), 4: (0, 120), 45: (0, 121), 46: (0, 251), 33: (0, 51), 32: (0, 124), 47: (0, 125), 3: (0, 126), 15: (0, 127), 48: (0, 128), 37: (0, 129)},
  220: {21: (1, 98), 19: (1, 98), 22: (1, 98), 41: (1, 98), 24: (0, 177)},
  221: {21: (0, 252), 56: (0, 253), 22: (0, 254), 24: (0, 225)},
  222: {0: (0, 179), 4: (0, 180), 50: (0, 181), 51: (0, 255), 33: (0, 51), 37: (0, 183), 53: (0, 186), 15: (0, 187), 3: (0, 188), 52: (0, 224)},
  223: {21: (1, 83), 19: (1, 83), 22: (0, 256), 41: (1, 83), 24: (1, 83)},
  224: {21: (1, 81), 19: (0, 227), 22: (1, 81), 41: (1, 81), 24: (1, 81)},
  225: {0: (0, 179), 4: (0, 180), 50: (0, 181), 33: (0, 51), 51: (0, 257), 37: (0, 183), 53: (0, 186), 15: (0, 187), 3: (0, 188), 52: (0, 224)},
  226: {21: (1, 81), 19: (0, 227), 22: (1, 81), 41: (0, 258), 24: (1, 81)},
  227: {0: (0, 179), 4: (0, 180), 50: (0, 181), 33: (0, 51), 51: (0, 259), 37: (0, 183), 53: (0, 186), 15: (0, 187), 3: (0, 188), 52: (0, 224)},
  228: {16: (1, 108), 17: (1, 108), 18: (1, 108), 19: (1, 108), 0: (1, 108), 20: (1, 108), 11: (1, 108), 10: (1, 108), 3: (1, 108), 6: (1, 108), 21: (1, 108), 22: (1, 108), 4: (1, 108), 23: (1, 108), 41: (1, 108), 24: (1, 108)},
  229: {49: (0, 260)},
  230: {49: (0, 261)},
  231: {20: (1, 18), 21: (1, 18)},
  232: {20: (1, 28), 21: (1, 28)},
  233: {22: (1, 143), 21: (1, 143), 24: (0, 23)},
  234: {0: (0, 262)},
  235: {16: (1, 125), 17: (1, 125), 18: (1, 125), 19: (1, 125), 0: (1, 125), 20: (1, 125), 11: (1, 125), 10: (1, 125), 3: (1, 125), 6: (1, 125), 21: (1, 125), 22: (1, 125), 4: (1, 125), 23: (1, 125), 41: (1, 125), 24: (1, 125)},
  236: {16: (1, 117), 17: (1, 117), 18: (1, 117), 19: (1, 117), 0: (1, 117), 20: (1, 117), 11: (1, 117), 10: (1, 117), 3: (1, 117), 6: (1, 117), 21: (1, 117), 22: (1, 117), 4: (1, 117), 23: (1, 117), 41: (1, 117), 24: (1, 117)},
  237: {16: (1, 116), 17: (1, 116), 18: (1, 116), 19: (1, 116), 0: (1, 116), 20: (1, 116), 11: (1, 116), 10: (1, 116), 3: (1, 116), 6: (1, 116), 21: (1, 116), 22: (1, 116), 4: (1, 116), 23: (1, 116), 41: (1, 116), 24: (1, 116)},
  238: {16: (1, 130), 17: (1, 130), 18: (1, 130), 19: (1, 130), 0: (1, 130), 20: (1, 130), 11: (1, 130), 10: (1, 130), 3: (1, 130), 6: (1, 130), 21: (1, 130), 22: (1, 130), 4: (1, 130), 23: (1, 130), 41: (1, 130), 24: (1, 130)},
  239: {21: (1, 90), 19: (0, 174), 22: (1, 90), 41: (0, 263), 24: (1, 90)},
  240: {16: (1, 103), 6: (1, 103), 25: (1, 103), 0: (1, 103), 4: (1, 103), 11: (1, 103), 10: (1, 103), 3: (1, 103)},
  241: {21: (1, 61), 19: (1, 61), 22: (1, 61), 41: (1, 61), 24: (1, 61)},
  242: {0: (0, 119), 4: (0, 120), 45: (0, 121), 33: (0, 51), 25: (0, 264), 32: (0, 124), 46: (0, 172), 13: (0, 265), 47: (0, 125), 3: (0, 126), 11: (0, 12), 15: (0, 127), 55: (0, 266), 48: (0, 267), 37: (0, 129), 10: (0, 11)},
  243: {22: (0, 268)},
  244: {0: (0, 119), 4: (0, 120), 45: (0, 121), 33: (0, 51), 32: (0, 124), 46: (0, 172), 48: (0, 269), 47: (0, 125), 3: (0, 126), 15: (0, 127), 37: (0, 129)},
  245: {0: (0, 119), 4: (0, 120), 45: (0, 121), 48: (0, 270), 33: (0, 51), 32: (0, 124), 46: (0, 172), 47: (0, 125), 3: (0, 126), 55: (0, 271), 13: (0, 272), 10: (0, 11), 11: (0, 12), 15: (0, 127), 37: (0, 129)},
  246: {22: (1, 157), 21: (1, 157), 24: (0, 177)},
  247: {0: (0, 119), 4: (0, 120), 45: (0, 121), 33: (0, 51), 13: (0, 244), 32: (0, 124), 46: (0, 172), 55: (0, 273), 25: (0, 274), 47: (0, 125), 3: (0, 126), 10: (0, 11), 11: (0, 12), 15: (0, 127), 48: (0, 246), 37: (0, 129)},
  248: {21: (0, 275), 22: (0, 276)},
  249: {21: (1, 62), 19: (1, 62), 22: (1, 62), 41: (1, 62), 24: (1, 62)},
  250: {16: (1, 107), 6: (1, 107), 25: (1, 107), 0: (1, 107), 4: (1, 107), 11: (1, 107), 10: (1, 107), 3: (1, 107)},
  251: {21: (1, 90), 19: (0, 174), 22: (1, 90), 41: (0, 277), 24: (1, 90)},
  252: {25: (0, 278), 0: (0, 179), 4: (0, 180), 50: (0, 181), 55: (0, 279), 33: (0, 51), 13: (0, 280), 51: (0, 281), 37: (0, 183), 53: (0, 186), 11: (0, 12), 15: (0, 187), 3: (0, 188), 52: (0, 224), 10: (0, 11)},
  253: {21: (0, 282), 22: (0, 283)},
  254: {21: (1, 52), 19: (1, 52), 22: (1, 52), 41: (1, 52), 24: (1, 52)},
  255: {21: (0, 284), 56: (0, 285), 22: (0, 286), 24: (0, 225)},
  256: {21: (1, 48), 19: (1, 48), 22: (1, 48), 41: (1, 48), 24: (1, 48)},
  257: {21: (1, 89), 19: (1, 89), 22: (1, 89), 41: (1, 89), 24: (0, 225)},
  258: {16: (1, 110), 17: (1, 110), 18: (1, 110), 19: (1, 110), 0: (1, 110), 20: (1, 110), 11: (1, 110), 10: (1, 110), 3: (1, 110), 6: (1, 110), 21: (1, 110), 22: (1, 110), 4: (1, 110), 23: (1, 110), 41: (1, 110), 24: (1, 110)},
  259: {21: (1, 88), 19: (1, 88), 22: (1, 88), 41: (1, 88), 24: (0, 225)},
  260: {20: (1, 21), 21: (1, 21)},
  261: {20: (1, 29), 21: (1, 29)},
  262: {16: (1, 114), 17: (1, 114), 18: (1, 114), 19: (1, 114), 0: (1, 114), 20: (1, 114), 11: (1, 114), 10: (1, 114), 3: (1, 114), 6: (1, 114), 21: (1, 114), 22: (1, 114), 4: (1, 114), 23: (1, 114), 41: (1, 114), 24: (1, 114)},
  263: {16: (1, 104), 6: (1, 104), 25: (1, 104), 0: (1, 104), 4: (1, 104), 11: (1, 104), 10: (1, 104), 3: (1, 104)},
  264: {0: (0, 119), 4: (0, 120), 45: (0, 121), 33: (0, 51), 32: (0, 124), 46: (0, 172), 48: (0, 287), 47: (0, 125), 3: (0, 126), 13: (0, 288), 55: (0, 289), 10: (0, 11), 11: (0, 12), 15: (0, 127), 37: (0, 129)},
  265: {0: (0, 119), 4: (0, 120), 48: (0, 290), 45: (0, 121), 33: (0, 51), 32: (0, 124), 46: (0, 172), 47: (0, 125), 3: (0, 126), 15: (0, 127), 37: (0, 129)},
  266: {22: (0, 291)},
  267: {22: (1, 159), 21: (1, 159), 24: (0, 177)},
  268: {21: (1, 64), 19: (1, 64), 22: (1, 64), 41: (1, 64), 24: (1, 64)},
  269: {22: (1, 161), 21: (1, 161), 24: (0, 177)},
  270: {22: (1, 160), 21: (1, 160), 24: (0, 177)},
  271: {22: (0, 292)},
  272: {0: (0, 119), 4: (0, 120), 45: (0, 121), 33: (0, 51), 32: (0, 124), 46: (0, 172), 48: (0, 293), 47: (0, 125), 3: (0, 126), 15: (0, 127), 37: (0, 129)},
  273: {22: (0, 294)},
  274: {0: (0, 119), 4: (0, 120), 45: (0, 121), 55: (0, 295), 48: (0, 270), 33: (0, 51), 32: (0, 124), 46: (0, 172), 47: (0, 125), 3: (0, 126), 13: (0, 272), 10: (0, 11), 11: (0, 12), 15: (0, 127), 37: (0, 129)},
  275: {0: (0, 119), 4: (0, 120), 45: (0, 121), 33: (0, 51), 25: (0, 296), 32: (0, 124), 46: (0, 172), 13: (0, 265), 47: (0, 125), 3: (0, 126), 11: (0, 12), 15: (0, 127), 55: (0, 297), 48: (0, 267), 37: (0, 129), 10: (0, 11)},
  276: {21: (1, 67), 19: (1, 67), 22: (1, 67), 41: (1, 67), 24: (1, 67)},
  277: {16: (1, 100), 6: (1, 100), 25: (1, 100), 0: (1, 100), 4: (1, 100), 11: (1, 100), 10: (1, 100), 3: (1, 100)},
  278: {0: (0, 179), 4: (0, 180), 50: (0, 181), 33: (0, 51), 51: (0, 298), 37: (0, 183), 55: (0, 299), 11: (0, 12), 53: (0, 186), 13: (0, 300), 15: (0, 187), 3: (0, 188), 52: (0, 224), 10: (0, 11)},
  279: {22: (0, 301)},
  280: {0: (0, 179), 4: (0, 180), 50: (0, 181), 33: (0, 51), 51: (0, 302), 37: (0, 183), 53: (0, 186), 15: (0, 187), 3: (0, 188), 52: (0, 224)},
  281: {22: (1, 152), 21: (1, 152), 24: (0, 225)},
  282: {0: (0, 179), 25: (0, 303), 4: (0, 180), 50: (0, 181), 33: (0, 51), 51: (0, 304), 13: (0, 305), 55: (0, 306), 37: (0, 183), 11: (0, 12), 53: (0, 186), 15: (0, 187), 3: (0, 188), 52: (0, 224), 10: (0, 11)},
  283: {21: (1, 54), 19: (1, 54), 22: (1, 54), 41: (1, 54), 24: (1, 54)},
  284: {25: (0, 307), 0: (0, 179), 4: (0, 180), 50: (0, 181), 33: (0, 51), 13: (0, 280), 51: (0, 281), 37: (0, 183), 55: (0, 308), 53: (0, 186), 11: (0, 12), 15: (0, 187), 3: (0, 188), 52: (0, 224), 10: (0, 11)},
  285: {21: (0, 309), 22: (0, 310)},
  286: {21: (1, 58), 19: (1, 58), 22: (1, 58), 41: (1, 58), 24: (1, 58)},
  287: {22: (1, 163), 21: (1, 163), 24: (0, 177)},
  288: {0: (0, 119), 4: (0, 120), 45: (0, 121), 33: (0, 51), 32: (0, 124), 46: (0, 172), 48: (0, 311), 47: (0, 125), 3: (0, 126), 15: (0, 127), 37: (0, 129)},
  289: {22: (0, 312)},
  290: {22: (1, 158), 21: (1, 158), 24: (0, 177)},
  291: {21: (1, 65), 19: (1, 65), 22: (1, 65), 41: (1, 65), 24: (1, 65)},
  292: {21: (1, 70), 19: (1, 70), 22: (1, 70), 41: (1, 70), 24: (1, 70)},
  293: {22: (1, 164), 21: (1, 164), 24: (0, 177)},
  294: {21: (1, 69), 19: (1, 69), 22: (1, 69), 41: (1, 69), 24: (1, 69)},
  295: {22: (0, 313)},
  296: {0: (0, 119), 4: (0, 120), 45: (0, 121), 33: (0, 51), 32: (0, 124), 46: (0, 172), 48: (0, 287), 55: (0, 314), 47: (0, 125), 3: (0, 126), 13: (0, 288), 10: (0, 11), 11: (0, 12), 15: (0, 127), 37: (0, 129)},
  297: {22: (0, 315)},
  298: {22: (1, 150), 21: (1, 150), 24: (0, 225)},
  299: {22: (0, 316)},
  300: {0: (0, 179), 4: (0, 180), 50: (0, 181), 33: (0, 51), 51: (0, 317), 37: (0, 183), 53: (0, 186), 15: (0, 187), 3: (0, 188), 52: (0, 224)},
  301: {21: (1, 50), 19: (1, 50), 22: (1, 50), 41: (1, 50), 24: (1, 50)},
  302: {22: (1, 149), 21: (1, 149), 24: (0, 225)},
  303: {0: (0, 179), 4: (0, 180), 50: (0, 181), 33: (0, 51), 55: (0, 318), 51: (0, 319), 13: (0, 320), 37: (0, 183), 11: (0, 12), 53: (0, 186), 15: (0, 187), 3: (0, 188), 52: (0, 224), 10: (0, 11)},
  304: {22: (1, 156), 21: (1, 156), 24: (0, 225)},
  305: {0: (0, 179), 4: (0, 180), 50: (0, 181), 51: (0, 321), 33: (0, 51), 37: (0, 183), 53: (0, 186), 15: (0, 187), 3: (0, 188), 52: (0, 224)},
  306: {22: (0, 322)},
  307: {0: (0, 179), 4: (0, 180), 50: (0, 181), 33: (0, 51), 51: (0, 298), 37: (0, 183), 11: (0, 12), 53: (0, 186), 13: (0, 300), 55: (0, 323), 15: (0, 187), 3: (0, 188), 52: (0, 224), 10: (0, 11)},
  308: {22: (0, 324)},
  309: {0: (0, 179), 25: (0, 325), 4: (0, 180), 50: (0, 181), 33: (0, 51), 51: (0, 304), 13: (0, 305), 37: (0, 183), 11: (0, 12), 53: (0, 186), 55: (0, 326), 15: (0, 187), 3: (0, 188), 52: (0, 224), 10: (0, 11)},
  310: {21: (1, 55), 19: (1, 55), 22: (1, 55), 41: (1, 55), 24: (1, 55)},
  311: {22: (1, 162), 21: (1, 162), 24: (0, 177)},
  312: {21: (1, 66), 19: (1, 66), 22: (1, 66), 41: (1, 66), 24: (1, 66)},
  313: {21: (1, 68), 19: (1, 68), 22: (1, 68), 41: (1, 68), 24: (1, 68)},
  314: {22: (0, 327)},
  315: {21: (1, 72), 19: (1, 72), 22: (1, 72), 41: (1, 72), 24: (1, 72)},
  316: {21: (1, 57), 19: (1, 57), 22: (1, 57), 41: (1, 57), 24: (1, 57)},
  317: {22: (1, 154), 21: (1, 154), 24: (0, 225)},
  318: {22: (0, 328)},
  319: {22: (1, 155), 21: (1, 155), 24: (0, 225)},
  320: {0: (0, 179), 4: (0, 180), 50: (0, 181), 51: (0, 329), 33: (0, 51), 37: (0, 183), 53: (0, 186), 15: (0, 187), 3: (0, 188), 52: (0, 224)},
  321: {22: (1, 153), 21: (1, 153), 24: (0, 225)},
  322: {21: (1, 53), 19: (1, 53), 22: (1, 53), 41: (1, 53), 24: (1, 53)},
  323: {22: (0, 330)},
  324: {21: (1, 59), 19: (1, 59), 22: (1, 59), 41: (1, 59), 24: (1, 59)},
  325: {55: (0, 331), 0: (0, 179), 4: (0, 180), 50: (0, 181), 33: (0, 51), 51: (0, 319), 13: (0, 320), 37: (0, 183), 11: (0, 12), 53: (0, 186), 15: (0, 187), 3: (0, 188), 52: (0, 224), 10: (0, 11)},
  326: {22: (0, 332)},
  327: {21: (1, 63), 19: (1, 63), 22: (1, 63), 41: (1, 63), 24: (1, 63)},
  328: {21: (1, 56), 19: (1, 56), 22: (1, 56), 41: (1, 56), 24: (1, 56)},
  329: {22: (1, 151), 21: (1, 151), 24: (0, 225)},
  330: {21: (1, 49), 19: (1, 49), 22: (1, 49), 41: (1, 49), 24: (1, 49)},
  331: {22: (0, 333)},
  332: {21: (1, 47), 19: (1, 47), 22: (1, 47), 41: (1, 47), 24: (1, 47)},
  333: {21: (1, 51), 19: (1, 51), 22: (1, 51), 41: (1, 51), 24: (1, 51)},
}
TOKEN_TYPES = (
{0: 'INT',
 1: 'transition',
 2: '_expr',
 3: 'NAME',
 4: '_VAR_OPEN',
 5: Token(RULE, '__anon_plus_0'),
 6: '_NL',
 7: 'var',
 8: 'line',
 9: 'operation',
 10: 'NEGATE_LIVE',
 11: 'NEGATE_ALL',
 12: '_expr_no_int',
 13: '_negation',
 14: 'table',
 15: 'range',
 16: '$END',
 17: 'HOIST_ARROW',
 18: '_PERMUTE',
 19: 'SUBT',
 20: 'SEMICOLON',
 21: 'COMMA',
 22: '_VAR_CLOSE',
 23: 'NORMAL_ARROW',
 24: 'MULT',
 25: '_WS',
 26: '__ANON_2',
 27: '_arrow',
 28: '_sep',
 29: Token(RULE, '__anon_plus_2'),
 30: 'COLON',
 31: 'EQUAL',
 32: 'LEAVE_ALONE',
 33: 'LSQB',
 34: 'COMPASS_DIR',
 35: 'ptcd',
 36: 'cdir',
 37: 'reference',
 38: 'tr_state',
 39: '__ANON_0',
 40: Token(RULE, '__anon_star_3'),
 41: 'RSQB',
 42: Token(RULE, '__anon_star_1'),
 43: 'PREVIOUS_BIND',
 44: '__ANON_3',
 45: 'ptcd_operation',
 46: '_ptcd_expr_no_int',
 47: 'ptcd_var',
 48: '_ptcd_expr',
 49: '__ANON_1',
 50: 'tr_operation',
 51: '_tr_expr',
 52: '_tr_expr_no_int',
 53: 'tr_var',
 54: Token(RULE, '__anon_star_5'),
 55: 'EXTEND_LAST',
 56: Token(RULE, '__anon_star_4')}
)
parse_table.states = {s: {TOKEN_TYPES[t]: (a, RULES[x] if a is Reduce else x) for t, (a, x) in acts.items()}
                      for s, acts in STATES.items()}
parse_table.start_state = 0
parse_table.end_state = 39
class Lark_StandAlone:
  def __init__(self, transformer=None, postlex=None):
     callback = parse_tree_builder.create_callback(transformer=transformer)
     callbacks = {rule: getattr(callback, rule.alias or rule.origin, None) for rule in RULES.values()}
     self.parser = _Parser(parse_table, callbacks)
     self.postlex = postlex
  def parse(self, stream):
     tokens = lex(stream)
     if self.postlex: tokens = self.postlex.process(tokens)
     return self.parser.parse(tokens)
